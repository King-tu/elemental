// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521165982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\x50\xb4\xe9\x22\xb8\x76\x1b\xd4\x45\xef\xa1\x28\x36\x8c\x34\x72\xd8\x4a\xa4\x4a\x51\x6e\x72\x86\xfe\xf7\x05\xbf\x24\x52\x1f\x96\x9c\x26\x6d\x1f\xfc\x12\x44\x43\xf2\x37\x9f\x1c\xce\x90\xce\x71\xf4\x19\x6f\x00\xed\x76\x28\x5c\x83\x08\x9f\x33\x9a\x90\x4d\xc9\xb1\x20\x8c\x86\x7f\xe1\x0c\x50\x55\xcd\x66\x24\xcb\x19\x17\x68\x3e\x43\x08\xa1\x20\xc9\x44\xa0\xff\x2b\xee\x68\x14\xcc\xf4\xff\x1b\x22\x6e\xca\xeb\x30\x62\xd9\x29\xce\x19\x07\xc1\x4e\x08\x8d\x4e\x21\x85\x0c\xa8\xc0\xa9\x5e\xb2\xdb\x21\x8e\xe9\x06\x50\xb8\xce\x21\x0a\xdf\xdd\xe5\x70\xc9\xd9\x96\xc4\xc0\x0b\x74\x52\x55\x1a\x4b\x8a\x83\xaa\xaa\x5e\x02\x34\x56\x83\x8b\xd9\x6c\x56\x23\x3c\x21\x4b\xf4\x04\x68\x99\xa1\xd5\x19\x0a\xcf\x69\x99\x15\x52\xd8\xd3\x53\xb9\x42\x0d\x28\x78\x54\x55\x88\x43\xce\xa1\x00\x2a\x0a\x24\x6e\x00\xe5\xac\x28\xc8\x75\x0a\x68\x8b\xd3\x12\x0a\x94\x30\x8e\xb0\x10\x9c\x5c\x97\x02\x14\x77\xbd\xfc\x99\xa5\x19\x43\x04\xe1\x4c\x48\xc4\x0e\x7e\x21\x38\xa1\x9b\xd9\x2c\x62\xb4\xb0\x66\xda\xed\x4e\xac\xa0\x14\x67\xb0\x44\x4f\x14\x37\x29\xac\x5e\xfc\x5e\x33\x37\x3a\x1b\xb1\xa9\xe6\xd4\x96\x58\x2f\x95\x13\xf4\x7f\x55\x15\x5a\xdb\xd4\x4b\x3a\x52\x9d\x69\x55\xec\x0a\xcf\x9a\xca\x98\xcd\xff\xc6\x6a\xda\x29\xaf\x59\x0c\x69\x78\x4e\x05\x11\x77\x46\xf3\x8b\x18\xd4\x67\x5b\xae\x9a\xce\x12\xf5\xcd\xae\x3f\x41\x24\xc2\xd9\x16\xf3\x69\x78\x67\xa8\x0e\x90\xb0\x26\xee\x94\xa4\x72\xea\x0a\xd5\xf1\xe0\x40\xbd\x85\x42\xc8\xd1\xaa\x0a\x96\x6a\xea\x73\x2c\x60\xc3\xf8\xdd\xaa\x6f\x2a\x2b\x79\x54\x7b\x50\xcf\xbf\xe4\x64\x8b\x85\x44\x6f\x4d\x37\x03\x55\xb5\x9c\x55\x3a\xd6\x48\x82\x28\x13\xde\xa4\x8b\xe2\x2d\x63\xa2\x89\xb5\x7e\x2d\x2f\xd3\x92\xe3\x14\x55\xd5\x2b\x52\x08\xd7\x6e\x18\xa5\x92\xc2\x92\x09\x6b\xeb\x78\x9b\xc2\xe3\xc3\xc7\x7f\x0f\xce\x34\x3e\x7e\xce\xa8\x00\x2a\x1c\x77\x8a\x92\x53\xed\x4b\xd2\xeb\xcb\x02\x11\xaa\x3e\xa5\xd0\xe1\x2c\x29\x69\x84\xe6\x6c\xa2\x48\x8b\x36\xc3\xf9\xa2\xdf\xdf\xca\x2b\x5a\x98\x61\xe8\x26\x6c\x66\x56\x9b\xbc\x51\x01\xa3\x9c\x11\x2a\x80\x23\xc1\x10\x46\x91\x1c\x93\x72\x4f\x93\xf4\x3e\x9a\xe5\xbe\x3a\x9e\xaa\x09\xc1\x32\xc1\x18\xcd\x94\x30\xab\x33\x84\xf3\x1c\x68\x3c\x9f\xc6\x62\x57\x2d\x11\x0b\xc3\x70\xe1\x1a\xe7\x57\x09\x65\xd4\x7f\xa6\xd0\x0c\x68\xe1\xf9\x4c\x30\xf5\x89\x11\x85\xaf\x9a\xbb\x71\xea\x63\x59\x43\xcb\x32\xb7\xfc\xc3\x30\x6c\xfb\x59\x5b\x64\xa2\xc1\x58\x29\xbe\xd1\x5e\x32\xa7\xff\xbd\x94\x06\x91\x40\x3a\x11\x5b\xe9\x74\x7e\xb1\x7c\x6a\x36\xac\x14\x6a\x41\x38\xdf\xb7\x8f\x16\x1a\xbf\xf2\x62\x96\x95\xc2\x38\x45\xed\xc4\x88\xd1\x2d\x70\xe1\xfa\x44\x45\x25\xed\x44\xbf\x56\xbb\xb8\x9f\xd1\xe5\xdf\x9e\x1d\xe5\x60\xb6\xec\xb9\x67\xe6\xae\x72\xcd\x46\x04\x64\x8e\xdd\xf6\x5a\x4c\xce\xdd\x6f\x93\x17\x90\xe0\x32\x15\x6f\x78\x0c\xdc\x4b\x39\xb1\x1e\x40\x4c\x8e\x10\xba\x41\x09\x81\x34\x2e\x6c\xb0\x46\x3a\x40\x0e\x37\x8c\xcb\x70\xbe\x40\x1f\x3e\xea\x03\xba\x95\x68\x2c\xb9\x51\xae\x55\x9d\xbc\x31\x62\xd5\x75\x40\x53\xa2\xd4\xc7\x92\x7f\xb0\xf8\x27\xac\xb6\x89\xb6\xc1\x7b\xe0\x05\x61\xd4\x53\x7f\x6b\x68\xdf\xaa\xae\xc1\x9e\x2f\x10\xa1\xc6\xe5\x6e\x2e\x05\x11\x3e\xbb\xbc\xb8\xa0\x09\x0b\xad\x14\x95\x12\xcb\x39\xff\xc7\x0a\x80\xf6\xc1\x9f\xc9\x29\x52\x70\xdc\x5e\x66\x0f\xe7\xf1\xd3\xcb\x54\x4e\x65\x24\x65\xde\xed\x5c\xcb\xb7\x2c\xbe\xdb\xa1\x0c\x7f\x06\x49\x55\x85\xe1\x4c\x16\x57\x56\x74\x69\x65\x05\x6d\x95\x93\x46\xb8\xfa\x54\x30\xba\x0a\x4e\x02\x74\xad\xfe\xf9\x5b\x09\x6c\x0c\x1e\x5c\xe9\x55\xb2\x7c\x0d\x5f\x97\x02\x6e\x8d\x93\xfe\x82\xaf\x23\x46\xb0\x67\x8d\xcc\xab\xc3\x59\x42\xca\xa5\x9c\x38\x02\x38\x5f\xec\x07\x69\x05\xec\xaf\xfb\xe6\x36\x51\xec\x1a\x63\xb5\x27\x04\x96\xdd\xb8\xb7\xa5\xaa\x2a\x64\xa5\x67\x18\x57\xd5\xb5\xef\x94\x0b\x4a\x04\xc1\x29\xf9\xbf\x5b\xb4\xb7\xca\x51\xc5\xd8\xc3\x69\x31\xec\xd9\x23\xbd\x65\xc9\x50\x89\x69\x37\xc9\x5e\x03\x2e\xd0\x83\x54\x1e\xa8\x53\x7a\xd8\xfc\xd9\x4a\x68\xba\xd6\xf6\x24\xfd\xad\x40\x25\x25\x5f\x4a\x5b\x60\xc9\x35\x07\x4a\x2f\x97\xcc\x17\xc8\x4f\x62\xba\x36\xd5\x6b\x1d\x69\xac\x3b\x6c\x12\x0e\x6b\x06\xcd\x24\x79\xf2\xca\xf3\x09\x62\x1b\xac\xb6\x61\x81\xb4\x80\x36\x44\x10\x34\xc3\xda\x67\xda\x04\x6b\x10\x0e\xdf\x02\xc4\xe3\x98\xc0\x63\x33\x27\xb1\x31\xc3\x62\xa2\x1d\xa6\x19\x00\x9d\x21\x12\xf7\xab\xd9\x97\xb8\x6f\x30\x8f\x23\x16\x43\xdc\x4e\xe1\x2a\xcb\x4c\x56\xad\x27\x6f\x4f\xcc\xdc\xfb\x0e\x55\xdb\x5d\x0c\x1c\xae\x93\xa4\x53\xe2\xfd\x6c\xa7\xa8\xeb\x69\x2d\xf1\x0b\x28\x22\x4e\x72\x61\x0c\x23\xad\xc2\x22\xbf\xc2\x60\x51\xa9\x36\xbd\x9a\x23\xab\x9b\x26\x2c\xa7\xba\xe9\x05\x8b\x7a\x76\xdf\x89\x14\x06\xbe\x0c\xca\x13\x7c\xa0\x2c\x66\xd1\xc7\xa0\xbd\x9f\x14\x79\xad\x6f\x0c\xbc\x7d\xe7\x4f\xbb\x6a\x09\xe5\xeb\x7a\xd5\x0d\x56\xe7\x34\x57\x8a\x4d\xd9\x5b\x4a\x8a\x8e\x72\x46\x82\x24\x13\xe1\x3a\xe7\x84\x8a\x64\x1e\xfc\xe7\x97\x62\xf5\x4b\xf1\x47\x20\x6b\xec\x26\xa7\x2a\xc7\x35\x24\x9d\xa8\x16\xc6\x59\x03\x07\xba\x3e\xcf\xa5\x27\xff\x04\x21\xfb\x35\xed\xb9\x3f\x41\x48\x61\x3b\x3b\xd3\xf5\x66\xef\x04\xb3\xf5\x38\x44\x40\xb6\xed\xc4\xf2\x64\x8f\xf6\x03\x1c\xe7\x0b\x9f\x8f\xbd\x4e\xf1\x8d\xa3\xf3\x4a\x27\x91\x7a\x55\x95\x0d\x58\x57\xcd\xf5\x80\x9a\x75\xfe\xdc\x90\x2d\xd0\x07\xd6\x74\x80\xe9\xdc\xd9\x7a\xbd\x3a\xd7\x49\xb6\x5f\x5b\x74\x86\x1c\x04\x2f\x04\xfd\xab\xa5\xf7\x38\x25\x31\x16\xea\x70\x20\x31\x68\x45\xa3\x92\x73\xa0\x02\x11\x9a\x30\x9e\xe9\x0d\x5a\x08\xc6\x21\x96\xe9\x50\x37\xb0\xba\x78\x28\x39\x4c\xcf\xa9\x86\x95\x3c\xef\x39\x67\xdc\x6a\xa0\x3e\x0a\xbf\x09\x3a\x57\xb4\x9d\xdd\x76\x5f\x4a\xc2\x21\x3e\xdf\x37\xb1\xef\x0e\xd3\x0f\xed\xe6\x48\x52\xd7\x46\xef\x38\xa6\x05\x91\x6a\x7a\x63\xe1\xf9\x6d\xce\x0a\x68\x0a\x58\x43\x7e\x6b\x84\xf0\x67\xcb\x2c\xa3\x3c\x12\xe8\x7d\x1a\xd8\x61\x39\xc6\xb9\x2f\xab\x35\x80\x85\x32\x7b\xdc\x4f\xb3\x03\x0e\x5d\xfc\xae\xf0\xfe\x75\x86\x28\x49\x9d\xa6\xaf\x65\x9b\xba\xff\xf3\xe9\x4b\xb9\xd8\x76\x82\x7e\x0e\xef\x55\x46\x90\x0c\x0e\x52\xe5\x1d\xc9\xe0\x67\x54\x04\x6e\x05\x70\x8a\xd3\x83\x94\x39\x37\x8b\x7e\xb0\x42\x83\xea\x85\xcf\xd2\x94\x7d\x85\xf8\xf9\x0d\x23\x51\x13\xdb\xfb\x54\xd3\xa1\x76\x41\xd5\xbd\x44\x4b\x2d\x1d\xb9\xf3\x01\xed\x96\x4d\x19\x21\xd7\x7d\x62\x84\x76\x04\xb8\x0a\x96\x28\xb8\x92\x68\xd5\x52\xe5\x9d\x67\xa5\x60\x1b\xa0\xc0\xb1\x50\x3b\x66\xc8\x46\xd0\xb2\x0d\x1c\xe0\xe4\x46\x08\xcc\x27\xd9\xe0\x12\xcb\x64\x4f\xa7\x79\x75\xa9\x4f\xf9\x16\x8f\x2b\xad\x9e\x93\x0b\x1e\x43\xb3\x8d\x40\xe1\x6b\x7c\xfb\x0a\xe8\x46\xdc\xa0\xa7\x53\x74\x7b\x8d\x6f\x49\x56\x66\x7a\xc9\x54\x0d\x25\xb5\xe1\x23\x29\x09\x4e\x0b\x78\x34\x95\x08\x3d\x48\x25\x42\xef\xa9\x52\xcd\xe7\xf1\x55\xc2\xb7\xea\xad\x08\x3d\x0d\x9f\x0e\x1d\x0c\x49\xca\xb0\x98\x94\x7f\x8c\x13\x5f\xca\x05\x07\xfa\xf0\xbd\x79\x49\x7a\x38\x7d\x4d\xd9\x3b\x55\xe8\x0b\x3a\x59\x64\x42\xc5\xbc\x25\xf6\xe2\xa1\xfd\x34\x16\x88\x0f\xe9\x35\x1d\xa7\x87\x7b\xcd\x4a\xf1\x08\x5e\x9b\x28\xf3\x7d\x9c\xd6\x48\xfd\xfd\x9c\xf6\xb3\x16\x5f\xdf\x92\x3e\x7e\x68\xb1\xf5\x30\x82\xff\xc0\xe2\xea\x81\x62\xab\x77\xb0\x67\x2a\x49\x50\x0a\xb4\x55\xba\x2d\xd0\x1f\xe8\x69\x2d\x93\x69\x3e\xfd\x29\xee\xdb\x8b\xc1\x80\x9e\xb5\xf5\x6a\xe8\xac\xb2\x37\x13\x24\xb5\x77\x7b\x39\x44\x24\x21\x91\xea\xca\x5e\x32\x5e\xf7\x38\x5e\x3b\x5e\x53\xbd\xe9\xf5\x2d\x8b\xee\x64\x9b\x1f\x56\xa8\x9b\xe1\xcf\x70\x67\x7b\xb9\xb1\xcb\x89\x21\x19\xe6\x0a\xc8\x5e\x03\x36\x41\x30\x20\x8e\x6a\x00\x49\x82\xb6\x4b\xc4\x3e\xcb\xb0\xd9\xc7\xb6\x69\xe6\x5e\xe3\xfc\x83\x64\xf4\xf1\x77\xb9\x6c\xe7\xda\x69\x3b\x33\x96\x3b\x3d\x45\xff\x03\x14\xb1\x32\x8d\x55\xbb\x97\x10\x1a\x23\x22\x96\xa8\x60\x28\x05\xf1\x5b\x81\xa2\x1b\x88\x3e\x23\x66\x9e\xd0\xd9\x57\xe0\x28\xc2\x05\x20\x42\x63\xb8\x85\x18\x15\x39\x44\x28\xc3\xf9\x6c\xd2\x25\xf4\x2b\x09\xf0\x1c\x17\xd0\x23\xa6\x7d\x14\xee\x35\x42\xe1\xf9\x2d\x29\xd3\xd4\xf1\x4b\xe1\xcf\xcc\x70\x3e\xd1\x43\x03\xbc\xe6\x0b\x89\xf1\x41\x3b\xe8\xe3\x34\xff\x4c\x50\xde\xd3\x79\x36\xfe\x9b\x15\x6f\x7e\xe7\xfd\x0a\xe7\xea\xf5\xaa\x36\x82\x0c\xda\x7d\x68\xe3\xbf\x69\xf1\xf9\x9d\x1d\x62\x03\x65\x82\xe6\x07\x43\xf6\xde\x94\x6c\x08\xc5\xe9\x9a\xc9\x54\xd5\xbd\x65\x08\xfa\x52\x59\xb0\x1a\xdd\x10\x36\x1f\x98\x2b\xcc\xde\x0e\x07\x21\x97\xba\xea\xb6\x29\xb2\x4b\x71\x70\x9c\xa4\xe6\x2c\x55\x7d\xdb\x6a\xa0\x9f\x3c\xa9\xaa\x83\x7a\xbe\xa6\xf0\xa8\x97\x55\x75\x02\x5d\xb6\x75\x6a\xb5\x86\x56\x32\x97\xbc\xea\x6d\x22\x07\xb5\xb2\xd0\xbd\x6f\x27\x08\x79\xe4\xd5\x80\x73\xc6\xc1\x39\x28\x1f\xbd\xa1\xe9\x9d\x83\xed\x50\xb5\xd4\xad\x79\xa3\xb8\xde\x63\x41\x3d\xea\x52\x35\x6e\x6b\xde\x54\x5c\x5b\xac\xd5\xa3\x43\x47\xf8\x49\x9b\xb7\x5a\x59\x87\x48\x0b\x4e\x4a\xe4\xbc\x35\x6a\x8a\x09\x02\x4a\xd2\x5e\xef\xab\x61\x9f\x3b\x2d\xb3\x7b\x70\x1e\xbe\x4f\xed\x73\xed\x6e\x87\x22\x9c\x13\xa1\x24\x45\x73\x9d\xe9\x3d\xd4\xc5\x3d\xc5\xb7\x55\xe7\x21\x0a\x9c\x54\x55\xe0\xb8\xd3\x6a\x15\x4c\xe4\x7f\x20\xab\x1e\x4e\x1e\x23\xd4\xcf\xa9\x1d\x4f\x03\x01\x96\x73\x88\xfc\x5d\xdc\xd0\x6c\xd0\x3a\x73\x26\x84\xac\xf7\x66\x64\x21\x6b\xa2\x49\x76\xad\xe7\x96\x51\x58\xe7\x42\x57\x0f\x18\x82\x16\xb1\x19\x1d\x05\x7a\x49\x52\x01\x5c\xfd\x18\xaa\x1e\x6b\x68\x1a\xce\x9b\x33\x8e\xc8\x38\x90\x0d\xfd\x2f\x38\x29\xa5\xa1\x19\x44\x77\xce\x14\xc4\x0c\x0b\x0f\x2d\xc3\xc2\x64\xbd\x7a\x70\x3c\xdd\x35\x0f\x40\x9a\xae\xbf\xb5\x44\xf5\xd8\x28\x8a\xf3\xea\x5b\x8f\x35\x34\x8d\xe6\xcd\x19\x47\x94\xd5\x99\x03\x26\x3f\x0d\x8e\x19\x19\x85\x70\xaf\xbc\xcc\x50\x4d\x5a\x75\x2f\xc5\x26\xc0\xb5\x92\xac\xa5\xac\x3a\xb7\x33\xa3\x58\xce\xd5\x95\x05\xb3\xa4\x55\xf7\x72\x6b\x02\x5c\x5b\x34\x43\x59\x75\xae\x20\xc6\xb0\xfc\x33\xd5\x39\x4a\x27\x9f\xa0\xea\xe8\xf2\x77\x4f\x4d\xd2\xf2\xb8\x33\x46\xe1\x2e\x39\xc9\x30\xbf\xf3\xf6\x4e\x43\xd3\x80\xde\x9c\x51\xc4\xb7\x80\x63\xff\x78\xb7\x94\x95\xb9\xf6\xad\xc7\x27\x60\xf9\x37\x16\x12\x4b\x53\x56\xed\x2b\xe4\x51\xac\x75\x6b\x2f\xae\x9d\xbd\xb8\x9e\xbc\x17\xd7\xfa\x01\xaf\x41\x51\xdf\x06\xc5\x8e\x8d\xa3\x94\xd7\xe6\x05\xd2\xc2\x68\x82\xfd\x7d\x77\x3d\x3c\x1e\x0f\x9d\x07\x38\x84\x6a\x92\x16\xcb\x9d\x31\x0e\xe7\x89\xe5\xc8\x34\x22\x90\x42\xee\xfc\xb6\xe4\xf0\x5e\xef\x3b\xf4\x31\x03\x8c\xbf\x4f\x43\x63\x0a\xa7\x63\x37\x83\x8e\xdd\xcc\xb1\x9b\x39\x76\x33\xc7\x6e\x66\x0c\xf1\xd8\xcd\x1c\xbb\x99\x11\xc4\x63\x37\x73\xec\x66\x8e\xdd\xcc\xb1\x9b\x79\xc4\x6e\xe6\x9f\x00\x00\x00\xff\xff\x6f\x59\x71\xa7\x49\x3e\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15945, mode: os.FileMode(420), modTime: time.Unix(1521165931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

