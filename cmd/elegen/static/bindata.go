// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xdb\xb8\xf2\x7f\xf7\xa7\xe0\x5f\xe8\xee\xda\x7f\x38\x4a\x9f\xbd\x27\x0b\x14\x6d\xba\x08\x4e\xbb\x0d\xea\xa2\xe7\xa1\x28\x36\x8c\x34\x72\xd8\x48\xa4\x4a\x51\x6e\x72\x0c\x7d\xf7\x03\xde\x24\x52\x17\x4b\x4e\x93\x6d\x1f\xfc\x12\x44\x43\xf2\x37\x57\x0e\x67\x48\xe7\x38\xba\xc5\x1b\x40\xbb\x1d\x0a\xd7\x20\xc2\x97\x8c\x26\x64\x53\x72\x2c\x08\xa3\xe1\x5f\x38\x03\x54\x55\xb3\x19\xc9\x72\xc6\x05\x9a\xcf\x10\x42\x28\x48\x32\x11\xe8\xff\x8a\x7b\x1a\x05\x33\xfd\xff\x86\x88\x9b\xf2\x3a\x8c\x58\x76\x8a\x73\xc6\x41\xb0\x13\x42\xa3\x53\x48\x21\x03\x2a\x70\xaa\x97\xec\x76\x88\x63\xba\x01\x14\xae\x73\x88\xc2\x0f\xf7\x39\x5c\x72\xb6\x25\x31\xf0\x02\x9d\x54\x95\xc6\x92\xe2\xa0\xaa\xaa\x97\x00\x8d\xd5\xe0\x62\x36\x9b\xd5\x08\xcf\xc8\x12\x3d\x03\x5a\x66\x68\x75\x86\xc2\x73\x5a\x66\x85\x14\xf6\xf4\x54\xae\x50\x03\x0a\x1e\x55\x15\xe2\x90\x73\x28\x80\x8a\x02\x89\x1b\x40\x39\x2b\x0a\x72\x9d\x02\xda\xe2\xb4\x84\x02\x25\x8c\x23\x2c\x04\x27\xd7\xa5\x00\xc5\x5d\x2f\x7f\x61\x69\xc6\x10\x41\x38\x13\x12\xb1\x83\x5f\x08\x4e\xe8\x66\x36\x8b\x18\x2d\xac\x99\x76\xbb\x13\x2b\x28\xc5\x19\x2c\xd1\x33\xc5\x4d\x0a\xab\x17\x7f\xd4\xcc\x8d\xce\x46\x6c\xaa\x39\xb5\x25\xd6\x4b\xe5\x04\xfd\x5f\x55\x85\xd6\x36\xf5\x92\x8e\x54\x67\x5a\x15\xbb\xc2\xb3\xa6\x32\x66\xf3\xbf\xb1\x9a\x76\xca\x5b\x16\x43\x1a\x9e\x53\x41\xc4\xbd\xd1\xfc\x22\x06\xf5\xd9\x96\xab\xa6\xb3\x44\x7d\xb3\xeb\x2f\x10\x89\x70\xb6\xc5\x7c\x1a\xde\x19\xaa\x03\x24\xac\x89\x3b\x25\xa9\x9c\xba\x42\x75\x3c\x38\x50\xef\xa1\x10\x72\xb4\xaa\x82\xa5\x9a\xfa\x12\x0b\xd8\x30\x7e\xbf\xea\x9b\xca\x4a\x1e\xd5\x1e\xd4\xf3\x2f\x39\xd9\x62\x21\xd1\x5b\xd3\xcd\x40\x55\x2d\x67\x95\x8e\x35\x92\x20\xca\x84\x37\xe9\xa2\x78\xcf\x98\x68\x62\xad\x5f\xcb\xcb\xb4\xe4\x38\x45\x55\xf5\x86\x14\xc2\xb5\x1b\x46\xa9\xa4\xb0\x64\xc2\xda\x3a\xde\xa6\xf0\xf8\xf4\xf9\xff\x07\x67\x1a\x1f\xbf\x64\x54\x00\x15\x8e\x3b\x45\xc9\xa9\xf6\x25\xe9\xf5\x65\x81\x08\x55\x9f\x52\xe8\x70\x96\x94\x34\x42\x73\x36\x51\xa4\x45\x9b\xe1\x7c\xd1\xef\x6f\xe5\x15\x2d\xcc\x30\x74\x13\x36\x33\xab\x4d\xde\xa8\x80\x51\xce\x08\x15\xc0\x91\x60\x08\xa3\x48\x8e\x49\xb9\xa7\x49\xfa\x10\xcd\x72\x5f\x1d\x4f\xd5\x84\x60\x99\x60\x8c\x66\x4a\x98\xd5\x19\xc2\x79\x0e\x34\x9e\x4f\x63\xb1\xab\x96\x88\x85\x61\xb8\x70\x8d\xf3\xab\x84\x32\xea\xbf\x50\x68\x06\xb4\xf0\x7c\x26\x98\xfa\xc4\x88\xc2\x37\xcd\xdd\x38\xf5\xa9\xac\xa1\x65\x99\x5b\xfe\x61\x18\xb6\xfd\xac\x2d\x32\xd1\x60\xac\x14\xdf\x69\x2f\x99\xd3\xff\x5e\x4a\x83\x48\x20\x9d\x88\xad\x74\x3a\xbf\x58\x3e\x35\x1b\x56\x0a\xb5\x20\x9c\xef\xdb\x47\x0b\x8d\x5f\x79\x31\xcb\x4a\x61\x9c\xa2\x76\x62\xc4\xe8\x16\xb8\x70\x7d\xa2\xa2\x92\x76\xa2\x5f\xab\x5d\x3c\xcc\xe8\xf2\x6f\xcf\x8e\x72\x30\x5b\xf6\xdc\x33\x73\x57\xb9\x66\x23\x02\x32\xc7\x6e\x7b\x2d\x26\xe7\xee\xb7\xc9\x2b\x48\x70\x99\x8a\x77\x3c\x06\xee\xa5\x9c\x58\x0f\x20\x26\x47\x08\xdd\xa0\x84\x40\x1a\x17\x36\x58\x23\x1d\x20\x87\x1b\xc6\x65\x38\x5f\xa0\x4f\x9f\xf5\x01\xdd\x4a\x34\x96\xdc\x28\xd7\xaa\x4e\xde\x19\xb1\xea\x3a\xa0\x29\x51\xea\x63\xc9\x3f\x58\xfc\x13\x56\xdb\x44\xdb\xe0\x23\xf0\x82\x30\xea\xa9\xbf\x35\xb4\xef\x55\xd7\x60\xcf\x17\x88\x50\xe3\x72\x37\x97\x82\x08\x5f\x5c\x5e\x5c\xd0\x84\x85\x56\x8a\x4a\x89\xe5\x9c\xff\x63\x05\x40\xfb\xe0\xcf\xe4\x14\x29\x38\x6e\x2f\xb3\x87\xf3\xf8\xe9\x65\x2a\xa7\x32\x92\x32\xef\x76\xae\xe5\x5b\x16\xdf\xed\x50\x86\x6f\x41\x52\x55\x61\x38\x93\xc5\x95\x15\x5d\x5a\x59\x41\x5b\xe5\xa4\x11\xae\xbe\x14\x8c\xae\x82\x93\x00\x5d\xab\x7f\xfe\x56\x02\x1b\x83\x07\x57\x7a\x95\x2c\x5f\xc3\xb7\xa5\x80\x3b\xe3\xa4\xbf\xe0\xdb\x88\x11\xec\x59\x23\xf3\xea\x70\x96\x90\x72\x29\x27\x8e\x00\xce\x17\xfb\x41\x5a\x01\xfb\xeb\xbe\xb9\x4d\x14\xbb\xc6\x58\xed\x09\x81\x65\x37\xee\x6d\xa9\xaa\x0a\x59\xe9\x19\xc6\x55\x75\xed\x3b\xe5\x82\x12\x41\x70\x4a\xfe\xeb\x16\xed\xad\x72\x54\x31\xf6\x70\x5a\x0c\x7b\xf6\x48\x6f\x59\x32\x54\x62\xda\x4d\xb2\xd7\x80\x0b\xf4\x28\x95\x07\xea\x94\x1e\x36\x7f\xb6\x12\x9a\xae\xb5\x3d\x49\x7f\x2b\x50\x49\xc9\xd7\xd2\x16\x58\x72\xcd\x81\xd2\xcb\x25\xf3\x05\xf2\x93\x98\xae\x4d\xf5\x5a\x47\x1a\xeb\x0e\x9b\x84\xc3\x9a\x41\x33\x49\x9e\xbc\xf2\x7c\x82\xd8\x06\xab\x6d\x58\x20\x2d\xa0\x0d\x11\x04\xcd\xb0\xf6\x99\x36\xc1\x1a\x84\xc3\xb7\x00\xf1\x34\x26\xf0\xd8\xcc\x49\x6c\xcc\xb0\x98\x68\x87\x69\x06\x40\x67\x88\xc4\xfd\x6a\xf6\x25\xee\x1b\xcc\xe3\x88\xc5\x10\xb7\x53\xb8\xca\x32\x93\x55\xeb\xc9\xdb\x13\x33\xf7\xbe\x43\xd5\x76\x17\x03\x87\xeb\x24\xe9\x94\x78\x3f\xdb\x29\xea\x7a\x5a\x4b\xfc\x0a\x8a\x88\x93\x5c\x18\xc3\x48\xab\xb0\xc8\xaf\x30\x58\x54\xaa\x4d\xaf\xe6\xc8\xea\xa6\x09\xcb\xa9\x6e\x7a\xc5\xa2\x9e\xdd\x77\x22\x85\x81\xaf\x83\xf2\x04\x9f\x28\x8b\x59\xf4\x39\x68\xef\x27\x45\x5e\xeb\x1b\x03\x6f\xdf\xf9\xd3\xae\x5a\x42\xf9\xba\x5e\x75\x83\xd5\x39\xcd\x95\x62\x53\xf6\x96\x92\xa2\xa3\x9c\x91\x20\xc9\x44\xb8\xce\x39\xa1\x22\x99\x07\xff\xfa\xa5\x58\xfd\x52\xfc\x11\xc8\x1a\xbb\xc9\xa9\xca\x71\x0d\x49\x27\xaa\x85\x71\xd6\xc0\x81\xae\xcf\x73\xe9\xc9\x3f\x41\xc8\x7e\x4d\x7b\xee\x4f\x10\x52\xd8\xce\xce\x74\xbd\xd9\x3b\xc1\x6c\x3d\x0e\x11\x90\x6d\x3b\xb1\x3c\xdb\xa3\xfd\x00\xc7\xf9\xc2\xe7\x63\xaf\x53\x7c\xe3\xe8\xbc\xd2\x49\xa4\x5e\x55\x65\x03\xd6\x55\x73\x3d\xa0\x66\x9d\x3f\x37\x64\x0b\xf4\x91\x35\x1d\x60\x3a\x77\xb6\x5e\xaf\xce\x75\x92\xed\xd7\x16\x9d\x21\x07\xc1\x0b\x41\xff\x6a\xe9\x23\x4e\x49\x8c\x85\x3a\x1c\x48\x0c\x5a\xd1\xa8\xe4\x1c\xa8\x40\x84\x26\x8c\x67\x7a\x83\x16\x82\x71\x88\x65\x3a\xd4\x0d\xac\x2e\x1e\x4a\x0e\xd3\x73\xaa\x61\x25\xcf\x7b\xce\x19\xb7\x1a\xa8\x8f\xc2\x6f\x82\xce\x15\x6d\x67\xb7\xdd\xd7\x92\x70\x88\xcf\xf7\x4d\xec\xbb\xc3\xf4\x43\xbb\x39\x92\xd4\xb5\xd1\x07\x8e\x69\x41\xa4\x9a\xde\x58\x78\x7e\x97\xb3\x02\x9a\x02\xd6\x90\xdf\x1b\x21\xfc\xd9\x32\xcb\x28\x8f\x04\x7a\x9f\x06\x76\x58\x8e\x71\xee\xcb\x6a\x0d\x60\xa1\xcc\x1e\xf7\xd3\xec\x80\x43\x17\xbf\x2b\xbc\xff\x3b\x43\x94\xa4\x4e\xd3\xd7\xb2\x4d\xdd\xff\xf9\xf4\xa5\x5c\x6c\x3b\x41\x3f\x87\xf7\x2a\x23\x48\x06\x07\xa9\xf2\x81\x64\xf0\x33\x2a\x02\x77\x02\x38\xc5\xe9\x41\xca\x9c\x9b\x45\x3f\x58\xa1\x41\xf5\xc2\x17\x69\xca\xbe\x41\xfc\xf2\x86\x91\xa8\x89\xed\x7d\xaa\xe9\x50\xbb\xa0\xea\x5e\xa2\xa5\x96\x8e\xdc\xf9\x80\x76\xcb\xa6\x8c\x90\xeb\xbe\x30\x42\x3b\x02\x5c\x05\x4b\x14\x5c\x49\xb4\x6a\xa9\xf2\xce\x8b\x52\xb0\x0d\x50\xe0\x58\xa8\x1d\x33\x64\x23\x68\xd9\x06\x0e\x70\x72\x23\x04\xe6\x93\x6c\x70\x89\x65\xb2\xa7\xd3\xbc\xba\xd4\xa7\x7c\x8b\xc7\x95\x56\xcf\xc9\x05\x4f\xa1\xd9\x46\xa0\xf0\x2d\xbe\x7b\x03\x74\x23\x6e\xd0\xf3\x29\xba\xbd\xc5\x77\x24\x2b\x33\xbd\x64\xaa\x86\x92\xda\xf0\x91\x94\x04\xa7\x05\x3c\x99\x4a\x84\x1e\xa4\x12\xa1\x0f\x54\xa9\xe6\xf3\xf4\x2a\xe1\x3b\xf5\x56\x84\x9e\x87\xcf\x87\x0e\x86\x24\x65\x58\x4c\xca\x3f\xc6\x89\xaf\xe5\x82\x03\x7d\xf8\xd1\xbc\x24\x3d\x9e\xbe\xa6\xec\x9d\x2a\xf4\x05\x9d\x2c\x32\xa1\x62\xde\x12\x7b\xf1\xd8\x7e\x1a\x0b\xc4\xc7\xf4\x9a\x8e\xd3\xc3\xbd\x66\xa5\x78\x02\xaf\x4d\x94\xf9\x21\x4e\x6b\xa4\xfe\xe7\x9c\xf6\xb3\x16\x5f\xdf\x93\x3e\x7e\x68\xb1\xf5\x38\x82\xff\xc0\xe2\xea\x91\x62\xab\x77\xb0\x67\x2a\x49\x50\x0a\xb4\x55\xba\x2d\xd0\x1f\xe8\x79\x2d\x93\x69\x3e\xfd\x29\xee\xdb\x8b\xc1\x80\x9e\xb5\xf5\x6a\xe8\xac\xb2\x37\x13\x24\xb5\x77\x7b\x39\x44\x24\x21\x91\xea\xca\x5e\x33\x5e\xf7\x38\x5e\x3b\x5e\x53\xbd\xe9\xf5\x2d\x8b\xee\x64\x9b\x1f\x56\xa8\x9b\xe1\x5b\xb8\xb7\xbd\xdc\xd8\xe5\xc4\x90\x0c\x73\x05\x64\xaf\x01\x9b\x20\x18\x10\x47\x35\x80\x24\x41\xdb\x25\x62\xb7\x32\x6c\xf6\xb1\x6d\x9a\xb9\xb7\x38\xff\x24\x19\x7d\xfe\x5d\x2e\xdb\xb9\x76\xda\xce\x8c\xe5\x4e\x4f\xd1\x7f\x00\x45\xac\x4c\x63\xd5\xee\x25\x84\xc6\x88\x88\x25\x2a\x18\x4a\x41\xfc\x56\xa0\xe8\x06\xa2\x5b\xc4\xcc\x13\x3a\xfb\x06\x1c\x45\xb8\x00\x44\x68\x0c\x77\x10\xa3\x22\x87\x08\x65\x38\x9f\x4d\xba\x84\x7e\x23\x01\x5e\xe2\x02\x7a\xc4\xb4\x8f\xc2\xbd\x46\x28\x3c\xbf\x25\x65\x9a\x3a\x7e\x29\xfc\x99\x19\xce\x27\x7a\x68\x80\xd7\x7c\x21\x31\x3e\x69\x07\x7d\x9e\xe6\x9f\x09\xca\x7b\x3a\xcf\xc6\x7f\xb3\xe2\xcd\xef\xbc\x5f\xe1\x5c\xbd\x5e\xd5\x46\x90\x41\xbb\x0f\x6d\xfc\x37\x2d\x3e\xbf\xb3\x43\x6c\xa0\x4c\xd0\xfc\x60\x48\xb3\x58\x33\x99\xa2\xba\xb7\x0b\x41\x5f\x0a\x0b\x56\xa3\x1b\xc1\xe6\x01\x73\x75\xd9\xdb\xd9\x20\xe4\x52\x57\xdd\xf6\x44\x76\x27\x0e\x8e\x93\xcc\x9c\xa5\xaa\x5f\x5b\x0d\xf4\x91\x27\x55\x75\x50\xaf\xd7\x14\x1c\xf5\xb2\xaa\x4e\x9c\xcb\xb6\x4e\xad\x96\xd0\x4a\xe6\x92\x57\xbd\xcd\xe3\xa0\x56\x16\xba\xf7\xcd\x04\x21\x8f\xbc\x1a\x70\xce\x38\x38\x07\xe5\xa3\x77\x34\xbd\x77\xb0\x1d\xaa\x96\xba\x35\x6f\x14\xd7\x7b\x24\xa8\x47\x5d\xaa\xc6\x6d\xcd\x9b\x8a\x6b\x8b\xb4\x7a\x74\xe8\xe8\x3e\x69\xf3\x56\x2b\xeb\x10\x69\xc1\x49\x89\x9c\x37\x46\x4d\x31\x41\x40\x49\xda\xeb\x7d\x35\xec\x73\xa7\x65\xf6\x00\xce\xc3\xf7\xa8\x7d\xae\xdd\xed\x50\x84\x73\x22\x94\xa4\x68\xae\x33\xbc\x87\xba\x78\xa0\xf8\xb6\xda\x3c\x44\x81\x93\xaa\x0a\x1c\x77\x5a\xad\x82\x89\xfc\x0f\x64\xd5\xc3\xc9\x63\x84\xfa\x39\xb5\xe3\x69\x20\xc0\x72\x0e\x91\xbf\x8b\x1b\x9a\x0d\x5a\x67\xce\x84\x90\xf5\xde\x8a\x2c\x64\x4d\x34\xc9\xae\xf5\xcc\x32\x0a\xeb\x5c\xe4\xea\x01\x43\xd0\x22\x36\xa3\xa3\x40\xaf\x49\x2a\x80\xab\x1f\x41\xd5\x63\x0d\x4d\xc3\x79\x73\xc6\x11\x19\x07\xb2\xa1\xff\x06\x27\xa5\x34\x34\x83\xe8\xce\x99\x82\x98\x61\xe1\xa1\x65\x58\x98\xac\x57\x0f\x8e\xa7\xbb\xe6\xe1\x47\xd3\xf5\xb7\x96\xa8\x1e\x1b\x45\x71\x5e\x7b\xeb\xb1\x86\xa6\xd1\xbc\x39\xe3\x88\xb2\x2a\x73\xc0\xe4\xa7\xc1\x31\x23\xa3\x10\xee\x55\x97\x19\xaa\x49\xab\xee\x65\xd8\x04\xb8\x56\x92\xb5\x94\x55\xe7\x56\x66\x14\xcb\xb9\xb2\xb2\x60\x96\xb4\xea\x5e\x6a\x4d\x80\x6b\x8b\x66\x28\xab\xce\xd5\xc3\x18\x96\x7f\xa6\x3a\x47\xe9\xe4\x13\x54\x1d\x5d\xfe\xee\xa9\x49\x5a\x1e\x77\xc6\x28\xdc\x25\x27\x19\xe6\xf7\xde\xde\x69\x68\x1a\xd0\x9b\x33\x8a\xf8\x1e\x70\xec\x1f\xef\x96\xb2\x32\xd7\xbd\xf5\xf8\x04\x2c\xff\xa6\x42\x62\x69\xca\xaa\x7d\x75\x3c\x8a\xb5\x6e\xed\xc5\xb5\xb3\x17\xd7\x93\xf7\xe2\x5a\x3f\xdc\x35\x28\xea\xdb\xa0\xd8\xb1\x71\x94\xf2\xda\xbc\x3c\x5a\x18\x4d\xb0\xbf\xeb\xae\x87\xc7\xe3\xa1\xf3\xf0\x86\x50\x4d\xd2\x62\xb9\x33\xc6\xe1\x3c\xb1\x1c\x99\x46\x04\x52\xc8\x9d\xdf\x94\x1c\xde\xe3\xfd\x03\xfd\xcb\x00\xe3\xa7\x6d\x64\x4c\xc1\x74\xec\x62\xd0\xb1\x8b\x39\x76\x31\xc7\x2e\xe6\xd8\xc5\x8c\x21\x1e\xbb\x98\x63\x17\x33\x82\x78\xec\x62\x8e\x5d\xcc\xb1\x8b\x39\x76\x31\x4f\xd8\xc5\xfc\x2f\x00\x00\xff\xff\x20\x57\x0b\xc7\x39\x3e\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15929, mode: os.FileMode(420), modTime: time.Unix(1521232616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

