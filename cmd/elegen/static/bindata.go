// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1516219636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x5d\x6b\xf3\x36\x14\xbe\xf7\xaf\x38\x0b\x61\xd8\xd0\xb8\x37\x63\x17\x1d\xb9\x28\xa5\x85\xc0\x52\x4a\x0a\xbb\x09\xbd\x50\x9d\x63\x47\x4c\x96\x8c\x24\xb7\x33\xc6\xff\x7d\xc8\x96\x3f\xe4\x7a\xa9\xd3\xb5\x7d\xe1\xcd\x55\x2c\x9d\x2f\x3d\xcf\xd1\x73\x94\x91\xe8\x6f\x92\x20\x94\x25\x84\x8f\xa8\xc3\x1b\xc1\x63\x9a\xe4\x92\x68\x2a\x78\x78\x4f\x52\x84\xaa\xf2\x3c\x9a\x66\x42\x6a\x58\x24\x22\x24\x99\x90\xa8\x45\x48\xc5\x25\x32\x4c\x91\x6b\xc2\x16\x9e\xf7\x42\x24\xf8\x1e\x00\x00\x3d\x20\xd7\x54\x17\xc6\x59\x6d\x49\x06\x6b\x48\x49\xb6\x57\x5a\x52\x9e\x3c\x75\x3e\xe1\xc6\xda\x41\x59\xbb\x99\x5f\x59\xae\x40\x12\x9e\x60\x53\xcc\x63\x86\x11\x8d\x69\x54\x17\xa3\x4c\x21\xbd\x21\xd0\x18\xd4\x51\xe4\xec\xb0\xc3\x84\x2a\x8d\xd2\xb1\x86\x10\x96\xe1\x43\xfe\xcc\x68\xb4\x15\x07\x74\x7d\x57\xb0\xec\x4b\x84\xab\x35\x84\xc6\x86\x85\xb7\xfd\xe2\x6a\xe0\xb0\x28\x4b\x6b\xb0\x43\xa5\xcd\x76\x55\x2d\xae\x4c\x0d\xc3\x30\x55\xd5\x1e\xe8\xc2\x49\x85\xfc\x30\xce\x3e\x58\xaa\x3c\x07\xb3\x88\x68\x4c\x84\xa4\x3f\x21\x70\x22\x97\x11\x7e\x09\x78\x84\x51\xa2\xbe\x10\xb1\xd5\x37\x42\x56\x96\xb6\xaa\x25\xbd\x80\x65\x7d\xb2\x81\xd3\x75\x73\x52\x70\x31\x6e\xed\x3e\x0f\xd8\x49\xac\x03\xcf\xbb\xbc\x84\xba\x90\xbf\x50\x2a\x73\x70\x89\x3a\x97\x5c\x81\x3e\x22\x44\xb9\x94\xc8\x35\xbc\xd8\x3d\x11\xd7\xcb\x69\x5d\xb8\x17\xe7\x3c\x72\x7c\xfd\x00\x62\x26\x88\xfe\xfd\x37\x28\x6d\x9c\x4e\x84\xae\x1f\x36\x1b\x1e\x8b\xb0\x4d\x53\x55\x86\x6a\x5d\x64\x36\xdc\x96\x70\x92\xa0\x04\xa5\x65\x1e\xe9\xb2\xf2\xea\xf0\x7e\xec\xec\x06\xd0\x9e\xfc\x4e\x8a\xd4\x80\xe1\x73\x83\x48\xd3\x1c\x01\x4c\x76\x47\x7d\x54\x5b\xcd\x58\xc7\xf6\xc6\xfd\xc9\x9b\x93\xed\xa6\xb9\xc6\x85\x6f\xef\x73\x71\x7e\x56\x47\x09\xf6\x6d\x9c\x79\xe9\xeb\x36\xf1\x9b\xa6\x98\x9d\xb8\xbf\x45\xfb\xfa\xef\xcc\x54\xbc\xf0\x09\xef\xcf\xe7\xd3\x89\x4c\x41\x9b\x8a\xc6\x40\x61\x0d\x71\xf8\x86\x1a\xc2\x8b\xe0\x0f\xf8\x85\x86\x1b\x75\x9b\x66\xba\xf0\x83\xc1\x5d\x6d\xa1\x71\x14\x73\x2a\x54\x87\xfb\xd9\xe1\xec\x9a\x1b\xce\xe2\xc8\x8b\xe0\x1d\x2c\x62\x4a\x9e\x19\xfa\x2d\x77\x93\x10\x8c\xd7\x1a\x9f\x16\x19\xf5\x4a\x75\x74\xec\xd8\xb7\xd5\x76\x6a\x70\x42\xa3\x3e\xac\x4f\x11\x51\xcd\xdc\x7f\x23\x48\xbd\x68\x5c\x8d\x41\xbb\xc7\xd7\xff\x70\xf1\x03\x6f\x42\x36\x46\x9f\x07\x8c\x49\xce\xf4\x9b\xb0\x9c\x32\xcb\xc6\x1c\xa0\x0d\x37\x8f\x75\xc3\x39\xbd\x77\x1a\xe1\x11\xc3\x96\xb2\x11\xe1\x4d\x37\x07\xf3\xf8\x56\x1f\x21\x5c\x7d\x1a\xe3\x5c\xe8\x96\x88\x8d\xda\x09\xa1\x7f\x4c\x47\xfc\x3a\xe5\xf0\xc0\x72\x49\x18\x54\xd5\x9f\x54\x19\x81\x7e\xbf\x33\xbe\xa4\x51\xd4\x59\x9d\xa2\x4e\xb6\x8a\x3a\xbb\x57\x76\xc8\x1a\xe2\x8e\x34\x53\xfe\x30\xab\xb3\xd3\x30\x24\xc7\x7a\x2c\xa7\x6c\x4c\x2e\xf3\xd2\x4e\xed\x04\x5c\x3b\x29\xcd\x24\x34\x23\xda\x6e\x0e\xa7\x73\x6d\x36\xa8\x60\x3b\x70\x6b\xa7\x73\xf3\xe5\x14\x3a\x34\xeb\xe7\x74\x9b\xbd\xf2\xea\x7c\xd7\x8c\x59\x60\x28\xaa\x2e\x2b\x61\x0c\xf0\x1f\xaa\x34\xe5\x49\xdb\xe5\x14\x95\x4d\xe6\xf8\xf8\x01\xec\xa7\x5f\x6b\x43\x40\xa6\x4c\xbe\xff\x3d\x77\xf2\x72\x9c\xf7\x78\xad\x2c\x7a\xf5\xdc\xbd\x13\xb2\x3b\xf7\x10\x42\x43\x9e\x1d\xcd\x10\x0b\x59\x7f\x27\xf4\x05\xfb\x97\x42\x87\xe8\x38\xce\x69\x79\xda\x3f\x35\xb7\xe1\x3d\x3d\x9a\x01\xeb\xf7\x0a\x4e\x5b\x78\xf9\x7f\x1f\xcb\x27\xd9\x9a\x23\x52\xee\xdb\xc1\x48\x53\xe5\xfd\x1b\x00\x00\xff\xff\xb6\x1f\x7f\xe7\x51\x0f\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3921, mode: os.FileMode(420), modTime: time.Unix(1529682126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\x1b\x37\x12\x7f\xd7\x5f\xc1\x13\xdc\x56\x3a\xc8\xeb\x3c\xab\xe7\x02\x39\x27\x29\x8c\x8b\x5b\x23\x0e\xd2\x87\x20\x68\xe8\xdd\x91\xcc\x66\x45\x6e\x49\xae\x63\x9f\xb0\xff\xfb\x81\x9f\x4b\xee\x87\x44\xa5\x76\xe1\x03\xec\x87\xd6\x1e\x92\x3f\xce\xfc\x66\x76\x38\xfc\x48\x85\xf3\x2f\x78\x0d\x68\xbb\x45\xd9\x15\xc8\xec\x8c\xd1\x15\x59\xd7\x1c\x4b\xc2\x68\xf6\x0b\xde\x00\x6a\x9a\xc9\x84\x6c\x2a\xc6\x25\x9a\x4d\x10\x42\x68\xba\xda\xc8\xa9\xf9\x4d\xdc\xd3\x7c\x3a\x31\xbf\xaf\x59\x86\x2b\xc6\x41\xb2\x8c\xb0\x13\x28\x61\x03\x54\xe2\xd2\xf4\xdc\x6e\x11\xc7\x74\x0d\x28\xbb\xaa\x20\xcf\xde\xdf\x57\x70\xc9\xd9\x2d\x29\x80\x0b\x74\xdc\x34\x06\x42\x69\x81\x9a\xc6\x0f\x01\x5a\xe8\xc6\x21\x88\x0f\xb8\x24\x85\x56\xf3\x00\xa0\xf9\x64\xb2\xdd\x1e\x23\xb2\x42\x94\x49\x0b\x74\xc1\x0a\x28\xb3\x57\x20\x71\x7e\x03\x85\x32\xf7\xe4\xc4\xf0\xd1\xb6\xbe\xa6\x92\xc8\x7b\x4b\xc7\x39\x2d\xe0\x0e\x04\x2a\x89\x90\x02\xc9\x1b\x40\x58\x4a\x4e\xae\x6b\x09\x28\x67\x9b\x8a\xd5\xb4\x40\xc4\x74\xca\x26\xb7\x98\x27\xa1\x9d\xa2\x8f\x9f\x3e\x7e\x12\x92\x13\xba\x46\x5b\xab\xf8\xb1\x35\xf9\x88\x2c\xd0\x91\xc7\x5e\x9e\x46\x70\x0e\xc1\x1a\x1f\x8c\xf2\x23\x6c\x93\xc3\x37\xf0\x9e\xa9\xa6\x99\x2e\xb4\xa4\x59\x78\x04\x68\x47\x59\xfe\x9a\x66\xd2\x4c\x82\xa6\xc9\x76\x8b\x8e\x4a\x2c\x41\xc8\x0f\xc0\x05\x61\xb4\x55\xec\xad\x16\xbf\x74\xb4\x08\xd7\xc1\x0e\x0b\x8c\x02\x5a\x6f\xd4\xb8\xeb\x9a\x94\xc5\x6b\x5a\x6f\x84\x81\xe8\x42\x7b\xb7\xe8\x11\x3a\x80\x50\xd3\x20\x0e\x15\x07\x01\xd4\x3a\xa2\x62\x42\x90\xeb\x12\xd0\x2d\x2e\x6b\x10\x68\xc5\x78\xe0\x9c\xa9\x1f\xee\x35\xb3\x4e\x98\x66\x13\xa9\x10\x7b\xf8\x86\xaf\xc9\x24\x67\x54\xb8\xf8\x0f\x08\xa6\x78\x03\x0b\x74\xa4\x67\x53\x56\x98\xc1\x1f\xcc\xe4\x96\x3e\xab\x36\x35\x33\x75\x35\x36\x43\x55\x07\xf3\x5b\xd3\x64\x8e\x74\x3f\xa4\xa7\xd5\xa9\x31\xc5\x8d\x98\x76\xdc\x34\x9f\xb4\xbf\x3f\x44\xbc\x17\xa0\xff\xec\xaa\xee\xe5\x6c\xa5\xff\x66\xd7\x7f\x40\x2e\x13\x22\xde\x8d\x3b\x45\x3e\x4b\x64\x5e\x68\x62\x53\x75\x5d\xb6\x11\x1a\x40\xbd\x03\x21\x55\xab\x0f\xda\x33\x2c\x61\xcd\xf8\xfd\x72\xa8\x2b\xab\x79\xee\x9d\x6c\xfa\x5f\x72\x72\x8b\xa5\x42\xef\x74\xb7\x0d\x4d\xb3\xd0\x81\x7e\x08\x83\xdb\xed\x50\x8f\x73\xf1\x8e\x31\xb9\x8f\xe1\xcb\xb2\xe6\xb8\x44\x4d\xf3\x96\x08\x19\x72\x8c\x75\x86\x51\xec\xee\x1f\xeb\xc3\x37\x65\x8e\x8f\x9f\xfe\x39\xda\x53\x19\x7c\x72\x82\x02\x9f\xcb\x9a\x53\xe3\x70\x32\xe8\x70\x81\x08\xd5\x7f\x2a\x6d\xb3\xc9\xaa\xa6\x39\x9a\xb1\x44\x5d\xe6\x7e\xa6\xd9\x7c\x38\x1a\xb4\xcf\x8c\x16\xe3\x98\x6d\x50\x4d\x8c\xfe\x67\xac\x6a\x75\xc7\xa8\x62\x84\x4a\xe0\x48\x32\x84\x51\xae\xda\x94\xc2\x69\x2a\x1e\x6e\x92\x9a\x7c\xc0\x9c\x15\xc1\xd7\x25\x08\x67\x93\x56\x63\x79\x8a\x70\x55\x01\x2d\x66\x69\xe0\xdb\x66\x81\x58\x96\x65\xf3\x90\x96\xef\x15\x94\x35\xfc\xa5\x46\xb3\xa0\x22\x72\x93\x64\x66\xb1\x42\x14\xbe\x9a\xd9\xad\x1f\x1f\x8b\x07\xa3\xcb\xcc\xcd\x9f\x65\xd9\x30\x25\x7b\xa9\x62\xb5\xfc\x8b\x4c\xa9\x85\xe0\xf7\x85\xa2\x42\x01\x99\xec\xed\xf4\x6a\x57\x43\x35\x8f\x9f\x86\xd5\x52\x0f\xc8\x66\xbb\xbe\x96\xb9\xc1\x6f\xa2\x38\x65\xb5\xb4\xee\xd0\xdf\x5b\xce\xe8\x2d\x70\x19\x7a\x43\x47\x22\x1d\xb3\xfb\xdb\xe8\x56\xff\x1d\x0f\x3b\xad\x49\xcc\xe7\x8e\x9e\xdb\x26\xa4\x8d\x48\xd8\x04\xbc\xed\x64\x4c\xf5\xdd\xcd\xc9\x2b\x58\xe1\xba\x94\xbf\xf2\x02\x78\x94\x5f\x0a\xd3\x80\x98\x6a\x51\x65\xd0\x8a\x40\x59\x08\x17\xa6\x39\xa3\x12\xe8\x37\x10\x13\x4e\x38\x9b\xa3\xa0\xca\x0a\x15\xec\x17\x47\x9d\x8a\xf3\x57\xab\x56\x5b\xd6\x74\x8b\x14\x57\x7f\xfa\x75\x2b\x5e\x79\xe2\x55\xda\x50\x64\x28\x71\x00\x21\x1b\xb7\x56\xf6\x57\xad\xb7\xd8\xb3\x39\x22\x54\x0e\x25\x54\x90\xd9\xcb\xcb\xf3\x73\xba\x62\x59\x50\x6d\x99\x4a\xcd\xea\x1a\x96\x7d\x7b\xaa\x85\x6e\x95\xb0\x51\x5d\x94\x11\xb8\x3b\xcc\xad\xe4\xfb\x97\x2f\x5b\x89\xd5\xb9\xd2\xbf\xe3\x95\xdd\xde\xd8\x6e\x75\xfd\xf7\x9e\xbd\x51\xa1\x84\x8e\x94\xb5\x7a\x6b\x10\x99\xa4\x18\xd1\x73\xba\xa1\x8a\xa9\xcf\x7f\x08\x46\x97\xd3\xe3\x29\xba\xd6\xbf\xfc\xae\x2d\xb1\x5e\x99\x7e\xf6\xa5\xe0\x9e\xd2\x40\x75\x53\xdb\xa4\xec\xa2\x96\x70\xd7\x43\x3d\x0e\x90\x7c\x95\xad\x38\xfe\x05\xbe\xee\xa1\xd9\x2d\x6e\x2a\x9d\x8f\xa7\x28\x85\xa8\x43\x66\x0f\xe0\x6c\xbe\x1b\xa4\x13\x39\xdf\xef\xea\xdb\x7e\x42\x21\xab\xcb\x1d\xe1\xb6\x98\x04\x5f\x48\xb4\xeb\x51\xee\x53\xb9\x47\x30\x1e\x6c\x28\xd0\x6c\x8f\xf7\xe7\xd1\xc7\x68\xfd\x24\x6e\x58\x5d\x16\xbf\x71\x22\xe1\x9c\x12\x49\x70\x49\xfe\x0b\x5c\x45\x85\xde\x71\xa8\xa9\xcc\x27\xdb\x89\xa4\xa3\xec\xb2\xbe\x2e\x49\xae\xac\x41\x1d\xd8\x23\x42\x89\xce\xa6\x5f\x07\x60\x41\x46\xe0\xdd\xb1\x64\x65\x87\x47\xf2\x21\x59\xb4\x21\x4b\x13\xd9\x4f\x38\xa5\xfa\x1f\xac\xf6\xc6\xca\x7b\x97\x7f\x76\x46\xcb\x03\xd5\x75\x28\x2a\xec\xe2\xcd\x67\xba\x61\x2b\xd2\x59\x68\xcc\xc6\x29\xb2\xeb\x07\x81\x6a\x4a\xfe\xac\x5d\x95\xab\xc6\x1c\x68\xab\x1a\x32\x9b\xa3\x78\x71\x31\x3b\x03\x33\x36\xd0\xc6\x05\xa7\x5b\x1c\x33\x3f\x41\xdb\x29\x3b\x33\x75\x03\x14\xee\x3b\xf6\x5e\x2e\x05\x74\x21\xa6\xd3\x7e\x1e\x39\x9c\xb0\x2b\x90\x81\x96\x02\xe4\xe3\x10\x16\x4d\x33\x23\x85\x25\x6d\x9e\xc8\x5a\x1a\x5d\xe8\x14\x91\xe2\x21\x48\x19\x5a\x9d\x6f\x30\x2f\x72\x56\x40\xd1\x5d\xa7\xf5\x2a\x91\x4c\xc4\x37\x2f\xce\x87\x5b\x31\x5a\x76\xb9\x5d\xe6\x48\xf9\x95\x64\x8b\x36\xe6\x69\xd7\x59\x07\x32\x16\x86\xa0\x6b\x15\x39\x27\x95\x6c\x8f\xa3\x5e\xb1\x3c\x2e\x60\x59\x5e\xeb\x4c\xa7\xfb\xa8\xe2\xb9\xfd\x5e\x52\x23\xe2\x15\xcb\x07\x92\x88\x56\x17\xfe\x1c\xd5\x67\xfa\x91\xb2\x82\xe5\x9f\xa6\xdd\xb4\xa0\xc5\x57\xe6\x14\x2b\x4a\x1f\x71\xb7\xcf\x8a\x2f\x91\xff\x1b\xe7\x5f\x24\xc9\xbf\x88\x1d\x86\x0f\xd4\x2b\xc3\x85\x62\x02\xc9\xa9\xe9\x42\xeb\xdf\xa3\xc5\xea\xbe\xda\xc8\xec\xaa\xe2\x84\xca\xd5\x6c\xfa\xaf\xef\xc4\xf2\x3b\xf1\xd3\x54\x6d\xfe\xda\x25\x48\x07\x48\x2b\x32\x99\x7a\xde\x3f\xcf\x4c\x2b\x2c\x7d\x74\x98\x7a\xe2\x67\xa0\xc0\xb1\x84\x9f\x41\x4a\xe0\x28\xeb\x95\x0b\x27\x27\xe8\x67\x90\xca\xc4\x5e\x8a\x0a\xa3\x67\xb0\x83\xcd\x2a\x1c\x72\x20\xb7\xdd\x0c\x7b\xb4\x83\xb3\x91\x19\x67\xf3\x78\x1e\x77\xa4\x18\x53\x6a\x12\x6c\x6f\xfd\xe9\xec\x09\xfa\x14\x5c\xed\xa0\xe0\x6a\x84\x02\xbf\xc8\xac\xc9\x2d\xd0\x07\x66\x61\x64\xd2\x59\x90\x34\x06\xf9\xf0\x2b\xd1\x30\x13\xe8\x14\x05\x08\x9d\x2f\x20\xdc\x29\xd9\x5b\x0a\xbd\x82\x92\x02\x8c\xa1\x79\xcd\x39\x50\x89\x08\x5d\x31\xbe\x31\xc9\x42\x48\xc6\xa1\x50\xab\x80\x39\xa5\x31\xdb\x9d\x9a\x43\xfa\x52\x62\xa7\x52\x05\x17\xe7\x8c\x3b\x0b\xf4\x1f\x22\xde\xef\xbf\xd6\xb2\xad\x4b\x01\x7f\xd6\x84\x43\xf1\x7a\x57\xc7\xa1\x2b\x98\x9d\x5f\x48\xbb\x8c\xeb\x04\xf0\x9e\x63\x2a\x88\xb2\x3a\x6a\xcb\x5e\xdf\x55\x4c\x40\xbb\x0d\xb3\xe2\x77\x56\xa7\xb8\xb7\x4a\x80\xda\x41\x53\x93\x08\xa6\xae\x59\xb5\x71\x1e\xab\xee\xf8\x70\x50\x36\x89\xc4\xeb\xc5\x88\x7f\xe7\x3f\x6a\xbc\x7f\x9c\x22\x4a\xca\xe0\xb8\xa3\x43\x95\x3f\xf9\x88\xe5\x0b\x35\xd8\x9d\x81\xc4\x8b\xd1\xa0\x31\x92\x6c\xe0\x20\x53\xde\x93\x0d\x3c\x45\x43\xe0\x4e\x02\xa7\xb8\x3c\xc8\x98\xd7\x76\xd0\x53\x34\x88\x50\x09\x6b\xe0\x07\xd9\x73\x4e\xe5\x53\x34\x65\x55\x32\x2c\x0f\x32\xe4\x8d\x1a\xf1\x44\x4c\xd9\x65\x19\x87\xd5\x80\x5d\xc3\x8a\x66\x6d\x96\x1c\x51\x19\x3a\xaa\xc2\x01\x6c\x33\x8e\x66\x91\x5e\x6f\x89\x90\xd3\x79\x47\x78\x81\xab\xe9\xdc\x29\x6c\x4f\x58\x45\x7d\x1d\x1c\xb0\x0e\xaf\x39\xad\x8e\xad\x95\xa2\xbe\xde\x6f\x52\x92\x59\xad\x69\x3b\x0c\xcc\x5e\x96\x25\xfb\x0a\xc5\xd9\x0d\x23\x79\x7b\xc5\xb9\x2b\x9a\x4c\xda\x3d\xa7\xfa\x74\xba\x13\x4c\x26\x8b\xcf\x46\x62\x6a\xd1\x6e\x15\xd4\xb8\x3f\x18\xa1\x3d\x05\x3e\x4f\x17\x68\xfa\x59\xa1\x35\x0b\xbd\x24\xbf\xac\x25\x5b\xdb\x6a\xa4\xd8\x11\x99\x7f\xc5\xcd\xad\x12\x98\x27\x71\x70\x89\x55\x59\x44\xd3\xbe\xa5\x85\x2e\xc6\xbb\x73\x7c\x36\xe6\x05\xeb\xe2\x63\x58\xb6\x96\x28\xbb\xc0\x77\x6f\x81\xae\xe5\x0d\x7a\x91\x62\xdb\x05\xbe\x23\x9b\x7a\x63\x86\xa4\x5a\xa8\xa4\xed\x3c\x4a\xb2\xc2\xa5\x80\x47\x33\x89\xd0\x83\x4c\x22\xf4\x1b\x4d\xf2\xf3\x3c\xbe\x49\xf8\x4e\x3f\x33\x40\x2f\xb2\x17\x63\x45\x52\x7a\xca\xb7\x4e\x3c\x20\xe3\x7b\x1f\x7e\xb0\x8f\x10\x1e\xce\x5e\xbb\x3b\x4d\x55\x3a\x79\xbd\x5d\xa8\xea\x7a\xd6\x51\x7b\xfe\xd0\x7e\xda\x17\x88\x0f\xe9\x35\x13\xa7\x87\x7b\xcd\x69\xf1\x08\x5e\x4b\xd4\xf9\x5b\x9c\xd6\x6a\xfd\x37\x39\xcd\xdf\x3d\x64\x03\x6f\xab\xc8\x02\x1d\xe9\x4b\xd1\xc1\x97\x68\x3d\x26\x14\xdc\xc6\x59\xab\x4d\x0f\xae\x1b\x5a\xfb\x8d\x30\xb5\xbc\x4a\xb6\xf3\x78\xa4\x9e\x4a\x60\x21\x32\xf8\xd6\x9b\xaa\x35\xeb\x3c\x44\x6b\x89\x08\x1f\x3f\x9d\xd5\x42\xb2\x8d\xbb\xf7\x6e\x11\xb2\x3e\x43\x33\x7d\x65\x12\xe0\x5c\xe0\xaa\x22\x74\x9d\xd9\xff\xa3\x69\xfb\xac\xb0\xab\xcc\xdc\x93\xcb\x1e\x98\x2e\xb2\x42\x25\xd0\x4e\xcd\x3a\x47\x3f\xa1\x17\x1e\xdb\x1e\x9b\xc4\x5d\x2c\x64\x88\x01\x03\x63\xfd\x68\xe8\x8d\x72\x67\x78\xa4\x4c\xbf\xcb\x51\x2d\x64\x45\x72\x4d\xcc\x1b\xc6\xfd\x26\x3d\x3a\x6b\xf2\xd2\xa8\xbb\x3f\xb2\x34\x47\x31\xed\xcb\x39\xfd\x12\xed\x0b\xdc\xbb\xc3\x88\x7d\xe7\x75\x63\x3a\xcc\x34\x90\x3b\xec\x6f\xb3\xc3\x88\x3a\x5b\x4f\xde\xed\x02\xb1\x2f\x36\x4a\x46\x27\x6e\xcf\x23\x2e\x70\xf5\x51\x4d\xf5\xe9\x47\x35\xac\xc7\xf4\x6d\x48\xf2\xc9\x09\xfa\x0d\x50\xce\xea\xb2\xd0\xdc\xae\x08\x2d\x10\x91\x0b\x24\x18\x2a\x41\xfe\x20\x50\x7e\x03\xf9\x17\xc4\xec\x2b\x27\xf6\x15\x38\xca\xb1\x00\xfb\xc6\xb3\x40\xa2\x82\x1c\x6d\x70\xd5\x3b\xbc\x1f\xd1\xf3\xad\x82\x38\xc3\x02\x06\x14\x76\xcf\x78\x06\x09\x11\x91\x0f\x57\x75\x59\x06\x3e\x12\x71\xcf\x0d\xae\x12\xbd\x35\x32\xd7\x6c\xae\x30\x3e\x1a\x67\x7d\x4a\xf5\x55\x82\xf9\x91\xd5\x93\xfd\x2f\x0a\xa2\xfe\xbd\xe7\x05\xb8\xd2\x8f\x0b\x3c\x0d\x2a\x84\x77\xa1\xed\x7f\x9f\x18\xcf\x77\x7a\x08\x0b\xdb\x6e\xd6\x3c\xe8\xa0\x2c\xb8\x9e\xf6\x23\x94\x0a\x9d\xe3\xd4\xe8\x95\x73\x77\xa9\x98\x2e\xf7\x7e\x56\xe1\xc5\xcb\xf1\xe8\x7e\x46\xfd\x84\xf2\x65\x7f\x5b\xa2\x76\x25\x11\x56\xe7\x42\x3a\xde\xab\x2d\x47\xf6\x90\xc7\x4d\x73\xd0\x3e\xaf\x2d\x36\xfc\xb0\xc6\xaf\x5a\x8b\xbe\x6d\x9d\x0d\x61\xab\x5d\xd8\xb0\x1c\xdc\x3c\xee\xb4\xce\x4d\x30\x78\x4b\xab\x7e\xa2\x86\xe5\x88\xbb\xd2\xa6\xe0\xa0\x3d\xf7\x2b\x2d\xef\xa3\x19\x02\xb9\xb1\xa0\xd3\x33\x09\x3d\xba\x18\x0c\xda\x43\xb9\x41\xef\xf4\x3c\x04\xdd\x95\x6e\x5d\x74\x2d\xd7\xe8\xfa\xfd\x44\xd4\x3b\x7a\x40\x91\xa5\x4f\x58\x71\xc8\xbb\xde\x6e\xa5\xce\x94\xa0\x57\x22\x6e\x74\xfd\xd7\x02\x7b\xf1\x72\xe0\x1a\xad\x73\x77\x96\x34\x53\x70\x26\xee\x9a\xac\xc8\xe8\xde\xb6\x27\xc1\xbd\x21\xa5\x04\x8e\xaf\xcb\x88\xff\x56\x6a\x40\xa3\x5e\x69\xb8\x8c\x03\x59\xd3\xff\x40\x14\x93\xad\xd4\xe2\x86\xbd\x92\x70\xed\x3d\x5a\xd0\x62\x24\x06\xcf\xb7\x26\x61\x05\x8f\x07\x82\xd6\x56\x6a\x30\xa3\x5e\x49\xb8\xe1\xe1\x85\x6f\xf4\xc2\x65\xff\x80\x23\x11\xb4\xf7\x99\x38\xd9\xb2\xb7\xdf\x4e\x42\x0c\x0e\x24\x5a\x48\x27\x5c\xf6\x0f\x2d\x12\x41\xfb\x6a\x5a\xd9\xb2\xb7\xc1\x4c\x41\xec\x66\xce\x20\x61\x1e\x94\x27\x75\x62\xea\x06\xba\x17\x1a\xdd\xc2\x3e\x49\xa0\x97\x9c\x6c\x30\xbf\xef\x84\x79\x2b\x35\xb0\x51\xaf\x24\xdc\x77\x80\x8b\x6e\x42\x77\xb2\xa5\x3d\xec\xf3\x3d\x12\x11\xe3\x4b\x33\x83\x68\x64\xcb\xee\xf1\x61\x12\xe2\x55\xef\x53\xbc\x0a\x3e\xc5\xab\x83\x3e\xc5\x2b\x73\xc3\x19\x62\x69\x89\xc5\x72\xad\x69\x58\xf5\xb5\xbd\xa8\x6d\xc1\x8c\xc8\xfd\x2b\x10\xdf\x21\x2d\x72\x7a\xd7\x93\xea\xc7\x0b\x8d\x8a\x61\x9f\x34\xd0\x8e\x8a\x81\x7e\x7b\x95\x1b\xfb\xa7\x58\x9d\x57\xa2\x87\x6f\x33\xfe\x86\x02\x7a\x64\xe2\xa7\x5d\x49\x9b\x7d\x5d\xf6\x5c\x46\x3f\x97\xd1\xcf\x65\xf4\x73\x19\xfd\x5c\x46\xa3\xe7\x32\xfa\xb9\x8c\x7e\x2e\xa3\x1d\xe2\x73\x19\x9d\x00\xf8\xff\x58\x46\x07\x7f\xfc\x2f\x00\x00\xff\xff\xc1\x82\xb1\x78\x0e\x43\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 17166, mode: os.FileMode(420), modTime: time.Unix(1533583189, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdf\x6b\xe3\x38\x10\xc7\xdf\xfd\x57\x0c\x21\x1c\xed\x91\x73\xaf\xdd\xb7\x40\x1f\x8e\xf6\x58\xfa\xd0\xa5\x74\xef\xee\x25\xe4\x41\x67\x4f\x12\xdd\x2a\x92\x57\x91\xb3\x14\xe3\xff\xfd\x90\x1d\x3b\xb6\x23\xd9\x6e\xd8\xc0\x2e\xcc\x14\x0a\xb6\x66\xe6\x3b\x1a\xfd\xc8\x07\x27\x2c\xfa\xc2\xd6\x08\x59\x06\xe1\x67\x34\xe1\x83\x92\x2b\xbe\x4e\x35\x33\x5c\xc9\xf0\x13\xdb\x22\xe4\x79\x10\xf0\x6d\xa2\xb4\x81\xc9\x5a\x85\x2c\x51\x1a\x8d\x0a\xb9\xba\x41\x81\x5b\x94\x86\x89\x49\x10\x44\x4a\xee\x0c\x48\x15\xab\xe8\xb3\xd1\x5c\xae\xe1\x1e\x26\x8b\xe2\x79\x39\x81\x9b\x1b\x90\x4a\x70\x69\xe6\xb0\x67\x3a\xda\x60\xf4\x65\x16\x23\x8b\x23\x15\x63\x10\xec\x99\x06\x8d\xa2\xd0\xdc\x6d\x78\xb2\x7b\xc5\x35\xdf\x19\xfd\x06\xb5\x42\xf8\xea\x1a\x0f\x82\x55\x2a\x23\xe0\x92\x9b\xab\x6b\xc8\x82\x00\x00\x3c\x99\xee\x87\x72\x65\x79\x19\x9e\x65\xa0\x99\x5c\x23\x4c\x51\x1a\x6e\xde\x6c\x0f\x66\x30\xad\xb2\xc2\xfc\xbe\xec\x54\x2b\x89\x6d\x52\x19\xfc\x1b\xf0\x15\xec\x36\x2a\x15\x71\x99\x19\x75\xd3\x13\xa6\x36\xb8\x99\x1b\xa6\xe1\x4b\xfa\xaf\xe0\xd1\xb3\x8a\xf1\x90\xc6\x39\x85\x45\x96\xb5\xe2\xf2\xfc\x29\x2e\x1f\x97\x70\x0f\xbf\xb8\xa7\x97\x15\xf9\x1a\xa5\xad\x0d\x5c\x09\x94\xc7\x09\x85\x0f\x1a\x99\xc1\x6b\xf8\xbd\x9a\x84\xb5\xf2\xe5\x1c\xb6\x2c\x59\xec\x8a\xf5\x5c\xfe\xea\x56\x78\x92\x2b\x05\x47\x99\x4a\xea\xd0\xc3\x84\x69\x94\x66\x06\x53\x16\x55\xdd\xeb\x2a\x37\x65\xbd\x3d\x7c\x92\xd2\xdd\xc8\x52\xa0\xd5\xc4\x6e\xc2\x89\x6d\xdc\xc1\x2f\xcf\x27\x30\xf7\x35\xcb\x4e\xa5\x3d\x93\x46\x3d\x87\x19\x84\x8f\x98\x68\x8c\x98\xc1\xb8\xab\x63\xed\x38\x3a\x07\xa3\x53\x9c\x39\xd3\xa1\x74\x06\x77\x94\x5e\x98\x66\x5b\x34\xa8\x1f\x71\x65\xb7\xb8\xed\x9f\x3f\xaa\x5e\x58\x7f\x74\xf8\x8a\x5f\x53\xae\x31\xee\x2c\x76\x65\xd5\x70\x1d\xba\x9b\x37\x4e\xcd\x27\xfc\x76\x1c\x38\xb8\xda\xa1\xab\x93\x3c\xd6\x16\x4b\xfb\x57\x6e\x9d\xd3\x9e\x36\x6b\x3f\xec\x14\x3e\x83\xa9\xb8\x2d\x36\xc8\x88\x19\xb8\xca\xf7\x35\x44\xdc\x7a\xe6\xdb\xac\x75\xa8\x52\x57\xb5\x77\x45\xb5\xe2\xb6\x2f\xb7\xb3\xa0\xbb\x81\x82\xca\xa2\xc6\x94\xe4\x2a\xeb\x43\x59\xd6\xdd\x90\x02\x54\x67\x43\x7c\xb0\xe7\xe2\x74\xab\xba\x84\x50\xc6\x03\x69\xf3\xfe\x44\xe3\x92\x0c\x7b\xf5\xc8\x0c\x07\xf7\x7b\x38\x52\x5f\x9f\x73\x90\xc7\x1c\xc9\x3f\xa5\xd1\x1c\x77\x9e\x0d\xd1\x3c\x89\x8b\xe5\xf1\x2c\x3a\x32\xb9\x2f\xae\xc6\xbe\x48\x86\xce\xd6\xa1\x14\xef\xb6\x79\xa7\x7c\x65\xf6\xc7\x6a\x7e\xb8\x84\x2b\xa2\xe8\xd9\x6c\x7f\xbd\x25\x47\x77\xfb\xd0\xef\x5e\xdd\x99\x49\xf8\x88\x2b\x96\x0a\xf3\x0f\x13\xe9\xc9\x4f\x40\xd3\x9a\x7e\xb5\x50\x27\x78\x40\x70\x78\x73\xf1\x15\xe0\xd7\x7a\x06\x13\x94\xe9\x76\xd2\x57\xd4\x1f\x42\xa8\x6f\x18\x3f\x6c\x14\x8f\xb0\x58\xec\x77\x5e\x48\xff\xcd\x60\xba\x2f\x56\x38\x09\xdb\xc9\x86\xae\x81\xa2\x03\xfb\xe1\x1b\xa0\x67\xbf\x57\x36\x7c\x26\x47\xdc\xdb\xd3\x24\x7c\x4e\x85\xe1\x89\xe8\x5d\xc6\xca\xc7\xf7\x3b\x3b\x52\xd8\x51\x72\x4f\xc4\xfb\xbc\x3d\x43\x9d\x24\x1e\x2f\xc7\xeb\x46\xa0\x63\xd4\x0b\x78\x7f\x27\xf1\x29\xe0\x95\x2f\x2f\x0c\x78\xa5\x08\x01\x9e\x47\x89\x00\x8f\x00\x8f\x00\xef\x0c\x19\x02\xbc\xba\x8a\xef\x08\x78\xc4\x77\x40\x7c\x47\x7c\x37\xde\xfb\x82\x7c\xf7\xc2\x4c\xb4\x21\x3a\x23\x3a\x23\x3a\xf3\x56\x4b\x74\xe6\x32\xa2\x33\xa2\xb3\x86\x11\x9d\x11\x9d\x11\x9d\xf9\x93\x5c\xfc\xeb\xdb\x23\x0a\x3c\xf9\xfa\x56\xbe\xbc\x30\xdf\x95\x22\xc4\x77\x1e\x25\xe2\x3b\xe2\x3b\xe2\xbb\x33\x64\x88\xef\xea\x2a\x88\xef\xba\x46\x7c\xd7\x36\xe2\xbb\xf1\x11\x3f\x25\xdf\x7d\x44\xd3\xb9\x5d\x5e\xd1\x1e\xf4\xfd\xa5\xf1\xee\x23\x1a\x62\x3b\x8f\x12\xb1\x1d\xb1\x1d\xb1\xdd\x19\x32\xc4\x76\x75\x15\xc4\x76\x5d\x23\xb6\x6b\x1b\xb1\xdd\xf8\x88\x9f\x95\xed\x9e\x99\x7c\xf3\xf0\x9d\x1d\xba\x3c\xe3\x59\x15\xe2\x3c\x8f\x12\x71\x1e\x71\x1e\x71\xde\x19\x32\xc4\x79\x75\x15\xc4\x79\x5d\x23\xce\x6b\x1b\x71\xde\xf8\x88\x1f\x86\xf3\x2c\xa9\x10\x9d\x01\xd1\x19\xd1\x99\xb7\x5a\xa2\x33\x97\x11\x9d\x11\x9d\x35\x8c\xe8\x8c\xe8\x8c\xe8\xcc\x9f\xe4\x7b\x7c\x85\x2b\xff\x77\x5e\x66\x59\xf5\x94\x07\xff\x07\x00\x00\xff\xff\xbd\x9e\xc8\xb9\xa8\x46\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 18088, mode: os.FileMode(420), modTime: time.Unix(1533222572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

