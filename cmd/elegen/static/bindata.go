// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcf\x6b\xe3\x3a\x10\xbe\xfb\xaf\x18\x42\x79\x38\xd0\x38\x97\xc7\x3b\x14\x7a\x28\xe5\x15\x02\xdb\x52\x5a\xd8\x4b\xe9\x41\x75\xc6\xee\xb0\xb2\x14\xa4\x49\xbb\x45\xf8\x7f\x5f\xfc\x43\xb2\x93\x38\x5e\xef\xa6\xbb\x39\xd9\xf2\xcc\x37\x9f\xe6\xfb\x46\xca\x46\xa4\xdf\x44\x8e\xe0\x1c\x24\x8f\xc8\xc9\xb5\x56\x19\xe5\x5b\x23\x98\xb4\x4a\xee\x44\x81\x50\x96\x51\x44\xc5\x46\x1b\x86\x59\x4e\xfc\xba\x7d\x49\x52\x5d\x2c\xc5\x46\x1b\x64\xbd\x20\x95\x2e\x51\x62\x81\x8a\x85\x9c\x45\x51\xb6\x55\x29\x90\x22\x8e\xe7\xe0\x22\x00\xa8\xb0\x8d\x50\x39\x36\x15\x1e\x37\x98\x52\x46\x69\x5d\xc1\x56\xe8\x55\x4c\x40\x48\x1e\x30\x27\xcb\x68\x56\x6b\x54\x4c\xfc\x11\x3b\x97\xfc\x5f\x3f\x55\x6c\xca\xd2\xaf\xcf\x9d\x03\x54\xeb\x0a\xa0\x8c\xa2\xe5\x12\x6e\xf5\x1a\xe5\x57\x34\x96\xb4\x02\x83\xbc\x35\xca\x02\xbf\x22\xa4\x5b\x63\x50\x31\xbc\xb5\xdf\x74\x56\x2f\x17\x55\x7c\xd2\xf0\xed\xe7\xc6\x73\xc8\xa4\x16\xfc\xdf\xbf\xe0\x5a\x9c\xd0\x9e\xab\xfb\xd5\x4a\x65\x3a\xf1\x65\xca\x12\x9a\xe2\x0d\xab\x8c\xc4\x8b\xc4\x1b\x1d\xc8\x07\x1e\x02\x14\xbe\x03\x29\xcb\x42\xa5\xe8\x29\xf4\xb3\x20\xd3\xa6\x5e\xcc\xe9\x0d\x15\x90\x47\x50\xa2\xc0\x96\xe5\x91\x22\x71\x88\xb5\x6c\x48\xe5\xf3\x5e\x37\xfb\x29\x2e\x8a\x00\xec\x3b\x71\xfa\xda\xc1\x4f\x97\x08\x20\x15\xb6\x71\x4a\xa7\x07\x74\x82\xd4\x6e\xb9\x68\x43\xc1\x77\xee\x0e\xdf\x0f\x32\xe2\x79\x5b\x74\xe1\x15\xac\x5e\xd7\x98\x89\xad\x64\x8f\xd0\xe6\x2b\x92\x11\x80\xd7\x78\xaf\x03\xd7\x82\x31\xd7\xe6\x84\x36\xa7\x1e\xe1\x78\x9b\x7d\x91\x38\xc4\x4e\x6f\x73\x48\xf9\xc4\x36\x7b\x3e\x7f\xb8\xd5\xd7\x5a\x31\x2a\xfe\x75\x63\x8b\xa1\xd4\x09\xee\x1e\x2f\x38\x66\xf2\x81\xcc\x93\xbd\xee\x1c\x50\x06\x4a\x33\x24\x2b\xfb\xa0\x35\xc3\xe2\xa4\x39\xf8\x67\x37\xfe\x5e\x6e\x8d\x90\x50\x96\x5f\xc8\xb2\xeb\x8a\xee\xc8\xf4\x69\xaa\x4d\x98\x93\x29\xaa\x0d\x0d\xcb\x78\xc1\xb1\x99\xf9\x89\x6a\xbf\x35\x3a\x27\xa8\x76\x74\xac\xfe\x92\x72\x57\x52\xb6\x5c\x08\x6d\x27\x94\x94\x80\xdf\xc9\x32\xa9\xdc\x1b\x99\xd0\xb6\xcd\xdf\xc9\x89\xe7\xf0\xf4\xbc\x7f\x24\xd5\xae\x8f\x42\xc9\xa1\x00\x17\x18\x4f\x6b\xf0\x70\xff\xce\x0f\xf7\x5d\xef\xec\x4d\x18\x10\x92\x84\x45\x7b\x2b\x36\x70\x09\x85\xd8\x3c\x35\x66\x18\x26\x3b\x91\x4a\x15\x74\x86\x1d\x93\x8b\xcb\x1d\x62\x8b\x10\xd6\x42\x9d\xd1\x39\x9c\xd5\x44\xea\xd0\xab\x86\x92\x47\x9b\x39\xe7\xbf\x96\xe5\xec\xa2\x4a\xeb\x83\x8f\x6e\xb3\xf7\xd2\xbf\xa4\xf8\xe3\xc6\xe8\xa2\xae\xb3\xf3\x6f\x24\x6c\x55\x58\xab\x53\x12\x8c\x6b\x60\xdd\x9b\xb2\x9a\xc6\xce\x55\xd4\x83\x8a\x1b\x92\xc7\x6e\xa0\x3d\xb9\xbb\xc6\x3f\xd5\x8f\xcf\xc1\x6b\xf5\xfa\xe0\x79\x2e\x65\xcd\xa5\x4d\x3d\x72\x6e\x07\xff\xed\xe3\x74\xc7\xf4\x21\xb5\xca\x9f\x0d\x71\x18\x3d\x9e\x27\xa8\x3f\x3e\xcb\x7b\x73\xe6\xab\xba\xa9\x6e\x38\x74\xc4\x79\x58\xdf\x9b\xec\xea\x37\x30\xf2\x65\x4f\x84\x6a\xcc\xcb\xe8\x47\x00\x00\x00\xff\xff\x3a\xcb\x38\xd5\x69\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 2921, mode: os.FileMode(420), modTime: time.Unix(1515695604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\x50\xa4\xd9\x45\x70\xed\xb6\xa8\x7b\xbd\x87\xa2\xd8\x30\xd2\xc8\x61\x23\x91\x2a\x45\xb9\xc9\x19\xfa\xdf\x0f\xfc\x92\x48\x7d\x58\x72\x9a\x6c\xfb\xe0\x97\x20\x1e\x92\xbf\xf9\xe4\x70\x86\x54\x8e\xa3\x5b\xbc\x01\xb4\xdb\xa1\x70\x0d\x22\x3c\x67\x34\x21\x9b\x92\x63\x41\x18\x0d\xff\xc4\x19\xa0\xaa\x9a\xcd\x48\x96\x33\x2e\x50\x90\x64\x22\xa8\x7f\x6c\x88\xb8\x29\xaf\xc3\x88\x65\xa7\x38\x67\x1c\x04\x3b\x21\x34\x3a\x85\x14\x32\xa0\x02\xa7\x41\xb3\xae\xb8\xa7\x51\x30\x9b\xed\x76\x88\x63\xba\x01\x14\xae\x73\x88\xc2\xf7\xf7\x39\xbc\xe5\x6c\x4b\x62\xe0\x05\x3a\xa9\xaa\x7a\xbe\x14\x07\x55\x55\x20\x57\x00\x8d\xd5\x98\xb3\xfc\x19\x59\xa2\x67\x40\xcb\x0c\xad\xce\x50\x78\x41\xcb\xac\x90\x62\x9e\x9e\x4a\x3d\xd4\x80\xc2\x46\x55\x85\x38\xe4\x1c\x0a\xa0\xa2\x40\xe2\x06\x50\xce\x8a\x82\x5c\xa7\x80\xb6\x38\x2d\xa1\x40\x09\xe3\x08\x0b\xc1\xc9\x75\x29\x40\xf1\xd5\xcb\x5f\x58\x9a\x31\x41\x10\xce\x84\x44\xec\xe0\x17\x82\x13\xba\x99\xcd\x22\x46\x0b\x81\xe6\x33\x84\x10\xda\xed\x4e\xac\xa0\x14\x67\xb0\x44\xcf\x14\x37\x29\xac\x5e\xfc\x41\x33\xaf\x2a\x35\xdd\x88\x4d\x35\xa7\xb6\xc4\x7a\xa9\x9c\xa0\xff\xab\xaa\xd0\x30\x69\x96\x74\xa4\x3a\xd3\xaa\xd8\x15\x81\x5d\x21\x6d\x59\x55\xb3\xc5\xac\xf9\xdf\x58\x4d\x7b\xe4\x82\x0a\x22\xee\x8d\xce\x97\x31\xa8\x9f\x6d\x89\x6a\x3a\x4b\xd4\x6f\x76\xfd\x19\x22\x31\xdb\x62\x3e\x06\x74\x86\xea\xe0\x08\x6b\xe2\x4e\x09\x27\xa7\xae\xe4\x3f\xda\xf9\x0a\xe4\x1d\x14\x42\xd2\xab\x2a\x58\xaa\x49\xe7\x58\xc0\x86\xf1\xfb\x95\x3f\x89\x95\x3c\xaa\x1d\xb5\x9c\x99\x50\x21\x09\xa2\x4c\x98\x59\x97\xc5\x3b\xc6\x44\x13\x24\x6d\x29\xdf\xa6\x25\xc7\x29\xaa\xaa\x57\xa4\x10\xae\xc2\x18\xa5\x92\xc2\x92\xbd\xab\xea\xe0\xd8\x8f\xfb\xf1\xd3\x3f\x7b\xe6\x18\x27\x9c\x33\x2a\x80\x0a\xc7\xea\xa2\xe4\x54\x9b\x9c\xf4\x9a\xbc\x40\x84\xaa\x9f\x52\xc4\x70\x96\x94\x34\x42\x73\x36\x2a\xc6\xa2\xcd\x6a\xbe\xe8\xf7\x8b\xb2\xb9\x16\xa3\x0f\xb4\x71\xec\xcc\x6a\x90\x37\x62\x63\x94\x33\x42\x05\x70\x24\x18\xc2\x28\x92\x63\x52\xd6\x31\xe9\x0e\xd3\x23\xf7\x85\xf7\x14\x4b\x08\x96\x3b\xdd\xe8\xa1\x04\x58\x9d\x21\x9c\xe7\x40\xe3\xf9\x18\xf8\xae\x5a\x22\x16\x86\xe1\xc2\x35\xc2\xcf\x12\xc4\x28\xfb\x42\xe1\x18\xb8\xc2\xf3\x8a\x60\xea\x27\x46\x14\xbe\x6a\xbe\xc6\x6d\x8f\xa9\xbb\xe6\x3f\xb7\x3c\xc3\x30\x6c\xfb\x50\xeb\x3f\xd1\x3c\xac\x14\x0f\xb6\x8e\x4c\xa2\x7f\x2d\xa5\xfa\x12\x42\x67\x3e\x2b\x97\xde\xdd\x96\x43\xcd\x80\x95\x42\x2d\x08\xe7\xfd\x3b\x62\xa1\x91\x2b\x2f\x06\x59\x29\x8c\xf1\xd5\x6e\x8a\x18\xdd\x02\x17\xae\xed\x55\xac\xd1\x4e\x34\x6b\x55\x8b\x43\x4d\x2c\xff\xf6\xec\x0d\x07\xad\x65\xbd\x3d\x33\x77\x95\x6b\x2a\x22\x20\x73\x6c\xb5\xd7\x4a\x72\xee\x7e\x6b\xbc\x84\x04\x97\xa9\x78\xc3\x63\xe0\x5e\xda\x88\xf5\x00\x62\x72\x84\xd0\x0d\x4a\x08\xa4\x71\x61\xc3\x31\xd2\xe1\x70\x88\x49\x5c\x56\xf3\x05\xfa\xf8\x49\x9f\x7f\xad\x64\x61\xc9\x8d\x5a\xad\x93\xff\x8d\x11\xa8\x3e\x66\xf5\xf1\x6f\x67\xab\xec\xde\x24\x74\x07\xc4\x1c\x5a\xda\x1a\x5a\xfb\x0f\xc0\x0b\xc2\xa8\xa7\xf8\xd6\xd0\x1e\xae\xa8\x41\x9d\x2f\x10\xa1\xc6\xcd\x6e\x26\x04\x11\xbe\x78\x7b\x79\x49\x13\x16\x5a\xfe\x95\x12\xc8\x39\x58\x87\x4f\xd6\xf6\x89\x9a\xb1\x18\x52\x29\x2c\x46\x9d\xc3\x6f\xdf\xe9\x62\x0a\x90\x32\x92\x12\xee\x76\xbe\x85\xc9\x86\x50\x9c\xae\x19\x17\x10\xb7\xec\xbc\xdb\xa1\x0c\xdf\x82\xa4\xaa\x3a\x6b\x26\x2b\x16\x2b\xb6\xb4\xed\x6b\x29\x90\x55\x4c\x1a\xe0\xea\x73\xc1\xe8\x2a\x38\x09\xd0\xb5\xfa\xe7\x2f\x25\xb2\x31\x73\x70\xa5\x57\xc9\x2a\x2f\x7c\x5d\x0a\xb8\x33\xae\xf9\x13\xbe\x0e\x1a\xc0\x9e\x12\x32\x47\xf6\xe5\x00\x29\x8b\x72\xd7\x20\xc8\x7c\x31\xb4\xb0\x15\x8e\x3f\xf7\xcf\x6a\xa2\xd3\x55\x77\xb5\xc7\xc1\xcb\x6e\x3c\xdb\x0a\x4f\xd5\x7f\xd2\x13\x8c\xab\xa2\x54\xb1\xab\xcd\x7e\x49\x89\x20\x38\x25\xff\xb3\x85\xae\x83\x63\xab\x38\xc5\xd8\xc3\x69\x31\xec\x89\xfd\xde\x62\xa1\xbf\x3e\x6b\x82\x7f\xc0\x68\x0b\xf4\x8d\xf5\x00\xea\x14\x04\x36\x0b\xb6\xd2\x92\x2e\x4b\x3d\xe9\x7e\x29\x50\x49\xc9\x97\xd2\x96\x3a\x72\xcd\x64\x89\xe5\xe4\xf9\x02\xf9\xa9\x48\x57\x80\xa6\xfa\x6b\xe4\xb0\xc6\xb7\x49\x34\xac\xa1\x9b\x49\xf2\x9c\x94\x27\x0b\xc4\x36\x10\x6d\x55\x0f\x69\x01\x6d\x88\x20\x68\x86\xb5\x87\xb4\xf2\x6b\x10\x0e\xdf\x02\xc4\x63\x2b\xef\x31\x98\x5f\xbe\x34\x06\x58\x4c\xb4\xc0\x34\xd5\xd1\x19\xba\x7c\xd9\xaf\x60\x5f\xe2\xbd\xc1\x3c\x8e\x58\x0c\x71\x3b\x05\xab\x7c\x31\xae\x53\x4f\xda\x9d\x98\x78\xf7\x9d\x83\xb6\x84\x1f\x38\x0f\x47\x6c\xad\x04\xfb\xd1\x0e\x3e\xd7\xb9\x2f\xa1\x88\x38\xc9\x85\x31\x86\xb4\x04\x8b\xfc\x42\x80\x45\xa5\xda\xcf\x6a\x8e\x2c\x42\x9c\xc6\x6d\xd4\x29\x2f\x59\xe4\x6e\x2f\x1b\x0c\x24\x41\xf0\xa5\x47\x84\xe0\x23\x65\x31\x8b\x3e\x05\xed\x9d\xa2\xc8\x6b\xdd\x30\x7b\x3b\xca\x9f\x76\x55\xcb\xe1\x2b\x76\xd5\x0d\x43\xe7\xb4\x55\x5a\xec\xdf\x2f\x8a\x73\x27\x51\x18\xae\x49\x26\xc2\x75\xce\x09\x15\xc9\x3c\xf8\xd7\x4f\xc5\xea\xa7\xe2\xb7\x40\x56\xb9\x4d\x56\x54\x9e\x69\x48\x3a\xed\x2c\x8c\x37\x26\x1d\xbe\xfa\xec\x95\x8e\xfb\x03\x84\xec\x8d\xb4\xbb\xfe\x00\x21\x85\xee\xec\x3d\xd7\x85\x4e\x64\xd8\x3d\xc5\x21\x02\xb2\x05\xee\x79\xf0\x59\xaf\xee\x03\x1c\xe6\x0b\xe4\x91\xed\xfd\xc1\xae\x9b\x23\x3b\x39\xd1\x2b\x76\x6c\x38\xba\x5a\xad\x07\xb4\x2a\x40\x28\xf1\x37\x64\x0b\xf4\x1b\xf5\x1a\xe0\x31\x77\x51\xfb\x34\x5c\x18\x15\xfb\x75\x43\x67\xae\x58\x5e\x9c\xf9\x17\x27\x1f\x70\x4a\x62\x2c\x54\x56\x27\x31\x68\x4f\x45\x25\xe7\x40\x05\x22\x34\x61\x3c\xd3\x5b\xae\x10\x8c\x43\x2c\x93\x9a\xee\x0d\xf5\x19\x5f\x72\x98\x90\xe7\x2d\x13\x79\x2c\x73\xce\xb8\x0d\x5c\xf5\xa3\xf0\xfb\x8e\x0b\x45\xdb\xd9\xfd\xf4\xa5\x24\x1c\xe2\x8b\x7d\x13\x67\xbd\x59\x6a\x38\x7e\x9b\x93\x45\xdd\xae\xbc\xe7\x98\x16\x44\xaa\xeb\x8d\x85\x17\x77\x39\x2b\xa0\xa9\x28\x0d\xf9\x9d\x11\xc9\x9f\x2d\xd3\x88\x72\x4c\xa0\xb7\x66\x60\x87\xe5\x18\xe7\xbe\xe4\xd6\x1c\x16\xca\x6c\x6b\x3f\x75\x0e\x38\x76\xf1\xab\xc2\xfb\xc7\x19\xa2\x24\x75\xba\xae\x96\xa5\xea\x06\xcc\xa7\x2f\xe5\x62\xdb\x8a\xf9\x79\xb9\x57\x19\x41\x32\x38\x48\x95\xf7\x24\x83\x1f\x51\x11\xb8\x13\xc0\x29\x4e\x0f\x52\xe6\xc2\x2c\xfa\xce\x0a\x0d\xaa\x17\xbe\x48\x53\xf6\x15\xe2\xf3\x1b\x46\xa2\x26\xb6\xf7\xa9\xa6\x43\xed\x92\xaa\x8b\x81\x96\x5a\x3a\x72\xe7\x03\xda\x2d\x9b\xd2\x40\xae\xfb\xcc\x08\xed\x08\x70\x15\x2c\x51\x70\x25\xd1\xaa\xa5\xca\x3f\x2f\x4a\xc1\x36\x40\x81\x63\xa1\x76\xcc\x90\x8d\xa0\x65\x1b\x38\xc0\xc9\x8d\x10\x98\x4f\xb2\xc1\x5b\x2c\x53\x3c\x9d\xe6\xd5\xa5\x3e\xcc\x5b\x3c\xae\xb4\x7a\x4e\x2e\x78\x0a\xcd\x36\x02\x85\xaf\xf1\xdd\x2b\xa0\x1b\x71\x83\x9e\x4f\xd1\xed\x35\xbe\x23\x59\x99\xe9\x25\x53\x35\x94\xd4\x86\x8f\xa4\x24\x38\x2d\xe0\xc9\x54\x22\xf4\x20\x95\x08\x7d\xa0\x4a\x35\x9f\xa7\x57\x09\xdf\xa9\x17\x11\xf4\x3c\x7c\x3e\x74\x30\x24\x29\xc3\x62\x52\xfe\x31\x4e\xfc\x5d\x2e\x38\xd0\x87\x1f\xcc\x7b\xc9\xe3\xe9\x6b\xaa\xdb\xa9\x42\x5f\xd2\xc9\x22\x13\x2a\xe6\x2d\xb1\x17\x8f\xed\xa7\xb1\x40\x7c\x4c\xaf\xe9\x38\x3d\xdc\x6b\x56\x8a\x27\xf0\xda\x44\x99\x1f\xe2\xb4\x46\xea\xbf\xcf\x69\x3f\x6a\xf1\xf5\x2d\xe9\xe3\xbb\x16\x5b\x8f\x23\xf8\x77\x2c\xae\x1e\x29\xb6\x7a\x07\x7b\xa6\x92\x04\xa5\x40\x5b\xa5\xdb\x02\xfd\x86\x9e\xd7\x32\x99\x96\xd3\x9f\xe2\x3e\x7e\x18\x0c\xe8\x59\x5b\xaf\x86\xce\x2a\x7b\x01\x41\x52\x7b\x39\x97\x43\x44\x12\x12\xa9\xee\xec\x77\xc6\xeb\x1e\xc7\xeb\xb9\x6b\xaa\x37\xbd\xbe\x3f\xd1\x0d\x6c\xf3\xf9\x80\xba\xc8\xbd\x85\x7b\xdb\xd3\x0d\xdf\x44\x0c\x71\x9f\x2b\x08\x7b\x8f\xd7\xb8\x7f\x40\x10\xd5\x08\x92\x04\x6d\x97\x88\xdd\xca\x80\xe9\x67\xd8\x34\x70\xaf\x71\xfe\x51\xb2\xf8\xf4\xab\x5c\xe0\x75\xf9\xdb\x99\xb1\xd6\xe9\x29\xfa\x2f\xa0\x88\x95\x69\xac\x5a\xbc\x84\xd0\x18\x11\xb1\x44\x05\x43\x29\x88\x5f\x0a\x14\xdd\x40\x74\x8b\x98\x79\x7b\x66\x5f\x81\xa3\x08\x17\x80\x08\x8d\xe1\x0e\x62\x54\xe4\x10\xa1\x0c\xe7\xb3\x91\xdb\xe2\x57\x72\xe9\x39\x2e\xa0\x47\x40\xfb\xca\xda\xab\x78\xe1\x79\x29\x29\xd3\xd4\xf1\x42\xe1\xcf\xcc\x70\x3e\xea\x8f\x01\x2e\xf3\x85\x5c\xfd\x51\xbb\xe3\xd3\x34\x6f\xec\x55\xd8\xd3\x73\xb6\xef\xdb\x0b\x6f\x66\xe7\xb9\x08\xe7\xea\xb1\xa8\x56\x59\x06\x64\x3f\x4e\xb8\xe7\xb3\x0c\x9f\xc7\xd9\x21\xba\x2a\x55\x9b\xcf\x5c\xa6\xdd\x1a\x04\x7d\xa9\x29\x58\x8d\x86\xb9\xdd\xdf\xe6\xce\xb1\xb7\x63\x41\xc8\xa5\xae\xba\x6d\x87\xec\x3a\x1c\x1c\x27\x49\x39\x4b\x55\x1f\xb6\x1a\xe8\x0f\x4f\xaa\xea\xa0\x1e\xae\x29\x24\xea\x65\x55\x9d\x10\x97\x6d\x9d\x5a\xad\x9e\x95\xcc\x25\xaf\x7a\x9b\xc2\x41\xad\x6a\xe8\x2d\x26\x29\xbe\x26\x29\x11\xf7\x0e\xb2\x43\x35\x9f\xd3\xb4\x26\x06\xa3\xc8\xe7\x37\x98\x52\x48\x9b\x01\x43\x30\x78\xcd\xf0\x04\x28\x0e\xca\xd7\x6f\x68\xea\x08\xe9\x52\xb5\xf6\xad\x79\xa3\xb8\xde\x93\x40\x3d\xea\x52\x35\x6e\x6b\xde\x54\x5c\x5b\xc4\xd5\xa3\x43\x47\xfb\x49\x9b\xb7\x5a\x59\x87\x5a\x0b\x4e\x4a\xe4\x3c\x19\x6a\x8a\x09\x26\x4a\xd2\xde\x28\x52\xc3\x3e\x77\x5a\x66\x0f\xe1\xdc\xde\xa2\x12\x6d\xb7\x43\x11\xce\x89\x50\x02\xa1\xb9\x4e\xfa\xde\xe2\xc5\x03\xa5\xb4\x45\xe7\x21\x72\x9e\x54\x55\xe0\x78\xcd\x0a\x1f\x4c\xe4\x7f\x20\xab\x1e\x4e\x1e\x23\xd4\xcf\xa9\x1d\x36\x03\x71\x94\x73\x88\xfc\x4d\xdf\xd0\x6c\x6c\x3a\x73\x26\x44\xa6\xf7\x18\x64\x21\x6b\xa2\xc9\x8d\xad\xa7\x95\x51\x58\xe7\x3e\x57\x0f\x18\x82\x16\xb1\x19\x1d\x05\xfa\x9d\xa4\x02\xb8\xfa\xf4\xa8\x1e\x6b\x68\x1a\xce\x9b\x33\x8e\xc8\x38\x90\x0d\xfd\x37\x38\x99\xa3\xa1\x19\x44\x77\xce\x14\xc4\x0c\x0b\x0f\x2d\xc3\xc2\xa4\xb5\x7a\x70\x3c\xab\x35\x8f\x3c\x9a\xae\x7f\x6b\x89\xea\xb1\x51\x14\xe7\xed\xb6\x1e\x6b\x68\x1a\xcd\x9b\x33\x8e\x28\x0b\x35\x07\x4c\xfe\x34\x38\x66\x64\x14\xc2\xbd\xf1\x32\x43\x35\x69\xd5\xbd\x13\x9b\x00\xd7\xca\xa5\x96\xb2\xea\x5c\xce\x8c\x62\x39\x37\x57\x16\xcc\x92\x56\xdd\xbb\xad\x09\x70\x6d\xd1\x0c\x65\xd5\xb9\x81\x18\xc3\x72\xbf\x27\xb0\xdf\xbc\xf6\xbe\xf9\x0e\x22\xa8\x13\xca\xdf\x3d\x35\x49\xcb\xe3\xce\x18\x85\x7b\xcb\x49\x86\xf9\xbd\xb7\x77\x1a\x9a\x06\xf4\xe6\x8c\x22\xbe\x03\x1c\xfb\xa7\xb8\xa5\xac\xcc\xad\x6f\x3d\x3e\x01\xcb\xbf\xb0\x90\x58\x9a\xb2\x6a\xdf\x20\x8f\x62\xad\x5b\x7b\x71\xed\xec\xc5\xf5\xe4\xbd\xb8\xd6\xef\x78\x0d\x8a\xfa\x6d\x50\xec\xd8\x38\x4a\x79\x6d\xde\x21\x2d\x8c\x26\xd8\xef\x9a\xeb\xe1\xf1\x78\xe8\xbc\xbf\x21\x54\x93\xb4\x58\xee\x8c\x71\x38\x4f\x2c\x47\xa6\xc9\x02\xfd\x47\x7f\xc9\x52\xd3\xf5\x6f\x29\x8a\x19\x1a\x94\x42\xd1\x3b\x5f\x99\x1c\xd2\x3a\x3e\x51\xa3\x34\xc0\xec\xef\xe9\x98\x4c\xa9\x75\x6c\x97\xd0\xb1\x5d\x3a\xb6\x4b\xc7\x76\xe9\xd8\x2e\x1d\xdb\xa5\x63\xbb\x74\x6c\x97\x8e\xed\xd2\xb1\x5d\x3a\xb6\x4b\xc7\x76\xc9\x69\x97\xfe\x1f\x00\x00\xff\xff\x60\xdc\xd4\x3a\xcd\x3d\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15821, mode: os.FileMode(420), modTime: time.Unix(1515713322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8b\xdb\x30\x14\x84\xef\xfa\x15\x83\x59\x4a\x02\x59\xbb\xe7\x40\x0e\x65\x0b\xcb\x1e\xb6\x94\x2c\x3d\x85\x1c\x14\xf9\xc5\x16\x2b\x4b\xae\xfc\x9c\x12\x84\xfe\x7b\x89\x9d\xec\xc6\xad\x4b\x4a\xb3\xb4\x3d\xea\x59\xef\x9b\x19\x46\xb8\x96\xea\x59\x16\x84\x10\x90\x3e\x11\xa7\x77\xce\x6e\x75\xd1\x7a\xc9\xda\xd9\xf4\x93\xac\x08\x31\x0a\xa1\xab\xda\x79\x46\x52\x68\x2e\xdb\x4d\xaa\x5c\x95\xc9\xda\x79\x62\x77\xab\xad\xca\xc8\x50\x45\x96\xa5\x49\x84\x50\xce\x36\x0c\xeb\x72\xa7\x9e\xd8\x6b\x5b\x60\x81\x64\xd5\x9d\xd7\x09\xb2\x0c\xd6\x19\x6d\x79\x8e\x9d\xf4\xaa\x24\xf5\x3c\xcb\x49\xe6\xca\xe5\x24\x84\xd8\x49\x0f\x4f\xa6\x53\x6f\x4a\x5d\x37\x4b\x2a\x74\xc3\x7e\x8f\x17\x89\x74\x39\xf6\x5d\x88\x2c\xc3\xe0\x0b\x3c\x71\xeb\x6d\x03\x2e\x09\x95\xcb\xc9\x0c\xc9\xa9\xd8\xb6\x56\x0d\x77\x26\xd3\x4b\x3a\x08\x42\xe0\x88\x1e\x77\x2a\xa2\xe8\xc9\xda\x6a\x9e\x4c\x4f\x0b\x63\xac\xc5\x25\xb5\x10\x0f\xcb\x21\xc0\x4b\x5b\x10\x6e\xc8\xb2\xe6\xfd\xa1\x95\x19\x6e\x4e\x4c\xcc\x17\x7d\x77\xc3\xf8\x31\xfe\x4a\x77\x15\xc2\x19\x29\xc6\x87\xbc\x3f\xad\xb1\xc0\xbb\x71\x47\x41\x00\x07\x23\xb7\xd0\x5b\x14\x8c\x89\x21\xfb\xea\x20\xfd\x60\x8c\xfb\xd6\xdc\x79\x92\x4c\x53\xbc\xef\xb5\x81\xf3\xf1\x1c\x95\xac\x57\x4d\xf7\x22\xd6\x1b\xe7\x0c\x7a\x66\x4f\x3d\xe6\xab\xa5\x27\xcb\x87\x40\xaf\xec\x7b\x62\x24\xaa\x63\x24\x27\x30\x90\x84\xf0\x72\x3d\xc6\x04\x73\xb0\x6f\x69\x76\x86\x24\x9b\x9f\xae\xc7\x99\x18\x99\x5e\x48\xf3\xa5\xce\xc7\xd2\xf4\xe3\xeb\xd2\xb4\x1d\xe3\x0d\xd2\xe8\x2d\xe8\xeb\x19\xfd\xd1\xe5\x84\xa4\xa2\x6a\x43\x3e\x19\xfa\xfe\x2c\x59\x95\x7f\x6c\xbb\x63\xbc\xa1\xf1\x1f\x6a\xf8\xfd\x56\x3e\x92\xa1\x91\x56\xfa\xf1\x75\xad\xe4\x1d\xe3\xaf\xbe\xb1\x7b\xe2\x9f\xa2\x2c\x89\xbd\xa6\xdd\x95\x61\x0a\xe2\x2b\x93\x0c\xdd\x3c\x4a\xbb\xff\x3f\x1c\x3d\xd8\xad\xfb\xd7\x4e\x06\xd3\xd8\xff\xa2\x8f\xe7\x28\xbe\x07\x00\x00\xff\xff\x1b\x1a\x93\x85\x53\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1875, mode: os.FileMode(420), modTime: time.Unix(1515701556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

