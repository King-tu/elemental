// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1528494836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x5d\x6b\xf3\x36\x14\xbe\xf7\xaf\x38\x0b\x61\xd8\xd0\xb8\x37\x63\x17\x1d\xb9\x28\xa5\x85\xc0\x52\x4a\x0a\xbb\x09\xbd\x50\x9d\x63\x47\x4c\x96\x8c\x24\xb7\x33\xc6\xff\x7d\xc8\x96\x3f\xe4\x7a\xa9\xd3\xb5\x7d\xe1\xcd\x55\x2c\x9d\x2f\x3d\xcf\xd1\x73\x94\x91\xe8\x6f\x92\x20\x94\x25\x84\x8f\xa8\xc3\x1b\xc1\x63\x9a\xe4\x92\x68\x2a\x78\x78\x4f\x52\x84\xaa\xf2\x3c\x9a\x66\x42\x6a\x58\x24\x22\x24\x99\x90\xa8\x45\x48\xc5\x25\x32\x4c\x91\x6b\xc2\x16\x9e\xf7\x42\x24\xf8\x1e\x00\x00\x3d\x20\xd7\x54\x17\xc6\x59\x6d\x49\x06\x6b\x48\x49\xb6\x57\x5a\x52\x9e\x3c\x75\x3e\xe1\xc6\xda\x41\x59\xbb\x99\x5f\x59\xae\x40\x12\x9e\x60\x53\xcc\x63\x86\x11\x8d\x69\x54\x17\xa3\x4c\x21\xbd\x21\xd0\x18\xd4\x51\xe4\xec\xb0\xc3\x84\x2a\x8d\xd2\xb1\x86\x10\x96\xe1\x43\xfe\xcc\x68\xb4\x15\x07\x74\x7d\x57\xb0\xec\x4b\x84\xab\x35\x84\xc6\x86\x85\xb7\xfd\xe2\x6a\xe0\xb0\x28\x4b\x6b\xb0\x43\xa5\xcd\x76\x55\x2d\xae\x4c\x0d\xc3\x30\x55\xd5\x1e\xe8\xc2\x49\x85\xfc\x30\xce\x3e\x58\xaa\x3c\x07\xb3\x88\x68\x4c\x84\xa4\x3f\x21\x70\x22\x97\x11\x7e\x09\x78\x84\x51\xa2\xbe\x10\xb1\xd5\x37\x42\x56\x96\xb6\xaa\x25\xbd\x80\x65\x7d\xb2\x81\xd3\x75\x73\x52\x70\x31\x6e\xed\x3e\x0f\xd8\x49\xac\x03\xcf\xbb\xbc\x84\xba\x90\xbf\x50\x2a\x73\x70\x89\x3a\x97\x5c\x81\x3e\x22\x44\xb9\x94\xc8\x35\xbc\xd8\x3d\x11\xd7\xcb\x69\x5d\xb8\x17\xe7\x3c\x72\x7c\xfd\x00\x62\x26\x88\xfe\xfd\x37\x28\x6d\x9c\x4e\x84\xae\x1f\x36\x1b\x1e\x8b\xb0\x4d\x53\x55\x86\x6a\x5d\x64\x36\xdc\x96\x70\x92\xa0\x04\xa5\x65\x1e\xe9\xb2\xf2\xea\xf0\x7e\xec\xec\x06\xd0\x9e\xfc\x4e\x8a\xd4\x80\xe1\x73\x83\x48\xd3\x1c\x01\x4c\x76\x47\x7d\x54\x5b\xcd\x58\xc7\xf6\xc6\xfd\xc9\x9b\x93\xed\xa6\xb9\xc6\x85\x6f\xef\x73\x71\x7e\x56\x47\x09\xf6\x6d\x9c\x79\xe9\xeb\x36\xf1\x9b\xa6\x98\x9d\xb8\xbf\x45\xfb\xfa\xef\xcc\x54\xbc\xf0\x09\xef\xcf\xe7\xd3\x89\x4c\x41\x9b\x8a\xc6\x40\x61\x0d\x71\xf8\x86\x1a\xc2\x8b\xe0\x0f\xf8\x85\x86\x1b\x75\x9b\x66\xba\xf0\x83\xc1\x5d\x6d\xa1\x71\x14\x73\x2a\x54\x87\xfb\xd9\xe1\xec\x9a\x1b\xce\xe2\xc8\x8b\xe0\x1d\x2c\x62\x4a\x9e\x19\xfa\x2d\x77\x93\x10\x8c\xd7\x1a\x9f\x16\x19\xf5\x4a\x75\x74\xec\xd8\xb7\xd5\x76\x6a\x70\x42\xa3\x3e\xac\x4f\x11\x51\xcd\xdc\x7f\x23\x48\xbd\x68\x5c\x8d\x41\xbb\xc7\xd7\xff\x70\xf1\x03\x6f\x42\x36\x46\x9f\x07\x8c\x49\xce\xf4\x9b\xb0\x9c\x32\xcb\xc6\x1c\xa0\x0d\x37\x8f\x75\xc3\x39\xbd\x77\x1a\xe1\x11\xc3\x96\xb2\x11\xe1\x4d\x37\x07\xf3\xf8\x56\x1f\x21\x5c\x7d\x1a\xe3\x5c\xe8\x96\x88\x8d\xda\x09\xa1\x7f\x4c\x47\xfc\x3a\xe5\xf0\xc0\x72\x49\x18\x54\xd5\x9f\x54\x19\x81\x7e\xbf\x33\xbe\xa4\x51\xd4\x59\x9d\xa2\x4e\xb6\x8a\x3a\xbb\x57\x76\xc8\x1a\xe2\x8e\x34\x53\xfe\x30\xab\xb3\xd3\x30\x24\xc7\x7a\x2c\xa7\x6c\x4c\x2e\xf3\xd2\x4e\xed\x04\x5c\x3b\x29\xcd\x24\x34\x23\xda\x6e\x0e\xa7\x73\x6d\x36\xa8\x60\x3b\x70\x6b\xa7\x73\xf3\xe5\x14\x3a\x34\xeb\xe7\x74\x9b\xbd\xf2\xea\x7c\xd7\x8c\x59\x60\x28\xaa\x2e\x2b\x61\x0c\xf0\x1f\xaa\x34\xe5\x49\xdb\xe5\x14\x95\x4d\xe6\xf8\xf8\x01\xec\xa7\x5f\x6b\x43\x40\xa6\x4c\xbe\xff\x3d\x77\xf2\x72\x9c\xf7\x78\xad\x2c\x7a\xf5\xdc\xbd\x13\xb2\x3b\xf7\x10\x42\x43\x9e\x1d\xcd\x10\x0b\x59\x7f\x27\xf4\x05\xfb\x97\x42\x87\xe8\x38\xce\x69\x79\xda\x3f\x35\xb7\xe1\x3d\x3d\x9a\x01\xeb\xf7\x0a\x4e\x5b\x78\xf9\x7f\x1f\xcb\x27\xd9\x9a\x23\x52\xee\xdb\xc1\x48\x53\xe5\xfd\x1b\x00\x00\xff\xff\xb6\x1f\x7f\xe7\x51\x0f\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3921, mode: os.FileMode(420), modTime: time.Unix(1533248747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\x1b\x37\x12\x7f\xd7\x5f\xc1\x13\xdc\x56\x3a\x28\xeb\x3c\xab\xe7\x02\x39\xc7\x2d\x8c\x4b\x1a\x23\x0e\xd2\x07\xc3\xa8\xe9\xdd\x91\xcc\x78\x45\x2a\x24\xd7\xb1\x4f\xd8\xff\xfd\xc0\xcf\x25\xf7\x43\xa2\xdc\xb8\x30\x0e\xce\x43\x21\x0f\x87\xbf\xf9\x22\x87\x33\xe4\x76\x8d\xf3\x5b\xbc\x04\xb4\xd9\xa0\xec\x1c\x64\x76\xcc\xe8\x82\x2c\x2b\x8e\x25\x61\x34\xfb\x1d\xaf\x00\xd5\xf5\x68\x44\x56\x6b\xc6\x25\x9a\x8c\x10\x42\x68\xbc\x58\xc9\xb1\xf9\x25\x1e\x68\x3e\x1e\x99\xdf\x4b\x96\xe1\x35\xe3\x20\x59\x46\xd8\x21\x94\xb0\x02\x2a\x71\x69\x38\x37\x1b\xc4\x31\x5d\x02\xca\xce\xd7\x90\x67\x9f\x1e\xd6\x70\xc6\xd9\x1d\x29\x80\x0b\xf4\xaa\xae\x0d\x84\xd2\x02\xd5\xb5\x9f\x02\xb4\xd0\x83\x7d\x10\x9f\x71\x49\x0a\xad\xe6\x1e\x40\xd3\xd1\xe8\xf0\xd0\x18\xab\x30\xde\xb3\x02\xca\xec\x84\x4a\x22\x1f\xac\xad\xa7\xb4\x80\x7b\x10\xa8\x24\x42\x0a\x24\x6f\x00\x61\x29\x39\xb9\xae\x24\xa0\x9c\xad\xd6\xac\xa2\x05\x22\x86\x29\x1b\xdd\x61\x9e\x84\x76\x84\x2e\x2e\x2f\x2e\x85\xe4\x84\x2e\xd1\xc6\x6a\xf5\xca\xda\x73\x40\x66\xe8\xc0\x63\xcf\x8f\x22\x38\x87\x60\x2d\x0b\x66\xf9\x19\x76\xc8\xe1\x1b\x78\xef\x86\xba\x1e\xcf\x34\xa5\x9e\x79\x04\x68\x66\x59\xe7\xd4\xf5\xa8\x1e\x8d\x46\x9b\x0d\x3a\x28\xb1\x04\x21\x3f\x03\x17\x84\xd1\x46\x9d\x77\x9a\xfc\xc6\x39\x43\x38\x06\x15\x1e\x1f\x1a\x6d\x0a\xd0\x6a\xa5\xe6\x5d\x57\xa4\x2c\x4e\x68\xb5\x12\x06\xa2\x0d\x5d\xd7\x36\x18\x7a\x86\x5e\x13\xa8\xae\x11\x87\x35\x07\x01\xd4\xba\x7f\xcd\x84\x20\xd7\x25\xa0\x3b\x5c\x56\x20\xd0\x82\xf1\x20\x24\x63\x3f\xdd\x6b\x66\x5d\x3f\xce\x46\x52\x21\x76\xf0\x8d\x97\x46\xa3\x9c\x51\xe1\x96\x74\xe0\x56\x8a\x57\x30\x43\x07\x5a\x9a\xb2\xc2\x4c\xfe\x6c\x84\x5b\xa7\x59\xb5\xa9\x91\xd4\xd6\xd8\x4c\x55\x0c\xe6\x57\x5d\x67\xce\xd5\x7e\x4a\x47\xab\x23\x63\x8a\x9b\x31\x6e\x05\x67\x3a\x6a\x7e\xef\x5c\xc2\x05\xe8\x3f\xdb\x7a\x79\x3a\x5b\xe8\xbf\xd9\xf5\x17\xc8\x65\xc2\x22\x76\xf3\x8e\x90\xdf\xd5\x99\x27\x9a\xe5\xa6\x58\xe7\xcd\xa2\x0b\xa0\x3e\x82\x90\x6a\xd4\xaf\xc3\x63\x2c\x61\xc9\xf8\xc3\xbc\x8f\x95\x55\x3c\xf7\x11\x34\xfc\x67\x9c\xdc\x61\xa9\xd0\x5b\xec\x76\xa0\xae\x67\x6e\xed\x92\x05\xa2\x4c\xc6\xfb\x47\x7c\x64\x4c\x36\x6b\xad\xdf\xca\xb3\xb2\xe2\xb8\x44\x75\xfd\x8e\x08\x19\xfa\x0d\xeb\x44\xa0\x3c\xb6\x7b\xae\x5f\x6f\x29\x32\x2e\x2e\xff\x39\xc8\x69\x63\x1c\xc4\x51\x56\x9c\x9a\x20\x92\xde\x20\x0a\x44\xa8\xfe\x53\x69\x9b\x8d\x16\x15\xcd\xd1\x84\x25\xea\x32\xf5\x92\x26\xd3\xfe\x08\xeb\x38\x18\x2d\x86\x31\x9b\x85\x32\x32\xfa\x1f\xb3\x75\xa3\x3b\x46\x6b\x46\xa8\x04\x8e\x24\x43\x18\xe5\x6a\x4c\x29\x9c\xa6\xe2\xfe\x26\x29\xe1\x3d\xe6\x2c\x08\xbe\x2e\x41\x38\x9b\xb4\x1a\xf3\x23\x84\xd7\x6b\xa0\xc5\x24\x0d\x7c\x53\xcf\x10\xcb\xb2\x6c\x1a\xba\xe5\x47\x05\x65\x0d\x7f\xa3\xd1\x2c\xa8\x88\xc2\x24\x99\x39\x53\x10\x85\x6f\x46\xba\x8d\xe3\x53\xf9\xc1\xe8\x32\x71\xf2\xb3\x2c\xeb\x77\xc9\x4e\x57\xb1\x4a\xfe\x45\x4f\xa9\xcc\xfd\xe7\x4c\xb9\x42\x01\x99\x74\xeb\xf4\x6a\x0e\x2d\x25\xc7\x8b\x61\x95\xd4\x13\xb2\xc9\xb6\xdd\x32\x35\xf8\x75\xb4\x4e\x59\x25\x6d\x38\xf4\x7e\xcb\x19\xbd\x03\x2e\xc3\x68\xe8\x95\x48\x87\xec\x7e\x9c\xbb\xd5\x7f\x87\x97\x9d\xd6\x24\xf6\xe7\x16\xce\x4d\x1d\xba\x8d\x48\x58\x05\x7e\xdb\xea\x31\xc5\xbb\xdd\x27\x6f\x61\x81\xab\x52\x7e\xe0\x05\xf0\x28\xbf\x14\x66\x00\x31\x35\xa2\xaa\x95\x05\x81\xb2\x10\x6e\x99\xe6\x8c\x4a\xa0\x8f\x70\x4c\x28\x70\x32\x45\x41\x31\x14\x2a\xd8\xad\x61\x5a\x55\xdf\x07\xab\x56\x53\x87\xb4\xab\x0a\x57\x03\xfa\xb3\x28\x3e\x4d\xe2\x63\xd5\xb8\xc8\xb8\xc4\x01\x84\xde\xb8\xb3\xb4\xbf\x6a\xbd\xc5\x9e\x4c\x11\xa1\xb2\x2f\xa1\x82\xcc\xde\x9c\x9d\x9e\xd2\x05\xcb\x82\xf2\xc8\x94\x56\xee\xd8\xdf\x75\xee\xb7\xcf\xfb\x95\x62\x51\xaa\xe3\xf6\x34\x77\x26\xef\x3e\xb4\x6c\xc1\x54\xe5\x4a\xeb\x56\x2c\xb6\xc7\x60\xb3\x41\x2b\x7c\x0b\x8a\x49\xd7\xe2\xa3\xa0\xf0\xd4\xe6\x6b\x51\x6e\x86\x72\xcb\xd5\x17\xc1\xe8\x7c\xfc\x6a\x8c\xae\xf5\x8f\x3f\xb5\x01\x36\x04\xe3\x2b\x33\x4b\x75\x1c\xd9\xfb\x4a\xc2\xbd\x0d\xdb\xef\xf0\x6d\x87\x53\xdc\x01\xa4\x52\xee\x70\x1a\x51\x7a\xe9\xb0\xee\x00\x9c\x4c\xb7\x83\xb4\xa2\xfb\xe3\x36\xde\x66\x99\x87\xce\x98\x6f\x59\x12\xb3\x51\xb0\x8a\xa3\x06\x42\xd5\xc4\x2a\x3f\x08\xc6\x83\x2a\x1d\x4d\x76\xc4\x6a\x1a\x6d\x18\x85\x49\x16\x48\xdc\xb0\xaa\x2c\xfe\xe0\x44\xc2\x29\x25\x92\xe0\x92\xfc\x17\x38\x3a\xb0\x65\xbc\x12\x65\xb6\x55\x2b\xee\x07\xd9\x59\x75\x5d\x92\x5c\x59\x83\x5a\xb0\x07\x84\x12\x9d\xf1\xbe\x6d\x83\x6d\xcf\x22\x0b\x3b\x31\xa2\xf7\xd1\xa2\xae\x26\x8d\xe4\x76\x7e\x6f\xa1\x35\x54\x2d\xbb\xad\xbf\x75\x11\x7c\xa7\x92\x0a\x75\x6a\x2a\x77\x48\xb4\xb2\xb6\x69\x1b\x22\x4d\x7f\x12\xa8\xa2\xe4\x6b\xe5\x4a\x46\x35\x67\x4f\xed\xd5\x94\xc9\x14\xc5\x99\xda\x94\xd9\x66\x6e\xa0\x8d\x5b\x45\xee\xa4\xc9\xbc\x80\x86\x29\x3b\x36\x87\x30\x14\x6e\xc3\xf9\xa0\x94\x02\xda\x10\xe3\x71\xbb\x5f\x35\x2e\x38\x07\x19\xc8\x15\x20\x9f\xc6\x05\x91\x98\x09\x29\xac\x1b\xa6\x89\x7e\x48\x73\x00\x3a\x42\xa4\xe8\x37\xb3\xef\x38\xba\xc1\xbc\xc8\x59\x01\x45\xfb\x60\xd2\x99\x32\xd9\xb4\xc7\x9f\x46\xdb\x2a\x07\xd7\x28\x0d\x54\x10\x49\xda\x69\xf5\x9e\x79\xa9\x10\x06\xde\x18\xf0\x16\x44\xce\xc9\x5a\x36\x97\x1a\x6f\x59\x1e\x57\x55\x2c\xaf\x74\x0e\xd0\x3c\xaa\xa2\x6b\x56\x69\x6a\xd4\xde\xb2\xbc\x67\x33\xea\x14\x09\x5f\x07\xf5\x19\x5f\x50\x56\xb0\xfc\x72\xdc\xde\x5e\x9a\x7c\x6e\xee\x42\xa2\x6d\x18\xb3\x5d\x29\x0f\x88\xfc\xdf\x38\xbf\x95\x24\xbf\x15\x5b\x0c\xbf\xea\x2e\xe4\xa0\x7a\xd1\x56\xa6\xec\x3b\xad\x52\xc7\x52\xab\xce\x62\x25\xb3\xf3\x35\x27\x54\x2e\x26\xe3\x7f\xfd\x20\xe6\x3f\x88\x5f\xc6\xaa\xc9\x68\xf2\xad\x8e\x62\x43\x32\x49\x6c\x3a\x0a\xaf\xa9\x76\xd5\x2f\xa6\x7c\xf1\x07\xe1\x6f\x40\x81\x63\x09\xbf\x81\x54\x0d\x6c\xd6\x39\xe7\x0e\x0f\xd1\x6f\x20\x95\x5d\x9d\x0d\x1e\xae\x82\x5e\x06\xbb\x83\x39\xe4\x40\xee\xda\xf9\xe9\x60\x8b\xa3\x06\x24\x4e\xa6\xb1\x1c\x77\xc1\x14\xfb\xd1\xa4\xa7\x4e\x3e\x8e\x0a\xce\x3e\x17\x9c\x6f\x71\xc1\xf9\x80\x0b\x7c\x8a\x5e\x92\x3b\xa0\xdf\xd9\x0b\x03\x42\x27\xc1\x76\xee\xf5\x87\xcf\xe3\xfd\x9e\x40\x47\x28\x40\x88\x56\x72\x7c\x11\x67\xaf\xa1\xf5\xf9\x43\x0a\x30\x86\xe6\x15\xe7\x40\x25\x22\x74\xc1\xf8\xca\x6c\x7a\x21\x19\x87\x42\x65\x5c\x73\x05\x60\xaa\xea\x8a\x43\x7a\xda\xb6\xa2\x54\x49\xc1\x39\xe3\xce\x02\xfd\x87\x88\x9b\xc9\x13\x4d\xdb\xb8\xad\xfc\xb5\x22\x1c\x8a\x93\x6d\x8c\x7d\x77\xec\x5b\x77\x48\x73\x08\xea\x3b\xb7\x4f\x1c\x53\x41\x94\xd5\xd1\x58\x76\x72\xbf\x66\x02\x9a\xb2\xdf\x92\x3f\x5a\x9d\x62\x6e\x95\xc8\x74\x80\xc6\x66\xf7\x8f\xdd\xb0\x1a\xe3\x3c\x56\xdd\xf9\xc3\x41\xd9\xcc\x11\x67\xf2\x81\xf8\x4e\x7f\xd6\x78\xff\x38\x42\x94\x94\x41\x2f\xdd\x72\x95\x6f\xab\x63\xfa\x4c\x4d\x76\x0d\x76\x7c\x4c\xf4\x1a\x23\xc9\x0a\xf6\x32\xe5\x13\x59\xc1\x73\x34\x04\xee\x25\x70\x8a\xcb\xbd\x8c\x39\xb1\x93\x9e\xa3\x41\x84\x4a\x58\x02\xdf\xcb\x9e\x53\x2a\x9f\xa3\x29\x8b\x92\x61\xb9\x97\x21\xbf\xaa\x19\xcf\xc4\x94\xae\x65\xd9\x9b\xb2\x64\xdf\xa0\x38\xbe\x61\x24\x6f\xde\x5e\xb6\x19\x66\x32\xc0\x29\xd5\xb7\x70\x2d\xbb\x4c\x42\x99\x0c\x98\x37\x6b\xea\x49\x35\xef\x0b\x23\xb4\xa3\xc0\xd5\x78\x86\xc6\x57\x0a\xad\x9e\xe9\xd3\xe1\x4d\x25\xd9\xd2\x1e\x8c\xc5\x16\x27\x41\xcb\x39\xb0\x47\x7c\x1b\x25\x30\x4f\xf2\xc1\x19\x56\x27\x34\x4d\x0b\xeb\x4c\xd7\x77\x6d\x19\x57\xc6\xbc\x20\x45\x3f\x85\x65\x4b\x89\xb2\xf7\xf8\xfe\x1d\xd0\xa5\xbc\x41\xaf\x53\x6c\x7b\x8f\xef\xc9\xaa\x5a\x99\x29\xa9\x16\x2a\x6a\x23\x47\x51\x16\xb8\x14\xf0\x64\x26\x11\xba\x97\x49\x84\x3e\xd2\x24\x2f\xe7\xe9\x4d\xc2\xf7\xfa\xfd\x13\xbd\xce\x5e\x0f\x9d\xd7\xe9\xd9\xc7\x06\x71\x8f\xe4\xe3\x63\xf8\xd9\xbe\x8e\x7e\x3f\x7b\x6d\xc3\x93\xaa\x74\x72\xea\x9f\xa9\x42\x6f\xd2\x52\x7b\xfa\xbd\xe3\xb4\x6b\x21\x7e\xcf\xa8\x99\x75\xba\x7f\xd4\x9c\x16\x4f\x10\xb5\x44\x9d\x1f\x13\xb4\x46\xeb\xbf\x29\x68\xfe\xfe\x36\xeb\xf9\xd4\x83\xcc\xd0\x81\x7e\xfc\xe9\xfd\xea\x25\xb8\xc5\x38\x3c\x44\xc7\x95\x90\x6c\x65\xda\x11\xd3\x79\x28\xf4\x95\x33\x3e\xf3\xbc\x8d\xe7\x22\x06\xed\xaa\xe0\x8a\xb7\xf1\x97\x21\xa6\x56\x06\x49\xbe\x09\xfd\xf3\x6a\xa0\x24\xd8\xe9\x3d\xb2\x40\x25\xd0\x56\xc9\x31\x45\xbf\xa0\xd7\x5e\x1d\xdb\xf5\xc6\x2c\x36\x3a\x21\x06\xf4\xcc\xf5\xb3\xa1\x33\xcb\x5d\xa5\x90\xd2\xdd\x4d\xae\x21\x27\x0b\x92\x6b\xc7\xff\xca\xb8\x6f\xa0\xa2\x7b\x00\x4f\x8d\xd8\xfd\xb5\x90\x69\x93\x9b\x6f\x5c\xf4\x37\x23\xb7\xf0\xe0\x1a\xc5\x5d\x17\x28\x43\x3a\x4c\x34\x90\xbb\xc6\x6c\xb6\xcb\x80\x3a\x1b\xef\x99\xbb\x19\x62\xb7\x76\xa1\x0c\x0a\x6e\x7a\xc5\xf7\x78\x7d\xa1\x44\x5d\xfe\xac\xa6\x75\xdc\x78\x17\x7a\xf0\xf0\x10\xfd\x01\x28\x67\x55\x59\xe8\x36\x72\x41\x68\x81\x88\x9c\x21\xc1\x50\x09\xf2\x27\x81\xf2\x1b\xc8\x6f\x11\xb3\x9f\x37\xb0\x6f\xc0\x51\x8e\x05\xd8\x6f\xb0\x0a\x24\xd6\x90\xa3\x15\x5e\xa7\x5e\xa8\xbf\x53\x10\xc7\x58\x40\x8f\xc2\xee\xfd\xbe\xd7\x21\x22\x8a\xe1\xa2\x2a\xcb\x20\x46\x22\xe6\x5c\xe1\x75\x62\xb4\x06\x64\x4d\xa6\x0a\xe3\xc2\x04\xeb\x32\x35\x56\x09\xe6\x47\x56\x8f\x76\x7f\x4c\x14\xf1\x77\x5e\x18\xf1\x5a\xbf\x2f\x7a\x37\xa8\x25\xbc\x0d\x6d\xf7\xc7\x46\xb1\xbc\xa3\x7d\xbc\x10\xdc\x89\x3e\xe2\x12\x23\x78\xf3\xf2\x33\x94\x0a\xad\xab\xae\xe8\x13\xc3\x76\x2e\x1c\xcf\x77\x6e\xab\x4d\xf4\x18\x35\x54\xe0\xab\x7f\x21\x7d\xde\xad\xd3\x55\x99\xbe\xed\xad\x2b\x6e\x5e\xe6\x03\x4d\xd5\xab\xba\xde\xab\xf1\x69\x4e\x5f\x3f\xad\xf6\xe9\x78\xd6\xb5\xad\xd5\x21\x35\xda\x85\x03\xf3\xde\x6e\x6a\xab\x75\x4e\x40\xef\x8b\x92\xfa\x17\x0d\xcc\x07\xc2\x95\x26\x82\x83\x8e\xdc\x07\x5a\x3e\x44\x12\x02\xba\xb1\xa0\xc5\x99\x84\x1e\x3d\xa7\x04\xe3\x21\xdd\xa0\xb7\x38\xf7\x41\x77\xb5\x4c\x1b\x5d\xd3\x35\xba\x7e\x94\x8d\xb8\xed\xab\x6c\x96\x2e\x6a\xcd\x21\x6f\xc7\xb9\xa1\x3a\x23\x02\xae\x44\xdc\xe8\x71\xa5\x01\xf6\xe4\x79\xcf\x23\x45\xeb\x65\x22\x49\x52\x70\x53\xe9\x86\x2c\xc9\xe8\xde\x8c\x27\xc1\xfd\x4a\x4a\x09\x1c\x5f\x97\x91\xe7\x1b\xaa\x01\x8d\xb8\xd2\x70\x19\x07\xb2\xa4\xff\x81\x68\x35\x36\x54\x8b\x1b\x72\x25\xe1\xda\xd7\x8d\x60\xc4\x50\x0c\x9e\x1f\x4d\xc2\x0a\x1e\x44\x83\xd1\x86\x6a\x30\x23\xae\x24\xdc\xb0\x8f\xf7\x83\x9e\x38\xef\xf6\xfa\x89\xa0\x9d\x0d\xe2\x68\xf3\x4e\xeb\x99\x84\x18\xf4\xe6\x0d\xa4\x23\xce\xbb\xfd\x7b\x22\x68\x57\x4d\x4b\x9b\x77\x7a\xad\x14\xc4\x76\xce\x0c\x52\xe5\x5e\x19\x52\xa7\xa4\xf6\x42\xf7\x44\xa3\x5b\xc8\x93\x04\x7a\xc6\xc9\x0a\xf3\x87\xd6\x32\x6f\xa8\x06\x36\xe2\x4a\xc2\xfd\x08\xb8\x68\xa7\x72\x47\x9b\xdb\x7b\x2f\xcf\x91\x88\x18\x3f\x65\x18\x44\x43\x9b\xb7\x6f\xd2\x92\x10\xcf\x3b\x5b\xf1\x3c\xd8\x8a\xe7\x7b\x6d\xc5\x73\xf3\xee\x14\x62\x69\x8a\xc5\x72\xa3\x69\x58\xd5\xb5\x7d\x3e\x6b\xc0\x0c\xc9\x7d\xcc\xed\x19\xd2\x56\x4e\xe7\xd1\x48\xfd\xf3\x44\xa3\x62\xc8\x93\x06\xda\x52\x31\xd0\x6f\xa7\x72\x43\xff\x93\x44\xeb\xe3\x8c\xfd\x1b\x8c\xbf\xa1\x74\x1e\x10\xfc\xbc\x6b\x68\xd3\xd1\x65\x2f\x05\xf4\x4b\x01\xfd\x52\x40\xbf\x14\xd0\xe8\xa5\x80\x7e\x29\xa0\x5f\x0a\x68\xf4\x52\x40\xbf\x14\xd0\xff\xaf\x05\xf4\xff\x02\x00\x00\xff\xff\xbe\x53\x95\xd3\x74\x3e\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15988, mode: os.FileMode(420), modTime: time.Unix(1533264538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdf\x6b\xe3\x38\x10\xc7\xdf\xfd\x57\x0c\x21\x1c\xed\x91\x73\xaf\xdd\xb7\x40\x1f\x8e\xf6\x58\xfa\xd0\xa5\x74\xef\xee\x25\xe4\x41\x67\x4f\x12\xdd\x2a\x92\x57\x91\xb3\x14\xe3\xff\xfd\x90\x1d\x3b\xb6\x23\xd9\x6e\xd8\xc0\x2e\xcc\x14\x0a\xb6\x66\xe6\x3b\x1a\xfd\xc8\x07\x27\x2c\xfa\xc2\xd6\x08\x59\x06\xe1\x67\x34\xe1\x83\x92\x2b\xbe\x4e\x35\x33\x5c\xc9\xf0\x13\xdb\x22\xe4\x79\x10\xf0\x6d\xa2\xb4\x81\xc9\x5a\x85\x2c\x51\x1a\x8d\x0a\xb9\xba\x41\x81\x5b\x94\x86\x89\x49\x10\x44\x4a\xee\x0c\x48\x15\xab\xe8\xb3\xd1\x5c\xae\xe1\x1e\x26\x8b\xe2\x79\x39\x81\x9b\x1b\x90\x4a\x70\x69\xe6\xb0\x67\x3a\xda\x60\xf4\x65\x16\x23\x8b\x23\x15\x63\x10\xec\x99\x06\x8d\xa2\xd0\xdc\x6d\x78\xb2\x7b\xc5\x35\xdf\x19\xfd\x06\xb5\x42\xf8\xea\x1a\x0f\x82\x55\x2a\x23\xe0\x92\x9b\xab\x6b\xc8\x82\x00\x00\x3c\x99\xee\x87\x72\x65\x79\x19\x9e\x65\xa0\x99\x5c\x23\x4c\x51\x1a\x6e\xde\x6c\x0f\x66\x30\xad\xb2\xc2\xfc\xbe\xec\x54\x2b\x89\x6d\x52\x19\xfc\x1b\xf0\x15\xec\x36\x2a\x15\x71\x99\x19\x75\xd3\x13\xa6\x36\xb8\x99\x1b\xa6\xe1\x4b\xfa\xaf\xe0\xd1\xb3\x8a\xf1\x90\xc6\x39\x85\x45\x96\xb5\xe2\xf2\xfc\x29\x2e\x1f\x97\x70\x0f\xbf\xb8\xa7\x97\x15\xf9\x1a\xa5\xad\x0d\x5c\x09\x94\xc7\x09\x85\x0f\x1a\x99\xc1\x6b\xf8\xbd\x9a\x84\xb5\xf2\xe5\x1c\xb6\x2c\x59\xec\x8a\xf5\x5c\xfe\xea\x56\x78\x92\x2b\x05\x47\x99\x4a\xea\xd0\xc3\x84\x69\x94\x66\x06\x53\x16\x55\xdd\xeb\x2a\x37\x65\xbd\x3d\x7c\x92\xd2\xdd\xc8\x52\xa0\xd5\xc4\x6e\xc2\x89\x6d\xdc\xc1\x2f\xcf\x27\x30\xf7\x35\xcb\x4e\xa5\x3d\x93\x46\x3d\x87\x19\x84\x8f\x98\x68\x8c\x98\xc1\xb8\xab\x63\xed\x38\x3a\x07\xa3\x53\x9c\x39\xd3\xa1\x74\x06\x77\x94\x5e\x98\x66\x5b\x34\xa8\x1f\x71\x65\xb7\xb8\xed\x9f\x3f\xaa\x5e\x58\x7f\x74\xf8\x8a\x5f\x53\xae\x31\xee\x2c\x76\x65\xd5\x70\x1d\xba\x9b\x37\x4e\xcd\x27\xfc\x76\x1c\x38\xb8\xda\xa1\xab\x93\x3c\xd6\x16\x4b\xfb\x57\x6e\x9d\xd3\x9e\x36\x6b\x3f\xec\x14\x3e\x83\xa9\xb8\x2d\x36\xc8\x88\x19\xb8\xca\xf7\x35\x44\xdc\x7a\xe6\xdb\xac\x75\xa8\x52\x57\xb5\x77\x45\xb5\xe2\xb6\x2f\xb7\xb3\xa0\xbb\x81\x82\xca\xa2\xc6\x94\xe4\x2a\xeb\x43\x59\xd6\xdd\x90\x02\x54\x67\x43\x7c\xb0\xe7\xe2\x74\xab\xba\x84\x50\xc6\x03\x69\xf3\xfe\x44\xe3\x92\x0c\x7b\xf5\xc8\x0c\x07\xf7\x7b\x38\x52\x5f\x9f\x73\x90\xc7\x1c\xc9\x3f\xa5\xd1\x1c\x77\x9e\x0d\xd1\x3c\x89\x8b\xe5\xf1\x2c\x3a\x32\xb9\x2f\xae\xc6\xbe\x48\x86\xce\xd6\xa1\x14\xef\xb6\x79\xa7\x7c\x65\xf6\xc7\x6a\x7e\xb8\x84\x2b\xa2\xe8\xd9\x6c\x7f\xbd\x25\x47\x77\xfb\xd0\xef\x5e\xdd\x99\x49\xf8\x88\x2b\x96\x0a\xf3\x0f\x13\xe9\xc9\x4f\x40\xd3\x9a\x7e\xb5\x50\x27\x78\x40\x70\x78\x73\xf1\x15\xe0\xd7\x7a\x06\x13\x94\xe9\x76\xd2\x57\xd4\x1f\x42\xa8\x6f\x18\x3f\x6c\x14\x8f\xb0\x58\xec\x77\x5e\x48\xff\xcd\x60\xba\x2f\x56\x38\x09\xdb\xc9\x86\xae\x81\xa2\x03\xfb\xe1\x1b\xa0\x67\xbf\x57\x36\x7c\x26\x47\xdc\xdb\xd3\x24\x7c\x4e\x85\xe1\x89\xe8\x5d\xc6\xca\xc7\xf7\x3b\x3b\x52\xd8\x51\x72\x4f\xc4\xfb\xbc\x3d\x43\x9d\x24\x1e\x2f\xc7\xeb\x46\xa0\x63\xd4\x0b\x78\x7f\x27\xf1\x29\xe0\x95\x2f\x2f\x0c\x78\xa5\x08\x01\x9e\x47\x89\x00\x8f\x00\x8f\x00\xef\x0c\x19\x02\xbc\xba\x8a\xef\x08\x78\xc4\x77\x40\x7c\x47\x7c\x37\xde\xfb\x82\x7c\xf7\xc2\x4c\xb4\x21\x3a\x23\x3a\x23\x3a\xf3\x56\x4b\x74\xe6\x32\xa2\x33\xa2\xb3\x86\x11\x9d\x11\x9d\x11\x9d\xf9\x93\x5c\xfc\xeb\xdb\x23\x0a\x3c\xf9\xfa\x56\xbe\xbc\x30\xdf\x95\x22\xc4\x77\x1e\x25\xe2\x3b\xe2\x3b\xe2\xbb\x33\x64\x88\xef\xea\x2a\x88\xef\xba\x46\x7c\xd7\x36\xe2\xbb\xf1\x11\x3f\x25\xdf\x7d\x44\xd3\xb9\x5d\x5e\xd1\x1e\xf4\xfd\xa5\xf1\xee\x23\x1a\x62\x3b\x8f\x12\xb1\x1d\xb1\x1d\xb1\xdd\x19\x32\xc4\x76\x75\x15\xc4\x76\x5d\x23\xb6\x6b\x1b\xb1\xdd\xf8\x88\x9f\x95\xed\x9e\x99\x7c\xf3\xf0\x9d\x1d\xba\x3c\xe3\x59\x15\xe2\x3c\x8f\x12\x71\x1e\x71\x1e\x71\xde\x19\x32\xc4\x79\x75\x15\xc4\x79\x5d\x23\xce\x6b\x1b\x71\xde\xf8\x88\x1f\x86\xf3\x2c\xa9\x10\x9d\x01\xd1\x19\xd1\x99\xb7\x5a\xa2\x33\x97\x11\x9d\x11\x9d\x35\x8c\xe8\x8c\xe8\x8c\xe8\xcc\x9f\xe4\x7b\x7c\x85\x2b\xff\x77\x5e\x66\x59\xf5\x94\x07\xff\x07\x00\x00\xff\xff\xbd\x9e\xc8\xb9\xa8\x46\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 18088, mode: os.FileMode(420), modTime: time.Unix(1533220355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

