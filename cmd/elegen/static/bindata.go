// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\x38\xf2\x7f\xf7\x5f\x31\x5f\xa1\xbb\x6b\x7f\xe1\x28\x7d\xf6\x5e\x16\xe8\xb5\xe9\x22\xb8\x76\x1b\x34\x45\xef\xa1\x28\x36\x8c\x34\x76\xd8\x48\xa4\x4a\x51\x69\x72\x86\xfe\xf7\x03\x7f\x49\xa4\x2c\x59\x72\xb6\xd9\xeb\x43\x5e\x82\x68\x48\x7e\xe6\x27\x87\x33\xa4\x0b\x92\xdc\x90\x0d\xc2\x76\x0b\xf1\x05\xca\xf8\x25\x67\x6b\xba\xa9\x04\x91\x94\xb3\xf8\x0f\x92\x23\xd4\xf5\x6c\x46\xf3\x82\x0b\x09\xf3\x19\x00\x40\xb4\xce\x65\x64\xfe\x2b\xef\x59\x12\xcd\xcc\xff\x1b\x2a\xaf\xab\xab\x38\xe1\xf9\x31\x29\xb8\x40\xc9\x8f\x28\x4b\x8e\x31\xc3\x1c\x99\x24\x99\x59\xb2\xdd\x82\x20\x6c\x83\x10\x5f\x14\x98\xc4\x1f\xee\x0b\x3c\x17\xfc\x96\xa6\x28\x4a\x38\xaa\x6b\x83\xa5\xc4\x81\xba\x6e\x96\x20\x4b\xf5\xe0\x62\x36\xdb\x6e\xe1\x59\x46\x24\x96\xf2\x23\x8a\x92\x72\x06\xab\x13\x0b\xf6\x46\x93\x5f\x48\x29\xe8\x55\x25\xd1\x8d\x2b\x05\x1a\xb6\xcf\xe8\x12\x9e\x21\xab\x72\xbd\xec\x94\x55\x79\xa9\x26\x1c\x1f\x2b\x36\x7a\x40\xcb\x04\x75\x0d\x02\x0b\x81\x25\x32\x59\x82\xbc\x46\x28\x78\x59\xd2\xab\x0c\xe1\x96\x64\x15\x96\xb0\xe6\x02\x88\xe3\xa5\x45\x36\xcb\x1b\xfe\xd6\x7a\x51\x3c\x93\x0a\x71\x07\xbf\x94\x82\xb2\xcd\x6c\x96\x70\x56\x3a\xdb\x6e\xb7\x47\x4e\x50\x46\x72\x5c\xc2\x33\xcd\x4d\x09\x6b\x16\x7f\x34\xcc\xad\xa1\xac\xd8\xcc\x70\xea\x4a\x6c\x96\xaa\x09\xe6\xbf\xba\x8e\x9d\x41\x9b\x25\x3b\x52\x9d\x18\x55\xdc\x8a\xc0\x05\xda\x03\xed\xff\xd6\x6a\xc6\xf8\x6f\x79\x8a\x59\x7c\xca\x24\x95\xf7\x56\xf3\xb3\x14\xf5\x67\x57\xae\x86\xce\xd7\xfa\x9b\x5f\x7d\xc1\x44\xc6\xb3\x5b\x22\xa6\xe1\x9d\x40\x13\x55\x71\x43\xdc\x6a\x49\xd5\xd4\x15\x34\x41\xe4\x41\xbd\xc7\x52\xaa\xd1\xba\x8e\x96\x7a\xea\x4b\x22\x71\xc3\xc5\xfd\xaa\x6f\x2a\xaf\x44\xd2\x78\xd0\xcc\x3f\x17\xf4\x96\x48\x85\xde\x99\x6e\x07\xea\x7a\x39\xab\x67\x3a\xd6\xe8\x1a\x18\x97\xc1\xa4\xb3\xf2\x3d\xe7\xb2\x8d\xb5\x7e\x2d\xcf\xb3\x4a\x90\x0c\xea\xfa\x0d\x2d\xa5\x6f\x37\x02\x99\xa2\xf0\xf5\x84\xb5\x4d\xbc\x4d\xe1\xf1\xe9\xf3\xff\x0f\xce\xb4\x3e\x7e\xc9\x99\x44\x26\x3d\x77\xca\x4a\x30\xe3\x4b\xda\xeb\xcb\x12\x28\xd3\x9f\x4a\xe8\x78\xb6\xae\x58\x02\x73\x3e\x51\xa4\x45\x97\xe1\x7c\xd1\xef\x6f\xed\x15\x23\xcc\x30\x74\x1b\x36\x33\xa7\x4d\xd1\xaa\x40\xa0\xe0\x94\x49\x14\x20\x39\x10\x48\xd4\x98\x92\x7b\x9a\xa4\x0f\xd1\xac\x08\xd5\x09\x54\x5d\x53\xa2\x12\x8c\xd5\x4c\x0b\xb3\x3a\x01\x52\x14\xc8\xd2\xf9\x34\x16\xdb\x7a\x09\x3c\x8e\xe3\x85\x6f\x9c\x9f\x15\x94\x55\xff\x85\x46\xb3\xa0\x65\xe0\x33\xc9\xf5\x27\x01\x86\xdf\x0c\x77\xeb\xd4\xc7\xb2\x86\x91\x65\xee\xf8\xc7\x71\xdc\xf5\xb3\xb1\xc8\x44\x83\xf1\x4a\xfe\x45\x7b\xa9\x9c\xfe\xe7\x52\x19\x44\x01\x99\x44\xec\xa4\x33\xf9\xc5\xf1\x69\xd8\xf0\x4a\xea\x05\xf1\x7c\xdf\x3e\x5a\x18\xfc\x3a\x88\x59\x5e\x49\xeb\x14\xbd\x13\x13\xce\x6e\x51\x48\xdf\x27\x3a\x2a\xd9\x4e\xf4\x1b\xb5\xcb\x87\x19\x5d\xfd\xed\xd9\x51\x1e\x66\xc7\x9e\x7b\x66\x6e\x6b\xdf\x6c\x54\x62\xee\xd9\x6d\xaf\xc5\xd4\xdc\xfd\x36\x79\x85\x6b\x52\x65\xf2\x9d\x48\x51\x04\x29\x27\x35\x03\xc0\xd5\x08\x65\x1b\x58\x53\xcc\xd2\xd2\x05\x6b\x62\x02\xe4\x70\xc3\xf8\x0c\xe7\x0b\xf8\xf4\xd9\x1c\xd0\x9d\x44\xe3\xc8\xad\x72\x9d\x92\xe6\x9d\x15\xab\xa9\x03\xca\x6e\xc1\xe2\xca\x9c\xe6\x94\x0a\xcf\x99\xf0\xc0\x35\x26\x32\x26\x71\x00\xbe\x35\x6e\x2d\xed\xaf\x6a\x6f\xb1\xe7\x0b\xa0\xcc\x46\x80\x9f\x5a\x51\xc6\x2f\xce\xcf\xce\xd8\x9a\xc7\x5e\x5d\x65\x2a\x2b\x57\x0e\x8c\xd5\x03\xdd\x3a\x20\x57\x53\x94\xe0\xa4\xbb\xcc\x9d\xd5\xe3\x87\x99\x2d\xa4\xaa\x44\xc9\xbc\xdd\xfa\x8e\xd8\xef\x80\xed\x16\x72\x72\x83\x6a\x92\xae\x35\x67\xaa\xf4\x72\x9a\x28\xa3\x6b\x4e\x6e\x85\xb2\xc9\xe5\x97\x92\xb3\x55\x74\x14\xc1\x95\xfe\xe7\x4f\x2d\xbf\xb5\x7f\x74\x69\x56\xa9\x8a\x38\x7e\x5b\x49\xbc\xb3\x3e\xfb\x03\xbf\x8d\xd8\xc4\x9d\x44\x2a\xeb\x0e\xe7\x10\x25\x97\xf6\xe9\x08\xe0\x7c\xb1\x1f\xa4\x13\xce\x3f\xef\x9b\xdb\xc6\xb8\x6f\x8c\xd5\x9e\x88\x58\xee\xee\x0a\x57\xc8\xea\x32\x57\x39\x8a\x8b\xb6\x64\x6f\x7c\x74\xc6\xa8\xa4\x24\xa3\xff\x51\x7d\xc0\x9e\xfd\xe2\xd5\xae\x5a\x8e\x00\xb6\xc3\xbf\x67\x07\xf5\xd6\x30\x43\xf5\xa8\xdb\x42\x7b\xed\xb9\x80\xef\x52\xa6\xc0\x4e\x9d\xe2\x92\x6d\x27\xfb\x99\xc2\x3c\x90\xf4\x97\x12\x2a\x46\xbf\x56\xae\x1a\x53\x6b\x0e\x94\x5e\x2d\x99\x2f\x20\xcc\x78\xa6\x90\x35\x6b\x3d\x69\x9c\x3b\x5c\xc6\x8e\x1b\x06\xed\x24\x75\x4c\xab\xc3\x0c\x53\x17\xbb\xae\xbb\xc1\xac\xc4\x2e\x44\x14\xb5\xc3\xc6\x67\xc6\x04\x17\x28\x3d\xbe\x25\xca\xc7\x31\x41\xc0\x66\x4e\x53\x6b\x86\xc5\x44\x3b\x4c\x33\x00\x9c\x00\x4d\xfb\xd5\xec\x4b\xeb\xd7\x44\xa4\x09\x4f\x31\xed\x26\x78\x9d\x74\x26\xab\xd6\x93\xd5\x27\xe6\xf5\x7d\x27\xb0\x6b\x45\x06\x4e\xe2\x49\xd2\x69\xf1\x7e\xf0\x23\xd7\x77\xbc\x51\xe0\x15\x96\x89\xa0\x85\xb4\x76\x52\x46\xe2\x49\x58\x9d\xf0\xa4\xd2\x39\x40\xcf\x51\x95\x51\x1b\xa5\x53\xbd\xf6\x8a\x27\x3d\x9b\xf1\x48\x09\x83\x5f\x07\xe5\x89\x3e\x31\x9e\xf2\xe4\x73\xd4\xdd\x5e\x9a\x7c\x61\x6e\x1b\x82\x6d\x18\x4e\xbb\x54\x16\x28\x93\x7f\x92\xe4\x46\xd2\xe4\xa6\xdc\xa3\xf8\xe5\x6e\x20\x7b\x75\x80\xd6\x72\xca\xbe\xd3\x22\xed\x68\x6a\xc5\x59\xe7\x32\xbe\x28\x04\x65\x72\x3d\x8f\xfe\xf1\x53\xb9\xfa\xa9\xfc\x2d\x52\xc5\x7a\x9b\x6f\xb5\x17\x5b\x92\x49\x62\x8b\x99\x7f\xdf\x33\x56\x0a\x98\x4a\x40\x79\xf9\x77\x94\xaa\x0f\x34\x5e\xfd\x1d\xa5\x92\x7d\x67\x13\xfb\x9e\xee\x9d\x60\x77\xa9\xc0\x04\xe9\x6d\x37\x07\x3d\xdb\x63\x8c\x01\x8e\xf3\x45\xc8\xc7\x5d\xd3\x84\xb6\x32\x29\x68\x27\xe7\x06\xe5\x99\x0b\x66\x5f\xcd\x8b\x01\x35\x9b\x54\xbb\xa1\xb7\xc8\xbe\xb3\xa6\x03\x4c\xe7\xde\xb6\xec\xd5\xb9\xc9\xc7\xfd\xda\xc2\x09\x78\x08\x41\x44\x86\x57\x56\x1f\x49\x46\x53\x22\xf5\x39\x42\x53\x34\x8a\x26\x95\x10\xc8\x24\x50\xb6\xe6\x22\x37\x9b\xb7\x94\x5c\x60\xaa\x32\xa7\x69\x8c\x4d\x9d\x51\x09\x9c\x9e\x7e\x2d\x2b\x55\x1a\x08\xc1\x85\xd3\x40\x7f\x94\x61\x73\x75\xaa\x69\x5b\xb7\x25\xbf\x56\x54\x60\x7a\xba\x6f\x62\xdf\x85\xea\xde\x48\x6f\x0f\x33\x7d\x3b\xf5\x41\x10\x56\x52\xa5\x75\x30\x16\x9f\xde\x15\xbc\xc4\xb6\x12\xb6\xe4\xf7\x56\xa6\x70\xb6\x4a\x48\xda\x41\x91\xd9\xc5\x91\x1b\x56\x63\x42\x84\xa2\x3b\x7b\x38\x28\x9b\x01\xc2\x8c\x3c\xe0\xdf\xc5\xaf\x1a\xef\xff\x4e\x80\xd1\xcc\xeb\x2d\x3b\xa6\x6a\xda\xcc\x90\xbe\x54\x8b\x5d\xc3\x19\xa6\xfb\x5e\x65\x24\xcd\xf1\x20\x55\x3e\xd0\x1c\x7f\x44\x45\xf0\x4e\xa2\x60\x24\x3b\x48\x99\x53\xbb\xe8\x7f\xac\xd0\xa0\x7a\xf1\x8b\x2c\xe3\xdf\x30\x7d\x79\xcd\x69\xd2\x5e\x87\xef\x53\xcd\x84\xda\x19\xd3\xd7\x1f\x1d\xb5\x4c\xe4\xce\x07\xb4\x5b\xb6\x05\x88\x5a\xf7\x85\x53\xb6\x23\xc0\x65\xb4\x84\xe8\x52\xa1\xd5\x4b\x9d\x86\x5e\x54\x92\x6f\x90\xa1\x20\x52\xef\x98\x21\x1b\x61\xc7\x36\x78\x80\x93\x5b\x21\x88\x98\x64\x83\x73\xa2\x72\x3f\x9b\xe6\xd5\xa5\x2e\x08\xba\x3c\x2e\x8d\x7a\x5e\x2e\x78\x0c\xcd\x36\x12\xe2\xb7\xe4\xee\x0d\xb2\x8d\xbc\x86\xe7\x53\x74\x7b\x4b\xee\x68\x5e\xe5\x66\xc9\x54\x0d\x15\xb5\xe5\xa3\x28\x6b\x92\x95\xf8\x68\x2a\x51\x76\x90\x4a\x94\x3d\x50\xa5\x86\xcf\xe3\xab\x44\xee\xf4\x93\x14\x3c\x8f\x9f\x0f\x1d\x0c\xeb\x8c\x13\x39\x29\xff\x58\x27\xbe\x56\x0b\x0e\xf4\xe1\x47\xfb\x60\xf5\xfd\xf4\xb5\x15\xf2\x54\xa1\xcf\xd8\x64\x91\x29\x93\xf3\x8e\xd8\x8b\xef\xed\xa7\xb1\x40\xfc\x9e\x5e\x33\x71\x7a\xb8\xd7\x9c\x14\x8f\xe0\xb5\x89\x32\x3f\xc4\x69\xad\xd4\x8f\xec\xb4\xe9\x5f\x4e\xdd\x0c\x59\xe7\x74\x5d\xc0\x6f\xf0\xbc\x11\xc9\xb6\x0b\xe1\x14\xff\x16\xde\x62\x60\xcf\xda\x66\x35\xee\xac\x72\x7d\x26\xcd\xdc\xc5\x4d\x81\x09\x5d\xd3\x44\xd7\xd1\xaf\xb9\x68\xaa\xd2\xa0\x81\x6a\xa8\xc1\xf4\xa6\x67\x36\xbd\x47\xfb\xc4\xae\xaf\xfd\x6e\xf0\xde\x55\xdf\x63\xdd\xe5\x90\x0c\x73\x0d\xe4\xee\x78\xda\xd0\x18\x10\x47\x97\xec\x74\x0d\xb7\x4b\xe0\x37\x2a\x98\xf6\xb1\x6d\xcb\xef\xb7\xa4\xf8\xa4\x18\x7d\xfe\x55\x2d\xdb\xfa\x76\xba\x9d\x59\xcb\x1d\x1f\xc3\xbf\x11\x12\x5e\x65\xa9\xae\xc8\xd7\x94\xa5\x40\xe5\x12\x4a\x0e\x19\xca\x5f\x4a\x48\xae\x31\xb9\x01\x6e\x1f\x53\xf9\x37\x14\x90\x90\x12\x81\xb2\x14\xef\x30\x85\xb2\xc0\x04\x72\x52\xcc\x26\xdd\x30\xbe\x51\x00\x2f\x49\x89\x3d\x62\xba\xe7\xc1\x5e\x23\x94\x81\xdf\xd6\x55\x96\x79\x7e\x29\xc3\x99\x39\x29\x26\x7a\x68\x80\xd7\x7c\xa1\x30\x3e\x19\x07\x7d\x9e\xe6\x9f\x09\xca\x07\x3a\xcf\xc6\x7f\xbd\x10\xcc\xdf\x79\xba\x20\x85\x7e\xb8\x68\x8c\xa0\x82\x76\x1f\xda\xf8\xaf\x1b\x42\x7e\x27\x87\xd8\x40\x9b\xa0\xfd\xe9\xc8\xc4\x4e\x30\xea\xcb\x73\xd1\x6a\x74\x47\xb8\x84\x60\x6f\xa4\x7a\xab\x50\x00\x9f\xba\xda\x2d\x25\x55\x25\xe9\xe1\x78\x59\xcd\x5b\xaa\x6b\xeb\xd5\x40\xcd\x7f\x54\xd7\x07\xd5\xe5\xed\xe1\xd0\x2c\xab\x9b\x0c\xba\xec\xea\xd4\x29\xdf\x9d\x64\x3e\x79\xd5\x5b\xe8\x0f\x6a\xe5\xa0\x7b\x6f\xc6\x01\x02\xf2\x6a\xc0\x39\xe3\xe0\x02\xb5\x8f\xde\xb1\xec\xde\xc3\xf6\xa8\x46\xea\xce\xbc\x51\xdc\xe0\x2a\xb8\x19\xf5\xa9\x06\xb7\x33\x6f\x2a\xae\x3b\x50\x9b\xd1\xa1\x1e\xf6\xa8\xcb\x5b\xaf\x6c\x42\xa4\x03\xa7\x24\xf2\x1e\x96\x0c\xc5\x06\x01\xa3\x59\xaf\xf7\xf5\x70\xc8\x9d\x55\xf9\x03\x38\x0f\x5f\x81\xf5\xb9\x76\xbb\x85\x84\x14\x54\x6a\x49\x61\x6e\x52\x7d\x80\xba\x78\xa0\xf8\xee\x5a\xe6\x10\x05\x8e\xea\x3a\xf2\xdc\xe9\xb4\x8a\x26\xf2\x3f\x90\x55\x0f\xa7\x80\x11\xf4\x73\xea\xc6\xd3\x40\x80\x15\x02\x93\x70\x17\xb7\x34\x17\xb4\xde\x9c\x09\x21\x1b\x3c\x01\x38\xc8\x86\xb8\xea\xb9\x48\xef\xdc\x9e\x8f\xf2\xf0\x6e\xe0\xcc\x80\x25\x18\x79\xdb\xd1\x51\xa0\xd7\x34\x93\x28\xf4\x8f\x64\x9a\xb1\x96\x66\xe0\x82\x39\xe3\x88\x5c\x20\xdd\xb0\x7f\xa1\x97\x5f\x5a\x9a\x45\xf4\xe7\x4c\x41\xcc\x89\x0c\xd0\x72\x22\x6d\x0a\x6c\x06\xc7\x73\x5f\x7b\x81\x6f\xe8\xe6\xdb\x48\xd4\x8c\x8d\xa2\x78\x0f\x7c\xcd\x58\x4b\x33\x68\xc1\x9c\x71\x44\x55\xab\x79\x60\xea\xd3\xe2\xd8\x91\x51\x08\xff\x8e\xc2\x0e\x35\xa4\xd5\xee\x2d\xc6\x04\xb8\x4e\xc6\x75\x94\xd5\x4e\x3b\x3d\x8a\xe5\xdd\x35\x38\x30\x47\x5a\xed\xde\x46\x4c\x80\xeb\x8a\x66\x29\xab\x9d\x9e\x71\x0c\x2b\x3c\x60\xbd\x73\x75\xf2\x71\xaa\xcf\xb1\x70\xf7\x34\x24\x23\x8f\x3f\x63\x14\xee\x5c\xd0\x9c\x88\xfb\x60\xef\xb4\x34\x03\x18\xcc\x19\x45\x7c\x8f\x24\x0d\xcf\x7a\x47\x59\xd9\x7b\xba\x66\x7c\x02\x56\x78\xbf\xaf\xb0\x0c\x65\xd5\xbd\xf3\x1b\xc5\xba\xe8\xec\xc5\x0b\x6f\x2f\x5e\x4c\xde\x8b\x17\xe6\x01\xa6\x45\xd1\xdf\x16\xc5\x8d\x8d\xa3\x54\x57\xf6\x05\xc9\xc1\x18\x82\xfb\xdd\x6f\x33\x3c\x1e\x0f\x3b\x2f\x26\x00\x0d\xc9\x88\xe5\xcf\x18\x87\x0b\xc4\xf2\x64\x1a\x11\x48\x23\xef\xfc\x8c\xe0\xf0\xce\xef\x6f\xe8\x6a\x06\x18\xff\x4d\xed\x8d\x2d\xa3\x9e\x7a\x1b\x78\xea\x6d\x9e\x7a\x9b\xa7\xde\xe6\xa9\xb7\x19\x43\x7c\xea\x6d\x9e\x7a\x9b\xa7\xde\xe6\xa9\xb7\x79\xea\x6d\x9e\x7a\x9b\x1f\xa4\xb7\xf9\x6f\x00\x00\x00\xff\xff\x8e\x5e\xd9\x4d\xa4\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15524, mode: os.FileMode(420), modTime: time.Unix(1522190859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

