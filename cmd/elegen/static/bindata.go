// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x98\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\xd0\x6b\xd3\x45\x70\xed\x36\x68\x8a\xde\x43\x51\x6c\x18\x69\xec\xb0\x91\x48\x95\xa2\xd2\xe4\x0c\x7d\xf7\x03\xff\x49\xa4\x2c\x59\x72\xb6\xb9\xeb\x43\x5e\x82\x68\x48\xfe\xe6\x2f\x87\x33\xa4\x0b\x92\xdc\x90\x0d\xc2\x76\x0b\xf1\x05\xca\xf8\x25\x67\x6b\xba\xa9\x04\x91\x94\xb3\xf8\x0f\x92\x23\xd4\xf5\x6c\x46\xf3\x82\x0b\x09\xf3\x19\x00\x40\xb4\xce\x65\x64\xfe\x2b\xef\x59\x12\xcd\xcc\xff\x1b\x2a\xaf\xab\xab\x38\xe1\xf9\x31\x29\xb8\x40\xc9\x8f\x28\x4b\x8e\x31\xc3\x1c\x99\x24\x99\x59\xb2\xdd\x82\x20\x6c\x83\x10\x5f\x14\x98\xc4\x1f\xee\x0b\x3c\x17\xfc\x96\xa6\x28\x4a\x38\xaa\x6b\x83\xa5\xc4\x81\xba\x6e\x96\x20\x4b\xf5\xe0\x62\x36\x9b\x35\x08\xcf\xe8\x12\x9e\x21\xab\x72\x58\x9d\x40\x7c\xca\xaa\xbc\x54\xc2\x1e\x1f\xab\x15\x7a\x40\xc3\x43\x5d\x83\xc0\x42\x60\x89\x4c\x96\x20\xaf\x11\x0a\x5e\x96\xf4\x2a\x43\xb8\x25\x59\x85\x25\xac\xb9\x00\x22\xa5\xa0\x57\x95\x44\xcd\xdd\x2c\x7f\xe1\x68\xd6\x10\x51\x3c\x93\x0a\x71\x07\xbf\x94\x82\xb2\xcd\x6c\x96\x70\x56\x3a\x33\x6d\xb7\x47\x4e\x50\x46\x72\x5c\xc2\x33\xcd\x4d\x09\x6b\x16\x7f\x34\xcc\xad\xce\x56\x6c\x66\x38\x75\x25\x36\x4b\xd5\x04\xf3\x5f\x5d\xc7\xce\x36\xcd\x92\x1d\xa9\x4e\x8c\x2a\x6e\x45\x60\x4d\x6d\xcc\xf6\x7f\x6b\x35\xe3\x94\xb7\x3c\xc5\x2c\x3e\x65\x92\xca\x7b\xab\xf9\x59\x8a\xfa\xb3\x2b\x57\x43\xe7\x6b\xfd\xcd\xaf\xbe\x60\x22\xe3\xd9\x2d\x11\xd3\xf0\x4e\xa0\x09\x90\xb8\x21\x6e\xb5\xa4\x6a\xea\x0a\x9a\x78\xf0\xa0\xde\x63\x29\xd5\x68\x5d\x47\x4b\x3d\xf5\x25\x91\xb8\xe1\xe2\x7e\xd5\x37\x95\x57\x22\x69\x3c\x68\xe6\x9f\x0b\x7a\x4b\xa4\x42\xef\x4c\xb7\x03\x75\xbd\x9c\xd5\x26\xd6\xe8\x1a\x18\x97\xc1\xa4\xb3\xf2\x3d\xe7\xb2\x8d\xb5\x7e\x2d\xcf\xb3\x4a\x90\x0c\xea\xfa\x0d\x2d\xa5\x6f\x37\x02\x99\xa2\xf0\xf5\x84\xb5\x4d\xbc\x4d\xe1\xf1\xe9\xf3\xdf\x07\x67\x5a\x1f\xbf\xe4\x4c\x22\x93\x9e\x3b\x65\x25\x98\xf1\x25\xed\xf5\x65\x09\x94\xe9\x4f\x25\x74\x3c\x5b\x57\x2c\x81\x39\x9f\x28\xd2\xa2\xcb\x70\xbe\xe8\xf7\xb7\xf6\x8a\x11\x66\x18\xba\x0d\x9b\x99\xd3\xa6\x68\x55\x20\x50\x70\xca\x24\x0a\x90\x1c\x08\x24\x6a\x4c\xc9\x3d\x4d\xd2\x87\x68\x56\x84\xea\x04\xaa\xae\x29\x51\x09\xc6\x6a\xa6\x85\x59\x9d\x00\x29\x0a\x64\xe9\x7c\x1a\x8b\x6d\xbd\x04\x1e\xc7\xf1\xc2\x37\xce\xcf\x0a\xca\xaa\xff\x42\xa3\x59\xd0\x32\xf0\x99\xe4\xfa\x93\x00\xc3\x6f\x86\xbb\x75\xea\x63\x59\xc3\xc8\x32\x77\xfc\xe3\x38\xee\xfa\xd9\x58\x64\xa2\xc1\x78\x25\xff\xa2\xbd\x54\x4e\xff\x73\xa9\x0c\xa2\x80\x4c\x22\x76\xd2\x99\xfc\xe2\xf8\x34\x6c\x78\x25\xf5\x82\x78\xbe\x6f\x1f\x2d\x0c\x7e\x1d\xc4\x2c\xaf\xa4\x75\x8a\xde\x89\x09\x67\xb7\x28\xa4\xef\x13\x1d\x95\x6c\x27\xfa\x8d\xda\xe5\xc3\x8c\xae\xfe\xf6\xec\x28\x0f\xb3\x63\xcf\x3d\x33\xb7\xb5\x6f\x36\x2a\x31\xf7\xec\xb6\xd7\x62\x6a\xee\x7e\x9b\xbc\xc2\x35\xa9\x32\xf9\x4e\xa4\x28\x82\x94\x93\x9a\x01\xe0\x6a\x84\xb2\x0d\xac\x29\x66\x69\xe9\x82\x35\x31\x01\x72\xb8\x61\x7c\x86\xf3\x05\x7c\xfa\x6c\x0e\xe8\x4e\xa2\x71\xe4\x56\xb9\x4e\x75\xf2\xce\x8a\xd5\xd4\x01\x6d\x89\xd2\x1c\x4b\xe1\xc1\x12\x9e\xb0\xc6\x26\xc6\x06\x1f\x51\x94\x94\xb3\x40\xfd\x5b\x4b\xfb\xab\xea\x5a\xec\xf9\x02\x28\xb3\x2e\xf7\x73\x29\xca\xf8\xc5\xf9\xd9\x19\x5b\xf3\xd8\x49\x51\x6b\xb1\xbc\xf3\x7f\xac\x00\xe8\x1e\xfc\xb9\x9a\xa2\x04\x27\xdd\x65\xee\x70\x1e\x3f\xbd\x6c\xe5\x54\x25\x4a\xe6\xed\xd6\xb7\x7c\xc7\xe2\xdb\x2d\xe4\xe4\x06\x15\x55\x17\x86\x33\x55\x5c\x39\xd1\x95\x95\x35\xb4\x53\x4e\x19\xe1\xf2\x4b\xc9\xd9\x2a\x3a\x8a\xe0\x4a\xff\xf3\xa7\x16\xd8\x1a\x3c\xba\x34\xab\x54\xf9\x1a\xbf\xad\x24\xde\x59\x27\xfd\x81\xdf\x46\x8c\xe0\xce\x1a\x95\x57\x87\xb3\x84\x92\x4b\x3b\x71\x04\x70\xbe\xd8\x0f\xd2\x09\xd8\x9f\xf7\xcd\x6d\xa3\xd8\x37\xc6\x6a\x4f\x08\x2c\x77\xe3\xde\x95\xaa\xba\x90\x55\x9e\xe1\x42\x57\xd7\xa1\x53\xce\x18\x95\x94\x64\xf4\x3f\x7e\xd1\xde\x29\x47\x35\xe3\x00\xa7\xc3\xb0\x67\x8f\xf4\x96\x25\x43\x25\xa6\xdb\x24\x7b\x0d\xb8\x80\xef\x52\x79\xc0\x4e\xe9\xe1\xf2\x67\x27\xa1\x99\x5a\x3b\x90\xf4\x97\x12\x2a\x46\xbf\x56\xae\xc0\x52\x6b\x0e\x94\x5e\x2d\x99\x2f\x20\x4c\x62\xa6\x36\x35\x6b\x3d\x69\x9c\x3b\x5c\x12\x8e\x1b\x06\xed\x24\x75\xf2\xaa\xf3\x09\x53\x17\xac\xae\x61\xc1\xac\xc4\x2e\x44\x14\xb5\xc3\xc6\x67\xc6\x04\x17\x28\x3d\xbe\x25\xca\xc7\x31\x41\xc0\x66\x4e\x53\x6b\x86\xc5\x44\x3b\x4c\x33\x00\x9c\x00\x4d\xfb\xd5\xec\x4b\xdc\xd7\x44\xa4\x09\x4f\x31\xed\xa6\x70\x9d\x65\x26\xab\xd6\x93\xb7\x27\x66\xee\x7d\x87\xaa\xeb\x2e\x06\x0e\xd7\x49\xd2\x69\xf1\x7e\xb4\x53\xd4\xf7\xb4\x91\xf8\x15\x96\x89\xa0\x85\xb4\x86\x51\x56\xe1\x49\x58\x61\xf0\xa4\xd2\x9b\x5e\xcf\x51\xd5\x4d\x1b\x96\x53\xdd\xf4\x8a\x27\x3d\xbb\xef\x48\x09\x83\x5f\x07\xe5\x89\x3e\x31\x9e\xf2\xe4\x73\xd4\xdd\x4f\x9a\x7c\x61\x6e\x0c\x82\x7d\x17\x4e\xbb\x54\x16\x28\x93\x7f\x92\xe4\x46\xd2\xe4\xa6\xdc\xa3\xf8\xe5\x6e\xe4\x7a\x47\xbb\xd6\x72\xca\x46\xd3\x22\xed\x68\x6a\xc5\x59\xe7\x32\xbe\x28\x04\x65\x72\x3d\x8f\xfe\xf1\x53\xb9\xfa\xa9\xfc\x2d\x52\x05\x77\x9b\x60\xb5\x17\x5b\x92\xc9\x5a\x0b\xeb\xb9\x81\xd3\xdd\x1c\xee\xca\xad\xbf\xa3\x54\xcd\x9b\x71\xe3\xef\x28\x95\xb0\x3b\xdb\xd4\x77\x6d\xef\x04\xbb\x0f\x05\x26\x48\x6f\xbb\x59\xe6\xd9\x1e\xed\x07\x38\xce\x17\x21\x1f\x77\xb7\x12\x1a\xc7\x24\x99\x9d\xac\x1a\x94\x58\x2e\x7a\x7d\x35\x2f\x06\xd4\x6c\x92\xe9\x86\xde\x22\xfb\xce\x9a\x0e\x30\x9d\x7b\xfb\xb0\x57\xe7\x26\xe3\xf6\x6b\x0b\x27\xe0\x21\x04\x21\x18\xde\x33\x7d\x24\x19\x4d\x89\xd4\x27\x05\x4d\xd1\x28\x9a\x54\x42\x20\x93\x40\xd9\x9a\x8b\xdc\xec\xd6\x52\x72\x81\xa9\xca\x8d\xa6\x9b\x35\x95\x44\x25\x70\x7a\x82\xb5\xac\xd4\xe1\x2f\x04\x17\x4e\x03\xfd\x51\x86\x1d\xd1\xa9\xa6\x6d\xdd\x1e\xfc\x5a\x51\x81\xe9\xe9\xbe\x89\x7d\x17\x9a\x61\x68\xb7\xe7\x93\xbe\x43\xfa\x20\x08\x2b\xa9\x52\x33\x18\x8b\x4f\xef\x0a\x5e\x62\x5b\xcd\x5a\xf2\x7b\x2b\x44\x38\x5b\xa5\x1c\xed\x91\xc8\xec\xd3\xc8\x0d\xab\x31\x21\x42\x59\x9d\x01\x1c\x94\xdd\xe3\x61\xce\x1d\x70\xe8\xe2\x57\x8d\xf7\xb7\x13\x60\x34\xf3\x3a\xc0\x8e\x6d\x9a\x66\x30\xa4\x2f\xd5\x62\xd7\x16\x86\x09\xbd\x57\x19\x49\x73\x3c\x48\x95\x0f\x34\xc7\x1f\x51\x11\xbc\x93\x28\x18\xc9\x0e\x52\xe6\xd4\x2e\xfa\x3f\x2b\x34\xa8\x5e\xfc\x22\xcb\xf8\x37\x4c\x5f\x5e\x73\x9a\xb4\xb1\xbd\x4f\x35\x13\x6a\x67\x4c\x5f\x52\x74\xd4\x32\x91\x3b\x1f\xd0\x6e\xd9\xd6\x14\x6a\xdd\x17\x4e\xd9\x8e\x00\x97\xd1\x12\xa2\x4b\x85\x56\x2f\x75\xde\x79\x51\x49\xbe\x41\x86\x82\x48\xbd\x63\x86\x6c\x84\x1d\xdb\xe0\x01\x4e\x6e\x85\x20\x62\x92\x0d\xce\x89\x4a\xf6\x6c\x9a\x57\x97\xfa\xc8\xef\xf2\xb8\x34\xea\x79\xb9\xe0\x31\x34\xdb\x48\x88\xdf\x92\xbb\x37\xc8\x36\xf2\x1a\x9e\x4f\xd1\xed\x2d\xb9\xa3\x79\x95\x9b\x25\x53\x35\x54\xd4\x96\x8f\xa2\xac\x49\x56\xe2\xa3\xa9\x44\xd9\x41\x2a\x51\xf6\x40\x95\x1a\x3e\x8f\xaf\x12\xb9\xd3\x0f\x47\xf0\x3c\x7e\x3e\x74\x30\xac\x33\x4e\xe4\xa4\xfc\x63\x9d\xf8\x5a\x2d\x38\xd0\x87\x1f\xed\xb3\xd2\xf7\xd3\xd7\xd6\xc0\x53\x85\x3e\x63\x93\x45\xa6\x4c\xce\x3b\x62\x2f\xbe\xb7\x9f\xc6\x02\xf1\x7b\x7a\xcd\xc4\xe9\xe1\x5e\x73\x52\x3c\x82\xd7\x26\xca\xfc\x10\xa7\xb5\x52\x3f\xb2\xd3\xa6\x7f\x39\x75\x33\x64\x9d\xd3\x75\x01\xbf\xc1\xf3\x46\x24\xdb\x1f\x84\x53\xfc\xbb\x72\x8b\x81\x3d\x6b\x9b\xd5\xb8\xb3\xca\x75\x92\x34\x73\x77\x31\x05\x26\x74\x4d\x13\x5d\x38\xbf\xe6\xa2\x29\x43\x83\x8e\xa9\xa1\x06\xd3\x9b\xae\xd8\x34\x1b\xed\x43\xb8\xbe\xc9\xbb\xc1\x7b\x57\x6e\x8f\xf5\x8f\x43\x32\xcc\x35\x90\xbb\xb6\x69\x43\x63\x40\x1c\x5d\xa3\xd3\x35\xdc\x2e\x81\xdf\xa8\x60\xda\xc7\xb6\xad\xb7\xdf\x92\xe2\x93\x62\xf4\xf9\x57\xb5\x6c\xeb\xdb\xe9\x76\x66\x2d\x77\x7c\x0c\xff\x46\x48\x78\x95\xa5\xba\x22\x5f\x53\x96\x02\x95\x4b\x28\x39\x64\x28\x7f\x29\x21\xb9\xc6\xe4\x06\xb8\x7d\xf2\xe4\xdf\x50\x40\x42\x4a\x04\xca\x52\xbc\xc3\x14\xca\x02\x13\xc8\x49\x31\x9b\x74\x69\xf8\x46\x01\xbc\x24\x25\xf6\x88\xe9\x1e\xf1\x7a\x8d\x50\x06\x7e\x5b\x57\x59\xe6\xf9\xa5\x0c\x67\xe6\xa4\x98\xe8\xa1\x01\x5e\xf3\x85\xc2\xf8\x64\x1c\xf4\x79\x9a\x7f\x26\x28\x1f\xe8\x3c\x1b\xff\x8d\x41\x30\x7f\xe7\xbd\x81\x14\xfa\xb5\xa1\x31\x82\x0a\xda\x7d\x68\xe3\xbf\x41\x08\xf9\x9d\x1c\x62\x03\x6d\x82\xf6\x07\x1e\x86\xc5\x05\x57\xe9\x6b\xb7\x01\x8c\xfa\xd2\x5b\xb4\x1a\xdd\x08\x2e\x0f\xd8\xab\xa6\xde\xe2\x13\xc0\xa7\xae\x76\x2b\x48\x55\x40\x7a\x38\x5e\x32\xf3\x96\xea\x92\x7a\x35\x50\xea\x1f\xd5\xf5\x41\xe5\x78\x7b\x26\x34\xcb\xea\x26\x71\x2e\xbb\x3a\x75\xaa\x76\x27\x99\x4f\x5e\xf5\xd6\xf7\x83\x5a\x39\xe8\xde\x3b\x6e\x80\x80\xbc\x1a\x70\xce\x38\xb8\x40\xed\xa3\x77\x2c\xbb\xf7\xb0\x3d\xaa\x91\xba\x33\x6f\x14\x37\xb8\xd4\x6d\x46\x7d\xaa\xc1\xed\xcc\x9b\x8a\xeb\xce\xd1\x66\x74\xa8\x75\x3d\xea\xf2\xd6\x2b\x9b\x10\xe9\xc0\x29\x89\xbc\x37\x21\x43\xb1\x41\xc0\x68\xd6\xeb\x7d\x3d\x1c\x72\x67\x55\xfe\x00\xce\xc3\x57\x5d\x7d\xae\xdd\x6e\x21\x21\x05\x95\x5a\x52\x98\x9b\x0c\x1f\xa0\x2e\x1e\x28\xbe\xbb\x8d\x39\x44\x81\xa3\xba\x8e\x3c\x77\x3a\xad\xa2\x89\xfc\x0f\x64\xd5\xc3\x29\x60\x04\xfd\x9c\xba\xf1\x34\x10\x60\x85\xc0\x24\xdc\xc5\x2d\xcd\x05\xad\x37\x67\x42\xc8\x06\x77\xfb\x0e\xb2\x21\xae\x7a\x6e\xc8\x3b\xd7\xe2\xa3\x3c\xbc\x8b\x37\x33\x60\x09\x46\xde\x76\x74\x14\xe8\x35\xcd\x24\x0a\xfd\x0b\x96\x66\xac\xa5\x19\xb8\x60\xce\x38\x22\x17\x48\x37\xec\x5f\xe8\xe5\x97\x96\x66\x11\xfd\x39\x53\x10\x73\x22\x03\xb4\x9c\x48\x9b\x02\x9b\xc1\xf1\xdc\xd7\x5e\xd4\x1b\xba\xf9\x36\x12\x35\x63\xa3\x28\xde\x53\x5d\x33\xd6\xd2\x0c\x5a\x30\x67\x1c\x51\x95\x68\x1e\x98\xfa\xb4\x38\x76\x64\x14\xc2\xbf\x9a\xb0\x43\x0d\x69\xb5\x7b\x79\x31\x01\xae\x93\x71\x1d\x65\xb5\xd3\x45\x8f\x62\x79\x57\x0c\x0e\xcc\x91\x56\xbb\x97\x10\x13\xe0\xba\xa2\x59\xca\x6a\xa7\x55\x1c\xc3\x0a\x0f\x58\xef\x5c\x9d\x7c\x9c\xea\x73\x2c\xdc\x3d\x0d\xc9\xc8\xe3\xcf\x18\x85\x3b\x17\x34\x27\xe2\x3e\xd8\x3b\x2d\xcd\x00\x06\x73\x46\x11\xdf\x23\x49\xc3\xb3\xde\x51\x56\xf6\x7a\xae\x19\x9f\x80\x15\x5e\xeb\x2b\x2c\x43\x59\x75\xaf\xfa\x46\xb1\x2e\x3a\x7b\xf1\xc2\xdb\x8b\x17\x93\xf7\xe2\x85\x79\x68\x69\x51\xf4\xb7\x45\x71\x63\xe3\x28\xd5\x95\x7d\x29\x72\x30\x86\xe0\x7e\x94\xdb\x0c\x8f\xc7\xc3\xce\x43\x09\x40\x43\x32\x62\xf9\x33\xc6\xe1\x02\xb1\x3c\x99\x46\x04\xd2\xc8\x3b\x3f\x08\x38\xbc\xe1\xfb\x1f\x34\x33\x03\x8c\x1f\xb7\xab\xb1\xd5\xd3\x53\x4b\x03\x4f\x2d\xcd\x53\x4b\xf3\xd4\xd2\x3c\xb5\x34\x63\x88\x4f\x2d\xcd\x53\x4b\xf3\xd4\xd2\x3c\xb5\x34\x4f\x2d\xcd\x53\x4b\xf3\x83\xb4\x34\xff\x0d\x00\x00\xff\xff\x97\xde\x47\x7e\x03\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15363, mode: os.FileMode(420), modTime: time.Unix(1522091354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

