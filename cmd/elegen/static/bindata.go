// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcf\x6b\xe3\x3a\x10\xbe\xfb\xaf\x18\x42\x79\x38\xd0\x38\x97\xc7\x3b\x14\x7a\x28\xe5\x15\x02\xdb\x52\x5a\xd8\x4b\xe9\x41\x75\xc6\xee\xb0\xb2\x14\xa4\x49\xbb\x45\xf8\x7f\x5f\xfc\x43\xb2\x93\x38\x5e\xef\xa6\xbb\x39\xd9\xf2\xcc\x37\x9f\xe6\xfb\x46\xca\x46\xa4\xdf\x44\x8e\xe0\x1c\x24\x8f\xc8\xc9\xb5\x56\x19\xe5\x5b\x23\x98\xb4\x4a\xee\x44\x81\x50\x96\x51\x44\xc5\x46\x1b\x86\x59\x4e\xfc\xba\x7d\x49\x52\x5d\x2c\xc5\x46\x1b\x64\xbd\x20\x95\x2e\x51\x62\x81\x8a\x85\x9c\x45\x51\xb6\x55\x29\x90\x22\x8e\xe7\xe0\x22\x00\xa8\xb0\x8d\x50\x39\x36\x15\x1e\x37\x98\x52\x46\x69\x5d\xc1\x56\xe8\x55\x4c\x40\x48\x1e\x30\x27\xcb\x68\x56\x6b\x54\x4c\xfc\x11\x3b\x97\xfc\x5f\x3f\x55\x6c\xca\xd2\xaf\xcf\x9d\x03\x54\xeb\x0a\xa0\x8c\xa2\xe5\x12\x6e\xf5\x1a\xe5\x57\x34\x96\xb4\x02\x83\xbc\x35\xca\x02\xbf\x22\xa4\x5b\x63\x50\x31\xbc\xb5\xdf\x74\x56\x2f\x17\x55\x7c\xd2\xf0\xed\xe7\xc6\x73\xc8\xa4\x16\xfc\xdf\xbf\xe0\x5a\x9c\xd0\x9e\xab\xfb\xd5\x4a\x65\x3a\xf1\x65\xca\x12\x9a\xe2\x0d\xab\x8c\xc4\x8b\xc4\x1b\x1d\xc8\x07\x1e\x02\x14\xbe\x03\x29\xcb\x42\xa5\xe8\x29\xf4\xb3\x20\xd3\xa6\x5e\xcc\xe9\x0d\x15\x90\x47\x50\xa2\xc0\x96\xe5\x91\x22\x71\x88\xb5\x6c\x48\xe5\xf3\x5e\x37\xfb\x29\x2e\x8a\x00\xec\x3b\x71\xfa\xda\xc1\x4f\x97\x08\x20\x15\xb6\x71\x4a\xa7\x07\x74\x82\xd4\x6e\xb9\x68\x43\xc1\x77\xee\x0e\xdf\x0f\x32\xe2\x79\x5b\x74\xe1\x15\xac\x5e\xd7\x98\x89\xad\x64\x8f\xd0\xe6\x2b\x92\x11\x80\xd7\x78\xaf\x03\xd7\x82\x31\xd7\xe6\x84\x36\xa7\x1e\xe1\x78\x9b\x7d\x91\x38\xc4\x4e\x6f\x73\x48\xf9\xc4\x36\x7b\x3e\x7f\xb8\xd5\xd7\x5a\x31\x2a\xfe\x75\x63\x8b\xa1\xd4\x09\xee\x1e\x2f\x38\x66\xf2\x81\xcc\x93\xbd\xee\x1c\x50\x06\x4a\x33\x24\x2b\xfb\xa0\x35\xc3\xe2\xa4\x39\xf8\x67\x37\xfe\x5e\x6e\x8d\x90\x50\x96\x5f\xc8\xb2\xeb\x8a\xee\xc8\xf4\x69\xaa\x4d\x98\x93\x29\xaa\x0d\x0d\xcb\x78\xc1\xb1\x99\xf9\x89\x6a\xbf\x35\x3a\x27\xa8\x76\x74\xac\xfe\x92\x72\x57\x52\xb6\x5c\x08\x6d\x27\x94\x94\x80\xdf\xc9\x32\xa9\xdc\x1b\x99\xd0\xb6\xcd\xdf\xc9\x89\xe7\xf0\xf4\xbc\x7f\x24\xd5\xae\x8f\x42\xc9\xa1\x00\x17\x18\x4f\x6b\xf0\x70\xff\xce\x0f\xf7\x5d\xef\xec\x4d\x18\x10\x92\x84\x45\x7b\x2b\x36\x70\x09\x85\xd8\x3c\x35\x66\x18\x26\x3b\x91\x4a\x15\x74\x86\x1d\x93\x8b\xcb\x1d\x62\x8b\x10\xd6\x42\x9d\xd1\x39\x9c\xd5\x44\xea\xd0\xab\x86\x92\x47\x9b\x39\xe7\xbf\x96\xe5\xec\xa2\x4a\xeb\x83\x8f\x6e\xb3\xf7\xd2\xbf\xa4\xf8\xe3\xc6\xe8\xa2\xae\xb3\xf3\x6f\x24\x6c\x55\x58\xab\x53\x12\x8c\x6b\x60\xdd\x9b\xb2\x9a\xc6\xce\x55\xd4\x83\x8a\x1b\x92\xc7\x6e\xa0\x3d\xb9\xbb\xc6\x3f\xd5\x8f\xcf\xc1\x6b\xf5\xfa\xe0\x79\x2e\x65\xcd\xa5\x4d\x3d\x72\x6e\x07\xff\xed\xe3\x74\xc7\xf4\x21\xb5\xca\x9f\x0d\x71\x18\x3d\x9e\x27\xa8\x3f\x3e\xcb\x7b\x73\xe6\xab\xba\xa9\x6e\x38\x74\xc4\x79\x58\xdf\x9b\xec\xea\x37\x30\xf2\x65\x4f\x84\x6a\xcc\xcb\xe8\x47\x00\x00\x00\xff\xff\x3a\xcb\x38\xd5\x69\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 2921, mode: os.FileMode(420), modTime: time.Unix(1515695604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\x50\xa4\xe9\x22\xb8\x76\x5b\xd4\xbd\xde\x43\x51\x6c\x18\x69\xec\xb0\x95\x48\x95\xa2\xd2\xe4\x0c\xfd\xef\x07\x7e\x8a\xd4\x87\x25\x67\xd3\x6d\x1f\xfc\x12\xc4\x43\xf2\x37\x9f\x1c\xce\x90\x2a\x70\xf2\x19\x6f\x01\xed\x76\x28\x5e\x83\x88\xcf\x19\xdd\x90\x6d\xc5\xb1\x20\x8c\xc6\x7f\xe0\x1c\x50\x5d\xcf\x66\x24\x2f\x18\x17\x68\x3e\x43\x08\xa1\x68\x93\x8b\x48\xff\x57\xde\xd3\x24\x9a\xe9\xff\xb7\x44\xdc\x54\xd7\x71\xc2\xf2\x53\x5c\x30\x0e\x82\x9d\x10\x9a\x9c\x42\x06\x39\x50\x81\x33\xbd\x64\xb7\x43\x1c\xd3\x2d\xa0\x78\x5d\x40\x12\xbf\xbb\x2f\xe0\x0d\x67\xb7\x24\x05\x5e\xa2\x93\xba\x56\x93\x0c\xbb\x48\x4a\x85\xea\xda\xad\x04\x9a\xaa\x39\x8b\xd9\x6c\xe6\x80\x9e\x90\x25\x7a\x02\xb4\xca\xd1\xea\x0c\xc5\x17\xb4\xca\x4b\x29\xf3\xe9\xa9\x5c\xa1\x06\x14\x17\x54\xd7\x88\x43\xc1\xa1\x04\x2a\x4a\x24\x6e\x00\x15\xac\x2c\xc9\x75\x06\xe8\x16\x67\x15\x94\x68\xc3\x38\xc2\x42\x70\x72\x5d\x09\x50\xdc\xf5\xf2\x67\x96\x66\xec\x11\xc5\x33\x21\x11\x3b\xf8\xa5\xe0\x84\x6e\x67\xb3\x84\xd1\xd2\x5a\x6b\xb7\x3b\xb1\x82\x52\x9c\xc3\x12\x3d\x51\xdc\xa4\xb0\x7a\xf1\x7b\xcd\xdc\xa8\x6e\xc4\xa6\x9a\x53\x5b\x62\xbd\x54\x4e\xd0\xff\xd5\x75\x6c\x6d\xe3\x96\x74\xa4\x3a\xd3\xaa\xd8\x15\x81\x35\x95\x31\x9b\xff\x8d\xd5\xb4\x6f\x2e\xa8\x20\xe2\xde\xe8\x7c\x99\x82\xfa\xd9\x96\xc8\xd1\xd9\x46\xfd\x66\xd7\x9f\x20\x11\xf1\xec\x16\xf3\x31\xa4\x33\xe4\x62\x23\x76\xc4\x9d\x92\x4e\x4e\x5d\x21\x15\x56\x0e\xe4\x2d\x94\x42\xd2\xeb\x3a\x5a\xaa\x49\xe7\x58\xc0\x96\xf1\xfb\x55\x38\x89\x55\x3c\x71\x9e\x5a\xce\x6a\x1d\x2b\x64\x83\x28\x13\x66\xd6\x65\xf9\x96\x31\xd1\x44\x49\x5b\xca\x37\x59\xc5\x71\x86\xea\xfa\x25\x29\x85\xaf\x31\x46\x99\xa4\xb0\xcd\xde\x55\x2e\x3a\xf6\xe3\x7e\xf8\xf8\xcf\x9e\x39\xc6\x0b\xe7\x8c\x0a\xa0\xc2\x33\xbb\xa8\x38\xd5\x36\x27\xbd\x36\x2f\x11\xa1\xea\xa7\x14\x31\x9e\x6d\x2a\x9a\xa0\x39\x1b\x15\x63\xd1\x66\x35\x5f\xf4\xfb\x45\xd9\x5c\x8b\xd1\x07\xda\x38\x76\x66\x35\x28\x1a\xb1\x31\x2a\x18\xa1\x02\x38\x12\x0c\x61\x94\xc8\x31\x29\xeb\x98\x74\x87\xe9\x51\x84\xc2\x07\x8a\x6d\x08\x96\x5b\xdd\xe8\xa1\x04\x58\x9d\x21\x5c\x14\x40\xd3\xf9\x18\xf8\xae\x5e\x22\x16\xc7\xf1\xc2\x37\xc2\xcf\x12\xc4\x28\xfb\x4c\xe1\x18\xb8\x32\xf0\x8a\x60\xea\x27\x46\x14\xbe\x6a\xbe\xc6\x6d\x8f\xa9\xbb\xe6\x3f\xb7\x3c\xe3\x38\x6e\xfb\x50\xeb\x3f\xd1\x3c\xac\x12\x0f\xb6\x8e\xcc\xa2\x7f\x2e\xa5\xfa\x12\x42\xa7\x3e\x2b\x97\xde\xdd\x96\x83\x63\xc0\x2a\xa1\x16\xc4\xf3\xfe\x1d\xb1\xd0\xc8\x75\x10\x83\xac\x12\xc6\xf8\x6a\x37\x25\x8c\xde\x02\x17\xbe\xed\x55\xac\xd1\x4e\x34\x6b\x55\xcb\x43\x4d\x2c\xff\xf6\xec\x0d\x0f\xad\x65\xbd\x3d\x33\x77\xb5\x6f\x2a\x22\x20\xf7\x6c\xb5\xd7\x4a\x72\xee\x7e\x6b\x3c\x87\x0d\xae\x32\xf1\x9a\xa7\xc0\x83\xb4\x91\xea\x01\xc4\xe4\x08\xa1\x5b\xb4\x21\x90\xa5\xa5\x0d\xc7\x44\x87\xc3\x21\x26\xf1\x59\xcd\x17\xe8\xc3\x47\x7d\x00\xb6\x92\x85\x25\x37\x6a\xb5\x8a\x80\xd7\x46\x20\x77\xce\x36\x95\x80\x3b\x02\x9a\x84\xee\x81\x98\x53\x4b\x5b\x43\x6b\xff\x1e\x78\x49\x18\x0d\x14\xbf\x35\xb4\x87\x2b\x6a\x50\xe7\x0b\x44\xa8\x71\xb3\x9f\x09\x41\xc4\xcf\xde\x5c\x5e\xd2\x0d\x8b\x2d\xff\x5a\x09\xe4\x9d\xac\xc3\x47\x6b\xfb\x48\xcd\x59\x0a\x99\x14\x16\xa3\xce\xe1\xb7\xef\x74\x31\x15\x48\x95\x48\x09\x77\x3b\xdf\xc2\x2d\xcb\xee\x76\x28\xc7\x9f\x41\x52\x55\x81\x35\x93\x45\x8a\x15\x54\x5a\xf3\x95\x14\xc1\xaa\x22\x55\xbe\xfa\x54\x32\xba\x8a\x4e\x22\x74\xad\xfe\xf9\x53\x09\x69\x0c\x1b\x5d\xe9\x55\xb2\x1a\x8c\x5f\x55\x02\xee\x8c\x33\xfe\x80\xaf\x83\x2a\xdb\x73\x41\x66\xc5\xbe\x5d\x2f\x65\x51\x0e\x1a\x04\x99\x2f\x86\x16\xb6\x02\xf0\xe7\xfe\x59\x4d\x3c\xfa\xea\xae\xf6\xb8\x74\xd9\x8d\x60\x5b\xd4\xa9\x92\x4f\xda\x9e\x71\x55\x87\x86\x66\xbf\xa4\x44\x10\x9c\x91\xff\xf9\x55\x6e\xab\x70\x53\x8c\x03\x9c\x16\xc3\x9e\x68\xef\x2d\x0f\x86\x4a\x32\x1b\xee\x03\x46\x5b\xa0\xbf\x58\x01\xa0\x4e\x09\x60\xf3\x5e\x2b\x11\xe9\x4a\x34\x90\xee\x97\x12\x55\x94\x7c\xa9\x6c\x71\x23\xd7\x4c\x96\x58\x4e\x9e\x2f\x50\x98\x7c\x74\xcd\x67\xea\xbd\x46\x0e\x6b\x7c\x9b\x36\x63\x07\xdd\x4c\x92\x27\xa3\x3c\x4b\x20\xb5\x81\x68\x0b\x79\xc8\x4a\x68\x43\x44\x51\x33\xac\x3d\xa4\x95\x5f\x83\xf0\xf8\x96\x20\x1e\x5b\xf9\x80\xc1\x9c\xa4\xc6\x00\x8b\x89\x16\x98\xa6\x3a\x3a\x43\x24\xed\x57\xb0\x2f\xd5\xde\x60\x9e\x26\x2c\x85\xb4\x9d\x74\x55\xbe\x98\xa0\x54\x4f\xa6\x9d\x98\x6b\xf7\x1d\x7d\xb6\x6a\x1f\x38\x02\x47\xe4\x52\x82\xfd\x68\x67\x9d\xef\xdd\xe7\x50\x26\x9c\x14\xc2\x18\x43\x5a\x82\x25\xe1\xd9\xcf\x92\x4a\x6d\x68\x35\x47\xd6\x1d\x4d\xf8\x8d\x3b\xe5\x39\x4b\x7a\xf6\xd7\x89\x14\x00\xbe\xf4\xc8\x10\x7d\xa0\x2c\x65\xc9\xc7\xa8\xbd\x57\x14\x79\xad\xbb\xe4\x60\x4f\x85\xd3\xae\x9c\x20\xa1\x66\x57\xdd\x40\xf4\x4e\x58\xa5\xc6\xfe\x1d\xa3\x38\x77\x54\x31\x5c\x37\xb9\x88\xd7\x05\x27\x54\x6c\xe6\xd1\xbf\x7e\x2a\x57\x3f\x95\xbf\x45\xb2\xb2\x6d\xf2\xa2\x72\x4d\x43\xd2\x89\x67\x61\xdc\x31\x70\xe0\xea\xf3\x56\xfa\xea\x77\x10\xb2\x03\xd2\x1e\xfa\x1d\x84\x14\xb3\xb3\xdf\x7c\xaf\xf5\x4e\x30\x1b\x8a\x43\x02\xe4\xb6\x9d\x28\x9e\xf4\xea\x3d\xc0\x6b\xbe\x08\x39\xd8\x0b\x83\xd0\x2c\x3a\x4f\x74\x52\x62\x50\xdd\xd8\x60\xf4\x15\x5c\x0f\x28\xe8\x32\xe1\x96\xdc\x02\x7d\x34\x1d\x07\xd8\xcd\xbd\x0d\xd5\xab\xad\x4b\x97\xfd\x7a\xa2\x33\xe4\x21\x04\x01\x17\x5e\x9b\xbc\xc7\x19\x49\xb1\x50\x09\x9e\xa4\xa0\x55\x4c\x2a\xce\x81\x0a\x44\xe8\x86\xf1\x5c\x6f\xbe\x52\x30\x0e\xa9\x4c\x6f\xba\x31\xd4\xc7\x7d\xc5\x61\x4a\x76\x34\x4c\xe4\x09\xcd\x39\xe3\x56\x76\xf5\xa3\x0c\x9b\x8e\x0b\x45\xdb\xd9\x8d\xf5\xa5\x22\x1c\xd2\x8b\x7d\x13\xfb\x2e\xe8\xc2\x40\x6e\x8e\x15\x75\x99\xf2\x8e\x63\x5a\x12\xa9\x60\x30\x16\x5f\xdc\x15\xac\x84\xa6\x9c\x34\xe4\xb7\x46\x88\x70\xb6\xcc\x20\xca\x17\x91\xde\x95\x91\x1d\x96\x63\x9c\x87\xb2\x5a\x03\x58\x28\xb3\xa3\xc3\xb4\x39\xe0\xca\xc5\xaf\x0a\xef\x1f\x67\x88\x92\xcc\x6b\xb2\x5a\xb6\x71\xfd\x56\x48\x5f\xca\xc5\xb6\xf3\x0a\x73\x72\xaf\x32\x82\xe4\x70\x90\x2a\xef\x48\x0e\x3f\xa2\x22\x70\x27\x80\x53\x9c\x1d\xa4\xcc\x85\x59\xf4\x9d\x15\x1a\x54\x2f\x7e\x96\x65\xec\x2b\xa4\xe7\x37\x8c\x24\x4d\x6c\xef\x53\x4d\x87\xda\x25\x55\xf7\x00\x2d\xb5\x74\xe4\xce\x07\xb4\x5b\x36\x65\x81\x5c\xf7\x89\x11\xda\x11\xe0\x2a\x5a\xa2\xe8\x4a\xa2\xd5\x4b\x95\x71\x9e\x55\x82\x6d\x81\x02\xc7\x42\xed\x98\x21\x1b\x41\xcb\x36\x70\x80\x93\x1b\x21\x30\x9f\x64\x83\x37\x58\x26\x78\x3a\xcd\xab\x4b\x7d\x8e\xb7\x78\x5c\x69\xf5\xbc\x5c\xf0\x2d\x34\xdb\x0a\x14\xbf\xc2\x77\x2f\x81\x6e\xc5\x0d\x7a\x3a\x45\xb7\x57\xf8\x8e\xe4\x55\xae\x97\x4c\xd5\x50\x52\x1b\x3e\x92\xb2\xc1\x59\x09\xdf\x4c\x25\x42\x0f\x52\x89\xd0\x07\xaa\xe4\xf8\x7c\x7b\x95\xf0\x9d\x7a\x01\x41\x4f\xe3\xa7\x43\x07\xc3\x26\x63\x58\x4c\xca\x3f\xc6\x89\x2f\xe4\x82\x03\x7d\xf8\xde\xbc\x8f\x3c\x9e\xbe\xa6\xb0\x9d\x2a\xf4\x25\x9d\x2c\x32\xa1\x62\xde\x12\x7b\xf1\xd8\x7e\x1a\x0b\xc4\xc7\xf4\x9a\x8e\xd3\xc3\xbd\x66\xa5\xf8\x06\x5e\x9b\x28\xf3\x43\x9c\xd6\x48\xfd\xf7\x39\xed\x47\x2d\xbe\xfe\x4a\xfa\xf8\xae\xc5\xd6\xe3\x08\xfe\x1d\x8b\xab\x47\x8a\xad\xde\xc1\x9e\xa9\x64\x83\x32\xa0\xad\xd2\x6d\x81\x7e\x43\x4f\x9d\x4c\xa6\xe1\x0c\xa7\xf8\x6f\x1d\x06\x03\x7a\xd6\xba\xd5\xd0\x59\x65\xef\x1e\x48\x66\x6f\xe6\x0a\x48\xc8\x86\x24\xaa\x1f\x7b\xc1\xb8\xeb\x71\x82\xe6\xdb\x51\x83\xe9\xee\xee\x44\x77\xaf\xcd\xe7\x02\xea\x16\xf7\x33\xdc\xdb\x2e\x6e\xf8\x12\x62\x88\xfb\x5c\x41\xd8\x4b\xbc\xc6\xfd\x03\x82\xa8\xd6\x8f\x6c\xd0\xed\x12\xb1\xcf\x32\x60\xfa\x19\x36\x0d\xdc\x2b\x5c\x7c\x90\x2c\x3e\xfe\x2a\x17\xec\x7c\xdb\xdc\xce\x8c\xb5\x4e\x4f\xd1\x7f\x01\x25\xac\xca\x52\xd5\xe2\x6d\x08\x4d\x11\x11\x4b\x54\x32\x94\x81\xf8\xa5\x44\xc9\x0d\x24\x9f\x11\x33\x4f\xcd\xec\x2b\x70\x94\xe0\x12\x10\xa1\x29\xdc\x41\x8a\xca\x02\x12\x94\xe3\x62\x36\x72\x55\xfc\x52\x2e\x3d\xc7\x25\xf4\x08\x68\x1f\x55\x7b\x15\x2f\x03\x2f\x6d\xaa\x2c\xf3\xbc\x50\x86\x33\x73\x5c\x8c\xfa\x63\x80\xcb\x7c\x21\x57\x7f\xd0\xee\xf8\x38\xcd\x1b\x7b\x15\x0e\xf4\x9c\xed\xfb\xd6\x22\x98\xd9\x79\x1d\xc2\x85\x7a\x1b\x72\x2a\xcb\x80\xec\xc7\xd9\xf7\x15\x46\xc8\xe3\xec\x10\x5d\x95\xaa\xcd\x67\x2d\xf6\x5e\x93\x6c\x09\xc5\xd9\x9a\xc9\xd4\xd3\xbd\x35\x88\xfa\x52\x53\xb4\x1a\x0d\x73\xbb\xbf\xcd\x75\x63\x6f\xc7\x82\x90\x4f\x5d\x75\xdb\x0e\xd9\x75\x78\x38\x5e\x92\xf2\x96\xaa\x3e\x6c\x35\xd0\x1f\x9e\xd4\xf5\x41\x3d\x5c\x53\x48\xb8\x65\xb5\x4b\x88\xcb\xb6\x4e\xad\x56\xcf\x4a\xe6\x93\x57\xbd\x4d\xe1\xa0\x56\x0e\xfa\x16\x93\x0c\x5f\x93\x8c\x88\x7b\x0f\xd9\xa3\x9a\xaf\x67\x5a\x13\xa3\x51\xe4\xf3\x1b\x4c\x29\x64\xcd\x80\x21\x18\xbc\x66\x78\x02\x14\x07\xe5\xeb\xd7\x34\xf3\x84\xf4\xa9\x5a\xfb\xd6\xbc\x51\xdc\xe0\x39\xc0\x8d\xfa\x54\x8d\xdb\x9a\x37\x15\xd7\x16\x71\x6e\x74\xe8\x68\x3f\x69\xf3\x56\x2b\x5d\xa8\xb5\xe0\xa4\x44\xde\x7b\xa1\xa6\x98\x60\xa2\x24\xeb\x8d\x22\x35\x1c\x72\xa7\x55\xfe\x10\xce\xed\x2d\x2a\xd1\x76\x3b\x94\xe0\x82\x08\x25\x10\x9a\xeb\xa4\x1f\x2c\x5e\x3c\x50\x4a\x5b\x74\x1e\x22\xe7\x49\x5d\x47\x9e\xd7\xac\xf0\xd1\x44\xfe\x07\xb2\xea\xe1\x14\x30\x42\xfd\x9c\xda\x61\x33\x10\x47\x05\x87\x24\xdc\xf4\x0d\xcd\xc6\xa6\x37\x67\x42\x64\x06\x0f\x41\x16\xd2\x11\x4d\x6e\x6c\xbd\xaa\x8c\xc2\x7a\xf7\xb9\x7a\xc0\x10\xb4\x88\xcd\xe8\x28\xd0\x0b\x92\x09\xe0\xea\x4b\x23\x37\xd6\xd0\x34\x5c\x30\x67\x1c\x91\x71\x20\x5b\xfa\x6f\xf0\x32\x47\x43\x33\x88\xfe\x9c\x29\x88\x39\x16\x01\x5a\x8e\x85\x49\x6b\x6e\x70\x3c\xab\x35\xaf\x3d\x9a\xae\x7f\x6b\x89\xdc\xd8\x28\x8a\xf7\x70\xeb\xc6\x1a\x9a\x46\x0b\xe6\x8c\x23\xca\x42\xcd\x03\x93\x3f\x0d\x8e\x19\x19\x85\xf0\x6f\xbc\xcc\x90\x23\xad\xba\x77\x62\x13\xe0\x5a\xb9\xd4\x52\x56\x9d\xcb\x99\x51\x2c\xef\xe6\xca\x82\x59\xd2\xaa\x7b\xb7\x35\x01\xae\x2d\x9a\xa1\xac\x3a\x37\x10\x63\x58\xfe\xc7\x04\xf6\x13\xd7\xde\xf7\xde\x41\x04\x75\x42\x85\xbb\xc7\x91\xb4\x3c\xfe\x8c\x51\xb8\x37\x9c\xe4\x98\xdf\x07\x7b\xa7\xa1\x69\xc0\x60\xce\x28\xe2\x5b\xc0\x69\x78\x8a\x5b\xca\xca\xdc\xfa\xba\xf1\x09\x58\xe1\x85\x85\xc4\xd2\x94\x55\xfb\x06\x79\x14\x6b\xdd\xda\x8b\x6b\x6f\x2f\xae\x27\xef\xc5\xb5\x7e\xb9\x6b\x50\xd4\x6f\x83\x62\xc7\xc6\x51\xaa\x6b\xf3\xf4\x68\x61\x34\xc1\x7e\xc6\xec\x86\xc7\xe3\xa1\xf3\xfe\x86\x90\x23\x69\xb1\xfc\x19\xe3\x70\x81\x58\x9e\x4c\x93\x05\xfa\x8f\xfe\x8c\xc5\xd1\xf5\x6f\x29\x8a\x19\x1a\x94\x42\xd1\x3b\x9f\x98\x1c\xd2\x3a\x7e\xa3\x46\x69\x80\xd9\xdf\xd3\x31\x99\x52\xeb\xd8\x2e\xa1\x63\xbb\x74\x6c\x97\x8e\xed\xd2\xb1\x5d\x3a\xb6\x4b\xc7\x76\xe9\xd8\x2e\x1d\xdb\xa5\x63\xbb\x74\x6c\x97\x8e\xed\x92\xd7\x2e\xfd\x3f\x00\x00\xff\xff\x44\xdd\xe0\xb8\xca\x3d\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15818, mode: os.FileMode(420), modTime: time.Unix(1515713597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8b\xdb\x30\x14\x84\xef\xfa\x15\x83\x59\x4a\x02\x59\xbb\xe7\x40\x0e\x65\x0b\xcb\x1e\xb6\x94\x2c\x3d\x85\x1c\x14\xf9\xc5\x16\x2b\x4b\xae\xfc\x9c\x12\x84\xfe\x7b\x89\x9d\xec\xc6\xad\x4b\x4a\xb3\xb4\x3d\xea\x59\xef\x9b\x19\x46\xb8\x96\xea\x59\x16\x84\x10\x90\x3e\x11\xa7\x77\xce\x6e\x75\xd1\x7a\xc9\xda\xd9\xf4\x93\xac\x08\x31\x0a\xa1\xab\xda\x79\x46\x52\x68\x2e\xdb\x4d\xaa\x5c\x95\xc9\xda\x79\x62\x77\xab\xad\xca\xc8\x50\x45\x96\xa5\x49\x84\x50\xce\x36\x0c\xeb\x72\xa7\x9e\xd8\x6b\x5b\x60\x81\x64\xd5\x9d\xd7\x09\xb2\x0c\xd6\x19\x6d\x79\x8e\x9d\xf4\xaa\x24\xf5\x3c\xcb\x49\xe6\xca\xe5\x24\x84\xd8\x49\x0f\x4f\xa6\x53\x6f\x4a\x5d\x37\x4b\x2a\x74\xc3\x7e\x8f\x17\x89\x74\x39\xf6\x5d\x88\x2c\xc3\xe0\x0b\x3c\x71\xeb\x6d\x03\x2e\x09\x95\xcb\xc9\x0c\xc9\xa9\xd8\xb6\x56\x0d\x77\x26\xd3\x4b\x3a\x08\x42\xe0\x88\x1e\x77\x2a\xa2\xe8\xc9\xda\x6a\x9e\x4c\x4f\x0b\x63\xac\xc5\x25\xb5\x10\x0f\xcb\x21\xc0\x4b\x5b\x10\x6e\xc8\xb2\xe6\xfd\xa1\x95\x19\x6e\x4e\x4c\xcc\x17\x7d\x77\xc3\xf8\x31\xfe\x4a\x77\x15\xc2\x19\x29\xc6\x87\xbc\x3f\xad\xb1\xc0\xbb\x71\x47\x41\x00\x07\x23\xb7\xd0\x5b\x14\x8c\x89\x21\xfb\xea\x20\xfd\x60\x8c\xfb\xd6\xdc\x79\x92\x4c\x53\xbc\xef\xb5\x81\xf3\xf1\x1c\x95\xac\x57\x4d\xf7\x22\xd6\x1b\xe7\x0c\x7a\x66\x4f\x3d\xe6\xab\xa5\x27\xcb\x87\x40\xaf\xec\x7b\x62\x24\xaa\x63\x24\x27\x30\x90\x84\xf0\x72\x3d\xc6\x04\x73\xb0\x6f\x69\x76\x86\x24\x9b\x9f\xae\xc7\x99\x18\x99\x5e\x48\xf3\xa5\xce\xc7\xd2\xf4\xe3\xeb\xd2\xb4\x1d\xe3\x0d\xd2\xe8\x2d\xe8\xeb\x19\xfd\xd1\xe5\x84\xa4\xa2\x6a\x43\x3e\x19\xfa\xfe\x2c\x59\x95\x7f\x6c\xbb\x63\xbc\xa1\xf1\x1f\x6a\xf8\xfd\x56\x3e\x92\xa1\x91\x56\xfa\xf1\x75\xad\xe4\x1d\xe3\xaf\xbe\xb1\x7b\xe2\x9f\xa2\x2c\x89\xbd\xa6\xdd\x95\x61\x0a\xe2\x2b\x93\x0c\xdd\x3c\x4a\xbb\xff\x3f\x1c\x3d\xd8\xad\xfb\xd7\x4e\x06\xd3\xd8\xff\xa2\x8f\xe7\x28\xbe\x07\x00\x00\xff\xff\x1b\x1a\x93\x85\x53\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1875, mode: os.FileMode(420), modTime: time.Unix(1515701556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

