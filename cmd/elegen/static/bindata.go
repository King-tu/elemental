// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\x38\xf2\x7f\xf7\x5f\x31\x5f\xa1\xbb\x6b\x7f\xe1\x28\x7d\xf6\x5e\x16\xe8\xb5\xe9\x22\xb8\x76\x1b\x34\x45\xef\xa1\x28\x36\x8c\x34\x76\xd8\x48\xa4\x4a\x51\x69\x72\x86\xfe\xf7\x03\x7f\x49\xa4\x2c\x59\x72\xb6\xd9\xeb\x43\x5e\x82\x68\x48\x7e\xe6\x27\x87\x33\xa4\x0b\x92\xdc\x90\x0d\xc2\x76\x0b\xf1\x05\xca\xf8\x25\x67\x6b\xba\xa9\x04\x91\x94\xb3\xf8\x0f\x92\x23\xd4\xf5\x6c\x46\xf3\x82\x0b\x09\xf3\x19\x00\x40\xb4\xce\x65\x64\xfe\x2b\xef\x59\x12\xcd\xcc\xff\x1b\x2a\xaf\xab\xab\x38\xe1\xf9\x31\x29\xb8\x40\xc9\x8f\x28\x4b\x8e\x31\xc3\x1c\x99\x24\x99\x59\xb2\xdd\x82\x20\x6c\x83\x10\x5f\x14\x98\xc4\x1f\xee\x0b\x3c\x17\xfc\x96\xa6\x28\x4a\x38\xaa\x6b\x83\xa5\xc4\x81\xba\x6e\x96\x20\x4b\xf5\xe0\x62\x36\xdb\x6e\xe1\x59\x46\x24\x96\xf2\x23\x8a\x92\x72\x06\xab\x13\x0b\xf6\x46\x93\x5f\x48\x29\xe8\x55\x25\xd1\x8d\x2b\x05\x1a\xb6\xcf\xe8\x12\x9e\x21\xab\x72\xb5\xec\xaa\xa2\x59\x7a\xca\xaa\xbc\x34\x08\x5d\xe4\xba\x9e\x1d\x1f\x2b\xfe\x7a\x85\x16\x16\xea\x1a\x04\x16\x02\x4b\x64\xb2\x04\x79\x8d\x50\xf0\xb2\xa4\x57\x19\xc2\x2d\xc9\x2a\x2c\x61\xcd\x05\x10\x27\x84\xd6\xc5\x2c\x6f\x04\xb3\x66\x8d\xe2\x99\x54\x88\x3b\xf8\xa5\x14\x94\x6d\x66\xb3\x84\xb3\xd2\x19\x7d\xbb\x3d\x72\x1a\x30\x92\xe3\x12\x9e\x69\x6e\x4a\x0b\xb3\xf8\xa3\x61\x6e\x2d\x68\xc5\x66\x86\x53\x57\x62\xb3\x54\x4d\x30\xff\xd5\x75\xec\x2c\xdd\x2c\xd9\x91\xea\xc4\xa8\xe2\x56\x04\xbe\xd1\xae\x69\xff\xb7\x56\x33\x5e\x79\xcb\x53\xcc\xe2\x53\x26\xa9\xbc\xb7\x9a\x9f\xa5\xa8\x3f\xbb\x72\x35\x74\xbe\xd6\xdf\xfc\xea\x0b\x26\x32\x9e\xdd\x12\x31\x0d\xef\x04\x9a\x70\x8b\x1b\xe2\x56\x4b\xaa\xa6\xae\xa0\x89\x2e\x0f\xea\x3d\x96\x52\x8d\xd6\x75\xb4\xd4\x53\x5f\x12\x89\x1b\x2e\xee\x57\x7d\x53\x79\x25\x92\xc6\x83\x66\xfe\xb9\xa0\xb7\x44\x2a\xf4\xce\x74\x3b\x50\xd7\xcb\x59\x3d\xd3\x41\x48\xd7\xc0\xb8\x0c\x26\x9d\x95\xef\x39\x97\x6d\xac\xf5\x6b\x79\x9e\x55\x82\x64\x50\xd7\x6f\x68\x29\x7d\xbb\x11\xc8\x14\x85\xaf\x27\xac\x6d\xe2\x6d\x0a\x8f\x4f\x9f\xff\x7f\x70\xa6\xf5\xf1\x4b\xce\x24\x32\xe9\xb9\x53\x56\x82\x19\x5f\xd2\x5e\x5f\x96\x40\x99\xfe\x54\x42\xc7\xb3\x75\xc5\x12\x98\xf3\x89\x22\x2d\xba\x0c\xe7\x8b\x7e\x7f\x6b\xaf\x18\x61\x86\xa1\xdb\xb0\x99\x39\x6d\x8a\x56\x05\x02\x05\xa7\x4c\xa2\x00\xc9\x81\x40\xa2\xc6\x94\xdc\xd3\x24\x7d\x88\x66\x45\xa8\x4e\xa0\xea\x9a\x12\x95\x60\xac\x66\x5a\x98\xd5\x09\x90\xa2\x40\x96\xce\xa7\xb1\xd8\xd6\x4b\xe0\x71\x1c\x2f\x7c\xe3\xfc\xac\xa0\xac\xfa\x2f\x34\x9a\x05\x2d\x03\x9f\x49\xae\x3f\x09\x30\xfc\x66\xb8\x5b\xa7\x3e\x96\x35\x8c\x2c\x73\xc7\x3f\x8e\xe3\xae\x9f\x8d\x45\x26\x1a\x8c\x57\xf2\x2f\xda\x4b\xe5\xf4\x3f\x97\xca\x20\x0a\xc8\x24\x62\x27\x9d\xc9\x2f\x8e\x4f\xc3\x86\x57\x52\x2f\x88\xe7\xfb\xf6\xd1\xc2\xe0\xd7\x41\xcc\xf2\x4a\x5a\xa7\xe8\x9d\x98\x70\x76\x8b\x42\xfa\x3e\xd1\x51\xc9\x76\xa2\xdf\xa8\x5d\x3e\xcc\xe8\xea\x6f\xcf\x8e\xf2\x30\x3b\xf6\xdc\x33\x73\x5b\xfb\x66\xa3\x12\x73\xcf\x6e\x7b\x2d\xa6\xe6\xee\xb7\xc9\x2b\x5c\x93\x2a\x93\xef\x44\x8a\x22\x48\x39\xa9\x19\x00\xae\x46\x28\xdb\xc0\x9a\x62\x96\x96\x2e\x58\x13\x13\x20\x87\x1b\xc6\x67\x38\x5f\xc0\xa7\xcf\xe6\x80\xee\x24\x1a\x47\x6e\x95\xeb\xd4\x3a\xef\xac\x58\x4d\x1d\x50\x76\xeb\x0d\x57\xff\x34\xa7\x54\x78\xce\x84\x07\xae\x31\x91\x31\x89\x03\xf0\xad\x71\x6b\x69\x7f\x55\x7b\x8b\x3d\x5f\x00\x65\x36\x02\xfc\xd4\x8a\x32\x7e\x71\x7e\x76\xc6\xd6\x3c\xf6\xca\x26\x53\x72\xb9\x72\x60\xac\x1e\xe8\xd6\x01\xb9\x9a\xa2\x04\x27\xdd\x65\xee\xac\x1e\x3f\xcc\x6c\x21\x55\x25\x4a\xe6\xed\xd6\x77\xc4\x7e\x07\x6c\xb7\x90\x93\x1b\x54\x93\x74\x11\x3a\x53\xa5\x97\xd3\x44\x19\x5d\x73\x72\x2b\x94\x4d\x2e\xbf\x94\x9c\xad\xa2\xa3\x08\xae\xf4\x3f\x7f\x6a\xf9\xad\xfd\xa3\x4b\xb3\x4a\x95\xca\xf1\xdb\x4a\xe2\x9d\xf5\xd9\x1f\xf8\x6d\xc4\x26\xee\x24\x52\x59\x77\x38\x87\x28\xb9\xb4\x4f\x47\x00\xe7\x8b\xfd\x20\x9d\x70\xfe\x79\xdf\xdc\x36\xc6\x7d\x63\xac\xf6\x44\xc4\x72\x77\x57\xb8\x42\x56\x97\xb9\xca\x51\x5c\xb4\xb5\x7c\xe3\xa3\x33\x46\x25\x25\x19\xfd\x8f\x6a\x10\xf6\xec\x17\xaf\x76\xd5\x72\x04\xb0\x1d\xfe\x3d\x3b\xa8\xb7\x86\x19\xaa\x47\xdd\x16\xda\x6b\xcf\x05\x7c\x97\x32\x05\x76\xea\x14\x97\x6c\x3b\xd9\xcf\x14\xe6\x81\xa4\xbf\x94\x50\x31\xfa\xb5\x72\xd5\x98\x5a\x73\xa0\xf4\x6a\xc9\x7c\x01\x61\xc6\x33\x85\xac\x59\xeb\x49\xe3\xdc\xe1\x32\x76\xdc\x30\x68\x27\xa9\x63\x5a\x1d\x66\x98\xba\xd8\x75\xdd\x0d\x66\x25\x76\x21\xa2\xa8\x1d\x36\x3e\x33\x26\xb8\x40\xe9\xf1\x2d\x51\x3e\x8e\x09\x02\x36\x73\x9a\x5a\x33\x2c\x26\xda\x61\x9a\x01\xe0\x04\x68\xda\xaf\x66\x5f\x5a\xbf\x26\x22\x4d\x78\x8a\x69\x37\xc1\xeb\xa4\x33\x59\xb5\x9e\xac\x3e\x31\xaf\xef\x3b\x81\x5d\x2b\x32\x70\x12\x4f\x92\x4e\x8b\xf7\x83\x1f\xb9\xbe\xe3\x8d\x02\xaf\xb0\x4c\x04\x2d\x64\x7b\x6d\xf0\x8a\x27\x61\x75\xc2\x93\x4a\xe7\x00\x3d\x47\x55\x46\x6d\x94\x4e\xf5\xda\x2b\x9e\xf4\x6c\xc6\x23\x25\x0c\x7e\x1d\x94\x27\xfa\xc4\x78\xca\x93\xcf\x51\x77\x7b\x69\xf2\x85\xb9\x6d\x08\xb6\x61\x38\xed\x52\x59\xa0\x4c\xfe\x49\x92\x1b\x49\x93\x9b\x72\x8f\xe2\x97\xbb\x81\xec\xd5\x01\x5a\xcb\x29\xfb\x4e\x8b\xb4\xa3\xa9\x15\x67\x9d\xcb\xf8\xa2\x10\x94\xc9\xf5\x3c\xfa\xc7\x4f\xe5\xea\xa7\xf2\xb7\x48\x15\xeb\x6d\xbe\xd5\x5e\x6c\x49\x26\x89\x2d\x66\xfe\x45\xd0\x58\x29\x60\x2a\x01\xe5\xe5\xdf\x51\xaa\x3e\xd0\x78\xf5\x77\x94\x4a\xf6\x9d\x4d\xec\x7b\xba\x77\x82\xdd\xa5\x02\x13\xa4\xb7\xdd\x1c\xf4\x6c\x8f\x31\x06\x38\xce\x17\x21\x1f\x77\x4d\x13\xda\xca\xa4\xa0\x9d\x9c\x1b\x94\x67\x2e\x98\x7d\x35\x2f\x06\xd4\x6c\x52\xed\x86\xde\x22\xfb\xce\x9a\x0e\x30\x9d\x7b\xdb\xb2\x57\xe7\x26\x1f\xf7\x6b\x0b\x27\xe0\x21\x04\x11\x19\x5e\x59\x7d\x24\x19\x4d\x89\xd4\xe7\x08\x4d\xd1\x28\x9a\x54\x42\x20\x93\x40\xd9\x9a\x8b\xdc\x6c\xde\x52\x72\x81\xa9\xca\x9c\xa6\x31\x36\x75\x46\x25\x70\x7a\xfa\xb5\xac\x54\x69\x20\x04\x17\x4e\x03\xfd\x51\x86\xcd\xd5\xa9\xa6\x6d\xdd\x96\xfc\x5a\x51\x81\xe9\xe9\xbe\x89\x7d\x37\xad\x7b\x23\xbd\x3d\xcc\xf4\xed\xd4\x07\x41\x58\x49\x95\xd6\xc1\x58\x7c\x7a\x57\xf0\x12\xdb\x4a\xd8\x92\xdf\x5b\x99\xc2\xd9\x2a\x21\x69\x07\x45\x66\x17\x47\x6e\x58\x8d\x09\x11\x8a\xee\xec\xe1\xa0\x6c\x06\x08\x33\xf2\x80\x7f\x17\xbf\x6a\xbc\xff\x3b\x01\x46\x33\xaf\xb7\xec\x98\xaa\x69\x33\x43\xfa\x52\x2d\x76\x0d\x67\x98\xee\x7b\x95\x91\x34\xc7\x83\x54\xf9\x40\x73\xfc\x11\x15\xc1\x3b\x89\x82\x91\xec\x20\x65\x4e\xed\xa2\xff\xb1\x42\x83\xea\xc5\x2f\xb2\x8c\x7f\xc3\xf4\xe5\x35\xa7\x49\x7b\x1d\xbe\x4f\x35\x13\x6a\x67\x4c\x5f\x7f\x74\xd4\x32\x91\x3b\x1f\xd0\x6e\xd9\x16\x20\x6a\xdd\x17\x4e\xd9\x8e\x00\x97\xd1\x12\xa2\x4b\x85\x56\x2f\x75\x1a\x7a\x51\x49\xbe\x41\x86\x82\x48\xbd\x63\x86\x6c\x84\x1d\xdb\xe0\x01\x4e\x6e\x85\x20\x62\x92\x0d\xce\x89\xca\xfd\x6c\x9a\x57\x97\xba\x20\xe8\xf2\xb8\x34\xea\x79\xb9\xe0\x31\x34\xdb\x48\x88\xdf\x92\xbb\x37\xc8\x36\xf2\x1a\x9e\x4f\xd1\xed\x2d\xb9\xa3\x79\x95\x9b\x25\x53\x35\x54\xd4\x96\x8f\xa2\xac\x49\x56\xe2\xa3\xa9\x44\xd9\x41\x2a\x51\xf6\x40\x95\x1a\x3e\x8f\xaf\x12\xb9\xd3\x4f\x52\xf0\x3c\x7e\x3e\x74\x30\xac\x33\x4e\xe4\xa4\xfc\x63\x9d\xf8\x5a\x2d\x38\xd0\x87\x1f\xed\x83\xd5\xf7\xd3\xd7\x56\xc8\x53\x85\x3e\x63\x93\x45\xa6\x4c\xce\x3b\x62\x2f\xbe\xb7\x9f\xc6\x02\xf1\x7b\x7a\xcd\xc4\xe9\xe1\x5e\x73\x52\x3c\x82\xd7\x26\xca\xfc\x10\xa7\xb5\x52\x3f\xb2\xd3\xa6\x7f\x39\x75\x33\x64\x9d\xd3\x75\x01\xbf\xc1\xf3\x46\x24\xdb\x2e\x84\x53\xfc\x5b\x78\x8b\x81\x3d\x6b\x9b\xd5\xb8\xb3\xca\xf5\x99\x34\x73\x17\x37\x05\x26\x74\x4d\x13\x5d\x47\xbf\xe6\xa2\xa9\x4a\x83\x06\xaa\xa1\x06\xd3\x9b\x9e\xd9\xf4\x1e\xed\x13\xbb\xbe\xf6\xbb\xc1\x7b\x57\x7d\x8f\x75\x97\x43\x32\xcc\x35\x90\xbb\xe3\x69\x43\x63\x40\x1c\x5d\xb2\xd3\x35\xdc\x2e\x81\xdf\xa8\x60\xda\xc7\xb6\x2d\xbf\xdf\x92\xe2\x93\x62\xf4\xf9\x57\xb5\x6c\xeb\xdb\xe9\x76\x66\x2d\x77\x7c\x0c\xff\x46\x48\x78\x95\xa5\xba\x22\x5f\x53\x96\x02\x95\x4b\x28\x39\x64\x28\x7f\x29\x21\xb9\xc6\xe4\x06\xb8\x7d\x4c\xe5\xdf\x50\x40\x42\x4a\x04\xca\x52\xbc\xc3\x14\xca\x02\x13\xc8\x49\x31\x9b\x74\xc3\xf8\x46\x01\xbc\x24\x25\xf6\x88\xe9\x9e\x07\x7b\x8d\x50\x06\x7e\x5b\x57\x59\xe6\xf9\xa5\x0c\x67\xe6\xa4\x98\xe8\xa1\x01\x5e\xf3\x85\xc2\xf8\x64\x1c\xf4\x79\x9a\x7f\x26\x28\x1f\xe8\x3c\x1b\xff\xf5\x42\x30\x7f\xe7\xe9\x82\x14\xfa\xe1\xa2\x31\x82\x0a\xda\x7d\x68\xe3\xbf\x6e\x08\xf9\x9d\x1c\x62\x03\x6d\x82\xf6\xa7\x23\x13\x3b\xc1\xa8\x2f\xcf\x45\xab\xd1\x1d\xe1\x12\x82\xbd\x91\xea\xad\x42\x01\x7c\xea\x6a\xb7\x94\x54\x95\xa4\x87\xe3\x65\x35\x6f\xa9\xae\xad\x57\x03\x35\xff\x51\x5d\x1f\x54\x97\xb7\x87\x43\xb3\xac\x6e\x32\xe8\xb2\xab\x53\xa7\x7c\x77\x92\xf9\xe4\x55\x6f\xa1\x3f\xa8\x95\x83\xee\xbd\x19\x07\x08\xc8\xab\x01\xe7\x8c\x83\x0b\xd4\x3e\x7a\xc7\xb2\x7b\x0f\xdb\xa3\x1a\xa9\x3b\xf3\x46\x71\x83\xab\xe0\x66\xd4\xa7\x1a\xdc\xce\xbc\xa9\xb8\xee\x40\x6d\x46\x87\x7a\xd8\xa3\x2e\x6f\xbd\xb2\x09\x91\x0e\x9c\x92\xc8\x7b\x58\x32\x14\x1b\x04\x8c\x66\xbd\xde\xd7\xc3\x21\x77\x56\xe5\x0f\xe0\x3c\x7c\x05\xd6\xe7\xda\xed\x16\x12\x52\x50\xa9\x25\x85\xb9\x49\xf5\x01\xea\xe2\x81\xe2\xbb\x6b\x99\x43\x14\x38\xaa\xeb\xc8\x73\xa7\xd3\x2a\x9a\xc8\xff\x40\x56\x3d\x9c\x02\x46\xd0\xcf\xa9\x1b\x4f\x03\x01\x56\x08\x4c\xc2\x5d\xdc\xd2\x5c\xd0\x7a\x73\x26\x84\x6c\xf0\x04\xe0\x20\x1b\xe2\xaa\xe7\x22\xbd\x73\x7b\x3e\xca\xc3\xbb\x81\x33\x03\x96\x60\xe4\x6d\x47\x47\x81\x5e\xd3\x4c\xa2\xd0\x3f\x92\x69\xc6\x5a\x9a\x81\x0b\xe6\x8c\x23\x72\x81\x74\xc3\xfe\x85\x5e\x7e\x69\x69\x16\xd1\x9f\x33\x05\x31\x27\x32\x40\xcb\x89\xb4\x29\xb0\x19\x1c\xcf\x7d\xed\x05\xbe\xa1\x9b\x6f\x23\x51\x33\x36\x8a\xe2\x3d\xf0\x35\x63\x2d\xcd\xa0\x05\x73\xc6\x11\x55\xad\xe6\x81\xa9\x4f\x8b\x63\x47\x46\x21\xfc\x3b\x0a\x3b\xd4\x90\x56\xbb\xb7\x18\x13\xe0\x3a\x19\xd7\x51\x56\x3b\xed\xf4\x28\x96\x77\xd7\xe0\xc0\x1c\x69\xb5\x7b\x1b\x31\x01\xae\x2b\x9a\xa5\xac\x76\x7a\xc6\x31\xac\xf0\x80\xf5\xce\xd5\xc9\xc7\xa9\x3e\xc7\xc2\xdd\xd3\x90\x8c\x3c\xfe\x8c\x51\xb8\x73\x41\x73\x22\xee\x83\xbd\xd3\xd2\x0c\x60\x30\x67\x14\xf1\x3d\x92\x34\x3c\xeb\x1d\x65\x65\xef\xe9\x9a\xf1\x09\x58\xe1\xfd\xbe\xc2\x32\x94\x55\xf7\xce\x6f\x14\xeb\xa2\xb3\x17\x2f\xbc\xbd\x78\x31\x79\x2f\x5e\x98\x07\x98\x16\x45\x7f\x5b\x14\x37\x36\x8e\x52\x5d\xd9\x17\x24\x07\x63\x08\xee\x77\xbf\xcd\xf0\x78\x3c\xec\xbc\x98\x00\x34\x24\x23\x96\x3f\x63\x1c\x2e\x10\xcb\x93\x69\x44\x20\x8d\xbc\xf3\x33\x82\xc3\x3b\xbf\xbf\xa1\xab\x19\x60\xfc\x37\xb5\x37\xb6\x8c\x7a\xea\x6d\xe0\xa9\xb7\x79\xea\x6d\x9e\x7a\x9b\xa7\xde\x66\x0c\xf1\xa9\xb7\x79\xea\x6d\x9e\x7a\x9b\xa7\xde\xe6\xa9\xb7\x79\xea\x6d\x7e\x90\xde\xe6\xbf\x01\x00\x00\xff\xff\x25\x3e\xfc\xea\xbd\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15549, mode: os.FileMode(420), modTime: time.Unix(1522195126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

