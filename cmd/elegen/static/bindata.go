// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\xd0\x6b\xd3\x45\x70\xed\x36\x68\x8a\xde\x43\x51\x6c\x18\x69\xec\xb0\x91\x48\x95\xa4\xdc\xe4\x0c\xfd\xef\x07\x7e\x49\xa4\x3e\x2c\xb9\xdb\x2c\xf2\xe0\x97\x20\x1a\x92\xbf\xf9\xe4\x70\x86\x74\x81\x93\x3b\xbc\x01\xb4\xdb\xa1\xf8\x0a\x64\xfc\x92\xd1\x35\xd9\x94\x1c\x4b\xc2\x68\xfc\x07\xce\x01\x55\xd5\x6c\x46\xf2\x82\x71\x89\xe6\x33\x84\x10\x8a\xd6\xb9\x8c\xcc\x7f\xe2\x81\x26\xd1\xcc\xfc\xbf\x21\xf2\xb6\xbc\x89\x13\x96\x9f\xe2\x82\x71\x90\xec\x84\xd0\xe4\x14\x32\xc8\x81\x4a\x9c\x99\x25\xbb\x1d\xe2\x98\x6e\x00\xc5\x57\x05\x24\xf1\x87\x87\x02\x2e\x39\xdb\x92\x14\xb8\x40\x27\x55\x65\xb0\x94\x38\xa8\xaa\xea\x25\x40\x53\x3d\xb8\x98\xcd\x76\x3b\xf4\x2c\xc3\x12\x84\xfc\x08\x5c\x10\x46\xd1\xea\xcc\x82\xbd\xd1\xe4\x17\x52\x72\x72\x53\x4a\x10\x6e\x82\xd2\xa0\xe6\xfb\x8c\x2c\xd1\x33\xa0\x65\xae\xd6\xdd\x94\x24\x4b\xcf\x69\x99\x0b\x03\xd1\x86\xae\xaa\xd9\xe9\xa9\x12\x40\xaf\xd0\xd2\xa2\xaa\x42\x1c\x0a\x0e\x02\xa8\x14\x48\xde\x02\x2a\x98\x10\xe4\x26\x03\xb4\xc5\x59\x09\x02\xad\x19\x47\xd8\x49\xa1\x95\x31\xcb\x6b\xc9\xac\x5d\xa3\x78\x26\x15\x62\x07\x5f\x48\x4e\xe8\x66\x36\x4b\x18\x15\xce\xea\xbb\xdd\x89\xd3\x80\xe2\x1c\x96\xe8\x99\xe6\xa6\xb4\x30\x8b\x3f\x1a\xe6\xd6\x84\x56\x6c\x6a\x38\xb5\x25\x36\x4b\xd5\x04\xf3\x5f\x55\xc5\xce\xd4\xf5\x92\x8e\x54\x67\x46\x15\xb7\x22\x70\x8e\xf6\x4d\xf3\xbf\xb5\x9a\x71\xcb\x5b\x96\x42\x16\x9f\x53\x49\xe4\x83\xd5\xfc\x22\x05\xfd\xd9\x96\xab\xa6\xb3\xb5\xfe\x66\x37\x5f\x20\x91\xf1\x6c\x8b\xf9\x34\xbc\x33\x54\xc7\x5b\x5c\x13\x77\x5a\x52\x35\x75\x85\xea\xf0\xf2\xa0\xde\x83\x90\x6a\xb4\xaa\xa2\xa5\x9e\xfa\x12\x4b\xd8\x30\xfe\xb0\xea\x9b\xca\x4a\x9e\xd4\x1e\x34\xf3\x2f\x39\xd9\x62\xa9\xd0\x5b\xd3\xed\x40\x55\x2d\x67\xd5\x4c\x07\x21\x59\x23\xca\x64\x30\xe9\x42\xbc\x67\x4c\x36\xb1\xd6\xaf\xe5\x65\x56\x72\x9c\xa1\xaa\x7a\x43\x84\xf4\xed\x86\x51\xa6\x28\x6c\x3d\x61\x6d\x1d\x6f\x53\x78\x7c\xfa\xfc\xcf\xc1\x99\xd6\xc7\x2f\x19\x95\x40\xa5\xe7\x4e\x59\x72\x6a\x7c\x49\x7a\x7d\x29\x10\xa1\xfa\x53\x09\x1d\xcf\xd6\x25\x4d\xd0\x9c\x4d\x14\x69\xd1\x66\x38\x5f\xf4\xfb\x5b\x7b\xc5\x08\x33\x0c\xdd\x84\xcd\xcc\x69\x53\x34\x2a\x60\x54\x30\x42\x25\x70\x24\x19\xc2\x28\x51\x63\x4a\xee\x69\x92\x7e\x8f\x66\x45\xa8\x4e\xa0\xea\x9a\x60\x95\x60\xac\x66\x5a\x98\xd5\x19\xc2\x45\x01\x34\x9d\x4f\x63\xb1\xab\x96\x88\xc5\x71\xbc\xf0\x8d\xf3\xb3\x82\xb2\xea\xbf\xd0\x68\x16\x54\x04\x3e\x93\x4c\x7f\x62\x44\xe1\x9b\xe1\x6e\x9d\xfa\x58\xd6\x30\xb2\xcc\x1d\xff\x38\x8e\xdb\x7e\x36\x16\x99\x68\x30\x56\xca\xbf\x68\x2f\x95\xd3\xff\x5c\x2a\x83\x28\x20\x93\x88\x9d\x74\x26\xbf\x38\x3e\x35\x1b\x56\x4a\xbd\x20\x9e\xef\xdb\x47\x0b\x83\x5f\x05\x31\xcb\x4a\x69\x9d\xa2\x77\x62\xc2\xe8\x16\xb8\xf4\x7d\xa2\xa3\x92\x76\xa2\xdf\xa8\x2d\xbe\xcf\xe8\xea\x6f\xcf\x8e\xf2\x30\x5b\xf6\xdc\x33\x73\x57\xf9\x66\x23\x12\x72\xcf\x6e\x7b\x2d\xa6\xe6\xee\xb7\xc9\x2b\x58\xe3\x32\x93\xef\x78\x0a\x3c\x48\x39\xa9\x19\x40\x4c\x8d\x10\xba\x41\x6b\x02\x59\x2a\x5c\xb0\x26\x26\x40\x0e\x37\x8c\xcf\x70\xbe\x40\x9f\x3e\x9b\x03\xba\x95\x68\x1c\xb9\x51\xae\x55\xec\xbc\xb3\x62\x35\x15\x4a\xbb\xde\x70\x05\x50\x7d\x4a\x85\xe7\x4c\x78\xe0\x1a\x13\x19\x93\x38\x00\xdf\x1a\x5b\x4b\xfb\xab\xda\x5b\xec\xf9\x02\x11\x6a\x23\xc0\x4f\xad\x20\xe3\x17\x97\x17\x17\x74\xcd\x62\xaf\x6c\x32\x25\x97\x2b\x07\xc6\xea\x81\x76\x1d\x90\xab\x29\x4a\x70\xdc\x5e\xe6\xce\xea\xf1\xc3\xcc\x16\x52\x65\xa2\x64\xde\xed\x7c\x47\xec\x77\xc0\x6e\x87\x72\x7c\x07\x6a\x92\xae\x42\x67\xaa\xf4\x72\x9a\x28\xa3\x6b\x4e\x6e\x85\xb2\xc9\xf5\x17\xc1\xe8\x2a\x3a\x89\xd0\x8d\xfe\xe7\x4f\x2d\xbf\xb5\x7f\x74\x6d\x56\xa9\x5a\x39\x7e\x5b\x4a\xb8\xb7\x3e\xfb\x03\xbe\x8d\xd8\xc4\x9d\x44\x2a\xeb\x0e\xe7\x10\x25\x97\xf6\xe9\x08\xe0\x7c\xb1\x1f\xa4\x15\xce\x3f\xef\x9b\xdb\xc4\xb8\x6f\x8c\xd5\x9e\x88\x58\x76\x77\x85\x2b\x64\x75\x99\xab\x1c\xc5\x78\x53\xcc\xd7\x3e\xba\xa0\x44\x12\x9c\x91\xff\xa9\x0e\x61\xcf\x7e\xf1\x6a\x57\x2d\x47\x00\xdb\xe2\xdf\xb3\x83\x7a\x6b\x98\xa1\x7a\xd4\x6d\xa1\xbd\xf6\x5c\xa0\x1f\x52\xa6\xa0\x4e\x9d\xe2\x92\x6d\x2b\xfb\x99\xc2\x3c\x90\xf4\x17\x81\x4a\x4a\xbe\x96\xae\x1a\x53\x6b\x0e\x94\x5e\x2d\x99\x2f\x50\x98\xf1\x4c\x21\x6b\xd6\x7a\xd2\x38\x77\xb8\x8c\x1d\xd7\x0c\x9a\x49\xea\x98\x56\x87\x19\xa4\x2e\x76\x5d\x77\x03\x99\x80\x36\x44\x14\x35\xc3\xc6\x67\xc6\x04\x57\x20\x3d\xbe\x02\xe4\xe3\x98\x20\x60\x33\x27\xa9\x35\xc3\x62\xa2\x1d\xa6\x19\x00\x9d\x21\x92\xf6\xab\xd9\x97\xd6\x6f\x31\x4f\x13\x96\x42\xda\x4e\xf0\x3a\xe9\x4c\x56\xad\x27\xab\x4f\xcc\xeb\xfb\x4e\x60\xd7\x8a\x0c\x9c\xc4\x93\xa4\xd3\xe2\x3d\xf1\x23\xd7\x77\xbc\x51\xe0\x15\x88\x84\x93\x42\x36\xd7\x06\xaf\x58\x12\x56\x27\x2c\x29\x75\x0e\xd0\x73\x54\x65\xd4\x44\xe9\x54\xaf\xbd\x62\x49\xcf\x66\x3c\x51\xc2\xc0\xd7\x41\x79\xa2\x4f\x94\xa5\x2c\xf9\x1c\xb5\xb7\x97\x26\x5f\x99\xdb\x86\x60\x1b\x86\xd3\xae\x95\x05\x44\xf2\x6f\x9c\xdc\x49\x92\xdc\x89\x3d\x8a\x5f\x77\x03\xd9\xab\x03\xb4\x96\x53\xf6\x9d\x16\xa9\xa3\xa9\x15\x67\x9d\xcb\xf8\xaa\xe0\x84\xca\xf5\x3c\xfa\xd7\x4f\x62\xf5\x93\xf8\x2d\x52\xc5\x7a\x93\x6f\xb5\x17\x1b\x92\x49\x62\x8b\x99\x7f\x11\x34\x56\x0a\x98\x4a\x40\x79\xf9\x77\x90\xaa\x0f\x34\x5e\xfd\x1d\xa4\x92\xbd\xb3\x89\x7d\x4f\xf7\x4e\xb0\xbb\x94\x43\x02\x64\xdb\xce\x41\xcf\xf6\x18\x63\x80\xe3\x7c\x11\xf2\x71\xd7\x34\xa1\xad\x4c\x0a\xea\xe4\xdc\xa0\x3c\x73\xc1\xec\xab\x79\x35\xa0\x66\x9d\x6a\x37\x64\x0b\xf4\x07\x6b\x3a\xc0\x74\xee\x6d\xcb\x5e\x9d\xeb\x7c\xdc\xaf\x2d\x3a\x43\x1e\x42\x10\x91\xe1\x95\xd5\x47\x9c\x91\x14\x4b\x7d\x8e\x90\x14\x8c\xa2\x49\xc9\x39\x50\x89\x08\x5d\x33\x9e\x9b\xcd\x2b\x24\xe3\x90\xaa\xcc\x69\x1a\x63\x53\x67\x94\x1c\xa6\xa7\x5f\xcb\x4a\x95\x06\x9c\x33\xee\x34\xd0\x1f\x22\x6c\xae\xce\x35\x6d\xe7\xb6\xe4\xd7\x92\x70\x48\xcf\xf7\x4d\xec\xbb\x6a\xdd\x1b\xe9\xcd\x61\xa6\x6f\xa7\x3e\x70\x4c\x05\x51\x5a\x07\x63\xf1\xf9\x7d\xc1\x04\x34\x95\xb0\x25\xbf\xb7\x32\x85\xb3\x55\x42\xd2\x0e\x8a\xcc\x2e\x8e\xdc\xb0\x1a\xe3\x3c\x14\xdd\xd9\xc3\x41\xd9\x0c\x10\x66\xe4\x01\xff\x2e\x7e\xd5\x78\xff\x38\x43\x94\x64\x5e\x6f\xd9\x32\x55\xdd\x66\x86\xf4\xa5\x5a\xec\x1a\xce\x30\xdd\xf7\x2a\x23\x49\x0e\x07\xa9\xf2\x81\xe4\xf0\x14\x15\x81\x7b\x09\x9c\xe2\xec\x20\x65\xce\xed\xa2\xa7\xa8\x10\xa1\x12\x36\xc0\x0f\xd2\xe7\x82\xca\xa7\xa8\xca\x3a\x63\x58\x1e\xa4\xc8\x6b\xb5\xe2\x89\xa8\xd2\xd5\x2c\x7e\x91\x65\xec\x1b\xa4\x2f\x6f\x19\x49\x9a\x57\x8a\x7d\x8a\x99\x0c\x70\x41\xf5\xad\x54\x4b\x2f\x93\x50\xe6\x03\xea\x2d\x9b\xba\x50\xad\xfb\xc2\x08\xed\x08\x70\x1d\x2d\x51\x74\xad\xd0\xaa\xa5\x3e\x1d\x5e\x94\x92\x6d\x80\x02\xc7\x52\x27\xb2\x21\x23\x41\xcb\x38\x70\x80\x7f\x1b\x21\x30\x9f\x64\x83\x4b\xac\x8e\x64\x3a\xcd\xad\x4b\x5d\xa7\xb5\x79\x5c\x1b\xf5\xbc\x14\xfd\x18\x9a\x6d\x24\x8a\xdf\xe2\xfb\x37\x40\x37\xf2\x16\x3d\x9f\xa2\xdb\x5b\x7c\x4f\xf2\x32\x37\x4b\xa6\x6a\xa8\xa8\x0d\x1f\x45\x59\xe3\x4c\xc0\xa3\xa9\x44\xe8\x41\x2a\x11\xfa\x9d\x2a\xd5\x7c\x1e\x5f\x25\x7c\xaf\x5f\x0a\xd1\xf3\xf8\xf9\xd0\x79\x3d\x3d\xfb\x58\x27\x1e\x90\x7c\x6a\x1f\x7e\xb4\xef\x88\x3f\x4e\x5f\xdb\xb8\x4c\x15\x7a\x72\xea\x5f\xaa\x42\x6f\xde\x12\x7b\xf1\xa3\xfd\x34\x16\x88\x3f\xd2\x6b\x26\x4e\x0f\xf7\x9a\x93\xe2\x11\xbc\x36\x51\xe6\xef\x71\x5a\x23\xf5\x23\x3b\x6d\xfa\x97\x53\x37\x03\xda\x3a\x5e\x17\xe8\x37\xf4\xbc\x16\xc9\x76\x71\xe1\x14\xff\x71\xc4\x62\x40\xcf\xda\x7a\x35\x74\x56\xb9\xf6\x9f\x64\xee\x3e\xad\x80\x84\xac\x49\xa2\xdb\x9b\xd7\x8c\xd7\xcd\x42\xd0\xd7\xd6\xd4\x60\x7a\x7d\x95\x61\x5a\xc2\xe6\x97\x0f\xfa\x36\xf6\x0e\x1e\x5c\x53\x34\xd6\xf4\x0f\xc9\x30\xd7\x40\xee\xea\xad\x09\x8d\x01\x71\x74\x27\x45\xd6\x68\xbb\x44\xec\x4e\x05\xd3\x3e\xb6\x4d\x57\xf4\x16\x17\x9f\x14\xa3\xcf\xbf\xaa\x65\x3b\xdf\x4e\xdb\x99\xb5\xdc\xe9\x29\xfa\x2f\xa0\x84\x95\x59\xaa\x1b\xa5\x35\xa1\x29\x22\x72\x89\x04\x43\x19\xc8\x5f\x04\x4a\x6e\x21\xb9\x43\xcc\xbe\x71\xb3\x6f\xc0\x51\x82\x05\x20\x42\x53\xb8\x87\x14\x89\x02\x12\x94\xe3\x62\x36\xe9\xe2\xf7\x8d\x02\x78\x89\x05\xf4\x88\xe9\x5e\x6d\x7b\x8d\x20\x02\xbf\xad\xcb\x2c\xf3\xfc\x22\xc2\x99\x39\x2e\x26\x7a\x68\x80\xd7\x7c\xa1\x30\x3e\x19\x07\x7d\x9e\xe6\x9f\x09\xca\x07\x3a\xcf\xc6\x7f\x54\x12\xcc\xef\xbc\x28\xe1\x42\xbf\x27\xd5\x46\x50\x41\xbb\x0f\x6d\xfc\x47\x27\x21\xbf\xb3\x43\x6c\xa0\x4d\xd0\xfc\xa2\x67\x62\x83\x1e\xf5\xe5\xb9\x68\x35\xba\x23\x5c\x42\xb0\x17\x85\xbd\x55\x28\x42\x3e\x75\xd5\x2d\x25\x55\x25\xe9\xe1\x78\x59\xcd\x5b\xaa\x6b\xeb\xd5\x40\xcd\x7f\x52\x55\x07\xd5\xe5\xcd\xe1\x50\x2f\xab\xea\x0c\xba\x6c\xeb\xd4\x2a\xdf\x9d\x64\x3e\x79\xd5\x5b\xe8\x0f\x6a\xe5\xa0\x7b\x1f\x2c\x10\x0a\xc8\xab\x01\xe7\x8c\x83\x73\xd0\x3e\x7a\x47\xb3\x07\x0f\xdb\xa3\x1a\xa9\x5b\xf3\x46\x71\x83\x1b\xfa\x7a\xd4\xa7\x1a\xdc\xd6\xbc\xa9\xb8\xee\x40\xad\x47\x87\xae\x16\x4e\xda\xbc\xf5\xca\x3a\x44\x5a\x70\x4a\x22\xef\xbd\xcf\x50\x6c\x10\x50\x92\xf5\x7a\x5f\x0f\x87\xdc\x69\x99\x7f\x07\xe7\xe1\x9b\xc9\x3e\xd7\x7a\xc6\xf3\x30\x0e\x96\xd5\x5d\x8d\x1d\x22\xed\x49\x55\x45\x3d\xec\xa3\x89\xfc\x0f\x64\x35\xa6\x28\xea\xe7\xd4\x0e\x9e\x81\x68\x2a\x38\x24\xe1\x96\x6d\x68\x2e\x42\xbd\x39\x13\xe2\x33\x78\x86\x71\x90\x35\x71\xd5\xf3\x98\xd1\x7a\xc1\x18\xe5\xe1\xdd\x82\x9a\x01\x4b\x30\xf2\x36\xa3\xa3\x40\xaf\x49\x26\x81\xeb\x1f\x2a\xd5\x63\x0d\xcd\xc0\x05\x73\xc6\x11\x19\x07\xb2\xa1\xff\x01\x2f\x99\x34\x34\x8b\xe8\xcf\x99\x82\x98\x63\x19\xa0\xe5\x58\xda\x7c\x57\x0f\x8e\x27\xba\xe6\x11\xc5\xd0\xcd\xb7\x91\xa8\x1e\x1b\x45\xf1\x1e\x59\xeb\xb1\x86\x66\xd0\x82\x39\xe3\x88\xaa\x30\xf3\xc0\xd4\xa7\xc5\xb1\x23\xa3\x10\xfe\x85\x84\x1d\xaa\x49\xab\xee\x95\xc5\x04\xb8\x56\x7a\x75\x94\x55\xa7\x77\x1e\xc5\xf2\x2e\x16\x1c\x98\x23\xad\xba\x57\x0f\x13\xe0\xda\xa2\x59\xca\xaa\xd3\x20\x8e\x61\x85\xa7\xa9\x77\x88\x4e\x3e\x3b\xf5\xa1\x15\xee\x9e\x9a\x64\xe4\xf1\x67\x8c\xc2\x5d\x72\x92\x63\xfe\x10\xec\x9d\x86\x66\x00\x83\x39\xa3\x88\xef\x01\xa7\xe1\xc1\xee\x28\x2b\x7b\x29\x57\x8f\x4f\xc0\x0a\xdf\x58\x14\x96\xa1\xac\xda\x17\x7c\xa3\x58\x57\xad\xbd\x78\xe5\xed\xc5\xab\xc9\x7b\xf1\xca\x3c\x82\x35\x28\xfa\xdb\xa2\xb8\xb1\x71\x94\xf2\xc6\xbe\xe2\x39\x18\x43\x70\xbf\xbd\xae\x87\xc7\xe3\xa1\xf3\x6a\x85\x50\x4d\x32\x62\xf9\x33\xc6\xe1\x02\xb1\x3c\x99\x46\x04\xd2\xc8\x9d\x9f\x72\x1c\xde\xe6\xfd\x0d\x2d\xcc\x00\xe3\xbf\xa9\x97\x31\xed\x71\x7c\x6c\x64\xd0\xb1\x91\x39\x36\x32\xc7\x46\xe6\xd8\xc8\x1c\x1b\x99\x63\x23\x73\x6c\x64\x8e\x8d\xcc\xb1\x91\x39\x36\x32\x4f\xb1\x91\xf9\x7f\x00\x00\x00\xff\xff\x6f\x61\x44\x9f\x2f\x3e\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15919, mode: os.FileMode(420), modTime: time.Unix(1524762371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

