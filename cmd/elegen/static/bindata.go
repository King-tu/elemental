// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\x38\xf2\x7f\xf7\x5f\xc1\xaf\xd0\xdd\xb5\xbf\x70\x94\x3e\x7b\x2f\x0b\xf4\xda\x74\x11\x5c\xbb\x0d\x9a\xa2\xf7\x50\x14\x1b\x46\x1a\x39\x6c\x24\x52\x25\x29\x37\x39\x43\xff\xfb\x81\xbf\x24\x52\x96\x2c\xb9\x9b\xec\xf5\xc1\x2f\x45\x3d\x1c\x7e\xe6\x27\x87\x33\x54\x4a\x9c\xdc\xe1\x35\xa0\xed\x16\xc5\x57\x20\xe3\x97\x8c\x66\x64\x5d\x71\x2c\x09\xa3\xf1\x1f\xb8\x00\x54\xd7\xb3\x19\x29\x4a\xc6\x25\x9a\xcf\x10\x42\x28\xca\x0a\x19\x99\xff\x89\x07\x9a\x44\x33\xf3\xff\x35\x91\xb7\xd5\x4d\x9c\xb0\xe2\x14\x97\x8c\x83\x64\x27\x84\x26\xa7\x90\x43\x01\x54\xe2\xdc\x6c\xd9\x6e\x11\xc7\x74\x0d\x28\xbe\x2a\x21\x89\x3f\x3c\x94\x70\xc9\xd9\x86\xa4\xc0\x05\x3a\xa9\x6b\x83\xa5\xd4\x41\x75\xdd\x6c\x01\x9a\xea\xc5\xc5\x6c\xb6\xdd\xa2\x67\x39\x96\x20\xe4\x47\xe0\x82\x30\x8a\x56\x67\x16\xec\x8d\x26\xbf\x90\x92\x93\x9b\x4a\x82\x70\x0c\xca\x82\x46\xee\x33\xb2\x44\xcf\x80\x56\x85\xda\x77\x53\x91\x3c\x3d\xa7\x55\x21\x0c\x44\x17\xba\xae\x67\xa7\xa7\x4a\x01\xbd\x43\x6b\x8b\xea\x1a\x71\x28\x39\x08\xa0\x52\x20\x79\x0b\xa8\x64\x42\x90\x9b\x1c\xd0\x06\xe7\x15\x08\x94\x31\x8e\xb0\xd3\x42\x1b\x63\xb6\x37\x9a\x59\xbf\x46\xf1\x4c\x2a\xc4\x1d\x7c\x21\x39\xa1\xeb\xd9\x2c\x61\x54\x38\xaf\x6f\xb7\x27\xce\x02\x8a\x0b\x58\xa2\x67\x5a\x9a\xb2\xc2\x6c\xfe\x68\x84\x5b\x17\x5a\xb5\xa9\x91\xd4\xd5\xd8\x6c\x55\x0c\xe6\x7f\x75\x1d\x3b\x57\x37\x5b\x76\xb4\x3a\x33\xa6\xb8\x1d\x41\x70\x74\x6c\xda\xff\x5b\xaf\x99\xb0\xbc\x65\x29\xe4\xf1\x39\x95\x44\x3e\x58\xcb\x2f\x52\xd0\x3f\xbb\x7a\x35\x74\x96\xe9\xdf\xec\xe6\x0b\x24\x32\x9e\x6d\x30\x9f\x86\x77\x86\x9a\x7c\x8b\x1b\xe2\x56\x6b\xaa\x58\x57\xa8\x49\x2f\x0f\xea\x3d\x08\xa9\x56\xeb\x3a\x5a\x6a\xd6\x97\x58\xc2\x9a\xf1\x87\x55\x1f\x2b\xab\x78\xd2\x44\xd0\xf0\x5f\x72\xb2\xc1\x52\xa1\x77\xd8\xed\x42\x5d\x2f\x67\xf5\x4c\x27\x21\xc9\x10\x65\x32\x60\xba\x10\xef\x19\x93\x6d\xae\xf5\x5b\x79\x99\x57\x1c\xe7\xa8\xae\xdf\x10\x21\x7d\xbf\x61\x94\x2b\x0a\xcb\x26\xec\x6d\xf2\x6d\x8a\x8c\x4f\x9f\xff\x7f\x90\xd3\xc6\xf8\x25\xa3\x12\xa8\xf4\xc2\x29\x2b\x4e\x4d\x2c\x49\x6f\x2c\x05\x22\x54\xff\x54\x4a\xc7\xb3\xac\xa2\x09\x9a\xb3\x89\x2a\x2d\xba\x02\xe7\x8b\xfe\x78\xeb\xa8\x18\x65\x86\xa1\xdb\xb4\x99\x39\x6b\xca\xd6\x04\x8c\x4a\x46\xa8\x04\x8e\x24\x43\x18\x25\x6a\x4d\xe9\x3d\x4d\xd3\xef\xb1\xac\x0c\xcd\x09\x4c\xcd\x08\x56\x05\xc6\x5a\xa6\x95\x59\x9d\x21\x5c\x96\x40\xd3\xf9\x34\x11\xdb\x7a\x89\x58\x1c\xc7\x0b\xdf\x39\x3f\x2b\x28\x6b\xfe\x0b\x8d\x66\x41\x45\x10\x33\xc9\xf4\x4f\x8c\x28\x7c\x33\xd2\x6d\x50\x9f\xca\x1b\x46\x97\xb9\x93\x1f\xc7\x71\x37\xce\xc6\x23\x13\x1d\xc6\x2a\xf9\x17\xfd\xa5\x6a\xfa\x9f\x4b\xe5\x10\x05\x64\x0a\xb1\xd3\xce\xd4\x17\x27\xa7\x11\xc3\x2a\xa9\x37\xc4\xf3\x7d\xe7\x68\x61\xf0\xeb\x20\x67\x59\x25\x6d\x50\xf4\x49\x4c\x18\xdd\x00\x97\x7e\x4c\x74\x56\xd2\x9d\xec\x37\x66\x8b\xef\x73\xba\xfa\xb7\xe7\x44\x79\x98\x1d\x7f\xee\xe1\xdc\xd6\xbe\xdb\x88\x84\xc2\xf3\xdb\x5e\x8f\x29\xde\xfd\x3e\x79\x05\x19\xae\x72\xf9\x8e\xa7\xc0\x83\x92\x93\x9a\x05\xc4\xd4\x0a\xa1\x6b\x94\x11\xc8\x53\xe1\x92\x35\x31\x09\x72\xb8\x63\x7c\x81\xf3\x05\xfa\xf4\xd9\x5c\xd0\x9d\x42\xe3\xc8\xad\x71\x9d\x66\xe7\x9d\x55\xab\xed\x50\xba\xfd\x86\x6b\x80\x9a\x5b\x2a\xbc\x67\xc2\x0b\xd7\xb8\xc8\xb8\xc4\x01\xf8\xde\xd8\x58\xda\x5f\xb5\xde\x62\xcf\x17\x88\x50\x9b\x01\x7e\x69\x05\x19\xbf\xb8\xbc\xb8\xa0\x19\x8b\xbd\xb6\xc9\xb4\x5c\xae\x1d\x18\xeb\x07\xba\x7d\x40\xa1\x58\x94\xe2\xb8\xbb\xcd\xdd\xd5\xe3\x97\x99\x6d\xa4\xaa\x44\xe9\xbc\xdd\xfa\x81\xd8\x1f\x80\xed\x16\x15\xf8\x0e\x14\x93\xee\x42\x67\xaa\xf5\x72\x96\x28\xa7\x6b\x49\x6e\x87\xf2\xc9\xf5\x17\xc1\xe8\x2a\x3a\x89\xd0\x8d\xfe\xcf\x9f\x5a\x7f\xeb\xff\xe8\xda\xec\x52\xbd\x72\xfc\xb6\x92\x70\x6f\x63\xf6\x07\x7c\x1b\xf1\x89\xbb\x89\x54\xd5\x1d\xae\x21\x4a\x2f\x1d\xd3\x11\xc0\xf9\x62\x3f\x48\x27\x9d\x7f\xde\xc7\xdb\xe6\xb8\xef\x8c\xd5\x9e\x8c\x58\xee\x9e\x0a\xd7\xc8\xea\x36\x57\x05\x8a\xf1\xb6\x99\x6f\x62\x74\x41\x89\x24\x38\x27\xff\x51\x13\xc2\x9e\xf3\xe2\xf5\xae\x5a\x8f\x00\xb6\x23\xbf\xe7\x04\xf5\xf6\x30\x43\xfd\xa8\x3b\x42\x7b\xfd\xb9\x40\x8f\xd2\xa6\xa0\x9d\x3e\xc5\x15\xdb\x4e\xf5\x33\x8d\x79\xa0\xe9\x2f\x02\x55\x94\x7c\xad\x5c\x37\xa6\xf6\x1c\xa8\xbd\xda\x32\x5f\xa0\xb0\xe2\x99\x46\xd6\xec\xf5\xb4\x71\xe1\x70\x15\x3b\x6e\x04\xb4\x4c\xea\x9a\x56\x97\x19\xa4\x2e\x77\xdd\x74\x03\xb9\x80\x2e\x44\x14\xb5\xcb\x26\x66\xc6\x05\x57\x20\x3d\xb9\x02\xe4\xd3\xb8\x20\x10\x33\x27\xa9\x75\xc3\x62\xa2\x1f\xa6\x39\x00\x9d\x21\x92\xf6\x9b\xd9\x57\xd6\x6f\x31\x4f\x13\x96\x42\xda\x2d\xf0\xba\xe8\x4c\x36\xad\xa7\xaa\x4f\xac\xeb\xfb\x6e\x60\x37\x8a\x0c\xdc\xc4\x93\xb4\xd3\xea\xfd\xe0\x57\xae\x1f\x78\x63\xc0\x2b\x10\x09\x27\xa5\x6c\x9f\x0d\x5e\xb1\x24\xec\x4e\x58\x52\xe9\x1a\xa0\x79\x54\x67\xd4\x66\xe9\xd4\xa8\xbd\x62\x49\xcf\x61\x3c\x51\xca\xc0\xd7\x41\x7d\xa2\x4f\x94\xa5\x2c\xf9\x1c\x75\x8f\x97\x26\x5f\x99\xd7\x86\xe0\x18\x86\x6c\xd7\xca\x03\x22\xf9\x27\x4e\xee\x24\x49\xee\xc4\x1e\xc3\xaf\x77\x13\xd9\xeb\x03\xb4\x95\x53\xce\x9d\x56\x69\xc7\x52\xab\x4e\x56\xc8\xf8\xaa\xe4\x84\xca\x6c\x1e\xfd\xe3\x27\xb1\xfa\x49\xfc\x16\xa9\x66\xbd\xad\xb7\x3a\x8a\x2d\xc9\x14\xb1\xc5\xcc\x7f\x08\x1a\x6b\x05\x4c\x27\xa0\xa2\xfc\x3b\x48\x35\x07\x9a\xa8\xfe\x0e\x52\xe9\xbe\x73\x88\xfd\x48\xf7\x32\xd8\x53\xca\x21\x01\xb2\xe9\xd6\xa0\x67\x7b\x9c\x31\x20\x71\xbe\x08\xe5\xb8\x67\x9a\xd0\x57\xa6\x04\xed\xd4\xdc\xa0\x3d\x73\xc9\xec\x9b\x79\x35\x60\x66\x53\x6a\xd7\x64\x03\xf4\x91\x2d\x1d\x10\x3a\xf7\x8e\x65\xaf\xcd\x4d\x3d\xee\xb7\x16\x9d\x21\x0f\x21\xc8\xc8\xf0\xc9\xea\x23\xce\x49\x8a\xa5\xbe\x47\x48\x0a\xc6\xd0\xa4\xe2\x1c\xa8\x44\x84\x66\x8c\x17\xe6\xf0\x0a\xc9\x38\xa4\xaa\x72\x9a\xc1\xd8\xf4\x19\x15\x87\xe9\xe5\xd7\x8a\x52\xad\x01\xe7\x8c\x3b\x0b\xf4\x0f\x11\x0e\x57\xe7\x9a\xb6\x75\x47\xf2\x6b\x45\x38\xa4\xe7\xfb\x18\xfb\x9e\x5a\xf7\x66\x7a\x7b\x99\xe9\xd7\xa9\x0f\x1c\x53\x41\x94\xd5\xc1\x5a\x7c\x7e\x5f\x32\x01\x6d\x27\x6c\xc9\xef\xad\x4e\x21\xb7\x2a\x48\x3a\x40\x91\x39\xc5\x91\x5b\x56\x6b\x9c\x87\xaa\x3b\x7f\x38\x28\x5b\x01\xc2\x8a\x3c\x10\xdf\xc5\xaf\x1a\xef\xff\xce\x10\x25\xb9\x37\x5b\x76\x5c\xd5\x8c\x99\x21\x7d\xa9\x36\xbb\x81\x33\x2c\xf7\xbd\xc6\x48\x52\xc0\x41\xa6\x7c\x20\x05\xfc\x88\x86\xc0\xbd\x04\x4e\x71\x7e\x90\x31\xe7\x76\xd3\xff\xd8\xa0\x41\xf3\xe2\x17\x79\xce\xbe\x41\xfa\xf2\x96\x91\xa4\x7d\x0e\xdf\x67\x9a\x49\xb5\x0b\xaa\x9f\x3f\x3a\x66\x99\xcc\x9d\x0f\x58\xb7\x6c\x1b\x10\xb5\xef\x0b\x23\x74\x47\x81\xeb\x68\x89\xa2\x6b\x85\x56\x2f\x75\x19\x7a\x51\x49\xb6\x06\x0a\x1c\x4b\x7d\x62\x86\x7c\x04\x1d\xdf\xc0\x01\x41\x6e\x95\xc0\x7c\x92\x0f\x2e\xb1\xaa\xfd\x74\x5a\x54\x97\xba\x21\xe8\xca\xb8\x36\xe6\x79\xb5\xe0\x29\x2c\x5b\x4b\x14\xbf\xc5\xf7\x6f\x80\xae\xe5\x2d\x7a\x3e\xc5\xb6\xb7\xf8\x9e\x14\x55\x61\xb6\x4c\xb5\x50\x51\x5b\x39\x8a\x92\xe1\x5c\xc0\x93\x99\x44\xe8\x41\x26\x11\xfa\x9d\x26\x35\x72\x9e\xde\x24\x7c\xaf\x3f\x49\xa1\xe7\xf1\xf3\xa1\x8b\x21\xcb\x19\x96\x93\xea\x8f\x0d\xe2\x6b\xb5\xe1\xc0\x18\x7e\xb4\x1f\xac\x1e\xcf\x5e\xdb\x21\x4f\x55\xfa\x82\x4e\x56\x99\x50\x39\xef\xa8\xbd\x78\xec\x38\x8d\x25\xe2\x63\x46\xcd\xe4\xe9\xe1\x51\x73\x5a\x3c\x41\xd4\x26\xea\xfc\x3d\x41\x6b\xb5\x7e\xe2\xa0\x4d\xff\xe5\xcc\xcd\x81\x76\x6e\xd7\x05\xfa\x0d\x3d\x6f\x54\xb2\xe3\x42\xc8\xe2\xbf\xc2\x5b\x0c\xe8\xd9\xdb\xec\x86\x9d\x5d\x6e\xce\x24\xb9\x7b\xb8\x29\x21\x21\x19\x49\x74\x1f\xfd\x9a\xf1\xa6\x2b\x0d\x06\xa8\x86\x1a\xb0\x37\x33\xb3\x99\x3d\xda\x4f\xec\xfa\xd9\xef\x0e\x1e\x5c\xf7\x3d\x36\x5d\x0e\xe9\x30\xd7\x40\xee\x8d\xa7\x4d\x8d\x01\x75\x74\xcb\x4e\x32\xb4\x59\x22\x76\xa7\x92\x69\x9f\xd8\xb6\xfd\x7e\x8b\xcb\x4f\x4a\xd0\xe7\x5f\xd5\xb6\xad\xef\xa7\xcd\xcc\x7a\xee\xf4\x14\xfd\x1b\x50\xc2\xaa\x3c\xd5\x1d\x79\x46\x68\x8a\x88\x5c\x22\xc1\x50\x0e\xf2\x17\x81\x92\x5b\x48\xee\x10\xb3\x1f\x53\xd9\x37\xe0\x28\xc1\x02\x10\xa1\x29\xdc\x43\x8a\x44\x09\x09\x2a\x70\x39\x9b\xf4\xc2\xf8\x46\x01\xbc\xc4\x02\x7a\xd4\x74\x9f\x07\x7b\x9d\x20\x82\xb8\x65\x55\x9e\x7b\x71\x11\x21\x67\x81\xcb\x89\x11\x1a\x90\x35\x5f\x28\x8c\x4f\x26\x40\x9f\xa7\xc5\x67\x82\xf1\x81\xcd\xb3\xf1\xbf\x5e\x08\xf8\x77\x3e\x5d\xe0\x52\x7f\xb8\x68\x9c\xa0\x92\x76\x1f\xda\xf8\x5f\x37\x84\xf2\xce\x0e\xf1\x81\x76\x41\xfb\xa7\x23\x13\x27\xc1\xa8\xaf\xce\x45\xab\xd1\x13\xe1\x0a\x82\x7d\x91\xea\xed\x42\x11\xf2\xa9\xab\xdd\x56\x52\x75\x92\x1e\x8e\x57\xd5\xbc\xad\xba\xb7\x5e\x0d\xf4\xfc\x27\x75\x7d\x50\x5f\xde\x5e\x0e\xcd\xb6\xba\xa9\xa0\xcb\xae\x4d\x9d\xf6\xdd\x69\xe6\x93\x57\xbd\x8d\xfe\xa0\x55\x0e\xba\xf7\x65\x1c\xa1\x80\xbc\x1a\x08\xce\x38\x38\x07\x1d\xa3\x77\x34\x7f\xf0\xb0\x3d\xaa\xd1\xba\xc3\x37\x8a\x1b\x3c\x05\x37\xab\x3e\xd5\xe0\x76\xf8\xa6\xe2\xba\x0b\xb5\x59\x1d\x9a\x61\x4f\xba\xb2\xf5\xce\x26\x45\x3a\x70\x4a\x23\xef\xc3\x92\xa1\xd8\x24\xa0\x24\xef\x8d\xbe\x5e\x0e\xa5\xd3\xaa\xf8\x0e\xc9\xc3\x4f\x60\x7d\xa1\xf5\x9c\xe7\x61\x1c\xac\xab\x7b\x83\x39\x44\xdb\x93\xba\x8e\x7a\xc4\x47\x13\xe5\x1f\x28\x6a\xcc\x50\xd4\x2f\xa9\x9b\x3c\x03\xd9\x54\x72\x48\xc2\x23\xdb\xd2\x5c\x86\x7a\x3c\x13\xf2\x33\x78\xef\x77\x90\x0d\x71\xd5\xf3\x6a\xde\x79\x2a\x1f\x95\xe1\x3d\xb7\x99\x05\x4b\x30\xfa\xb6\xab\xa3\x40\xaf\x49\x2e\x81\xeb\xbf\x88\x69\xd6\x5a\x9a\x81\x0b\x78\xc6\x11\x19\x07\xb2\xa6\xff\x02\xaf\x98\xb4\x34\x8b\xe8\xf3\x4c\x41\x2c\xb0\x0c\xd0\x0a\x2c\x6d\xbd\x6b\x16\xc7\x0b\x5d\xfb\x5a\x6f\xe8\xe6\xb7\xd1\xa8\x59\x1b\x45\xf1\xbe\xe6\x35\x6b\x2d\xcd\xa0\x05\x3c\xe3\x88\xaa\x31\xf3\xc0\xd4\x4f\x8b\x63\x57\x46\x21\xfc\x07\x09\xbb\xd4\x90\x56\xbb\x4f\x16\x13\xe0\x3a\xe5\xd5\x51\x56\x3b\xb3\xf3\x28\x96\xf7\xb0\xe0\xc0\x1c\x69\xb5\xfb\xf4\x30\x01\xae\xab\x9a\xa5\xac\x76\x06\xc4\x31\xac\xf0\x36\xf5\x2e\xd1\xc9\x77\xa7\xbe\xb4\xc2\xd3\xd3\x90\x8c\x3e\x3e\xc7\x28\xdc\x25\x27\x05\xe6\x0f\xc1\xd9\x69\x69\x06\x30\xe0\x19\x45\x7c\x0f\x38\x0d\x2f\x76\x47\x59\xd9\x47\xb9\x66\x7d\x02\x56\xf8\x98\xaf\xb0\x0c\x65\xd5\x7d\xe0\x1b\xc5\xba\xea\x9c\xc5\x2b\xef\x2c\x5e\x4d\x3e\x8b\x57\xe6\x6b\x4b\x8b\xa2\x7f\x5b\x14\xb7\x36\x8e\x52\xdd\xd8\xcf\x45\x0e\xc6\x10\xdc\x1f\xf9\x36\xcb\xe3\xf9\xb0\xf3\x79\x04\xa1\x86\x64\xd4\xf2\x39\xc6\xe1\x02\xb5\x3c\x9d\x46\x14\xd2\xc8\x3b\x7f\x33\x70\xf8\x98\xf7\x37\x8c\x30\x03\x82\xff\xa6\x59\xc6\x8c\xc7\xf1\x71\x90\x41\xc7\x41\xe6\x38\xc8\x1c\x07\x99\xe3\x20\x73\x1c\x64\x8e\x83\xcc\x71\x90\x39\x0e\x32\xc7\x41\xe6\x38\xc8\xfc\x88\x83\xcc\x7f\x03\x00\x00\xff\xff\x5a\xa3\x3b\x0a\x98\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15512, mode: os.FileMode(420), modTime: time.Unix(1523468166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

