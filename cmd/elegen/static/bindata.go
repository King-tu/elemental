// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcf\x6b\xe3\x3a\x10\xbe\xfb\xaf\x18\x42\x78\x38\xd0\x3a\x97\xc7\x3b\x14\x7a\x28\xe5\x15\x02\xdb\x52\x5a\xd8\x4b\xe9\x41\x75\xc6\xce\xb0\xb2\x14\xa4\x71\xbb\x8b\xf1\xff\xbe\x58\xb6\x14\x27\x71\x7e\x94\x6c\xc9\xde\x62\x67\xbe\x99\x6f\x66\xbe\x4f\xd6\x52\xa4\x3f\x44\x8e\x50\x55\x90\x3c\x23\x27\xb7\x5a\x65\x94\x97\x46\x30\x69\x95\x3c\x88\x02\xa1\xae\xa3\x88\x8a\xa5\x36\x0c\xa3\x9c\x78\x51\xbe\x25\xa9\x2e\xa6\x62\xa9\x0d\xb2\xbe\x24\x95\x4e\x51\x62\x81\x8a\x85\x1c\x45\x51\x56\xaa\x14\x48\x11\xc7\x13\xa8\x22\x00\x80\xaa\xba\x04\x23\x54\x8e\x6d\x89\xe7\x25\xa6\x94\x51\xea\x4a\xd8\x26\xbd\x0f\xa2\x0c\xec\x42\x97\x72\xfe\x84\x39\x59\x46\xb3\x16\x0a\x09\x8c\x93\xc7\xf2\x4d\x52\x7a\xaf\xe7\xe8\x81\xa1\x76\xe2\x51\xb3\x39\x2a\x26\xfe\x15\x57\x55\xd2\x44\xca\xe4\x7f\xf7\xdc\x74\x53\xd7\xfe\xdf\x49\x28\x8b\x6a\xde\x67\xd1\x3d\xd6\x51\x34\x9d\x82\xc3\x7f\x47\x63\x1b\x02\x06\xb9\x34\xca\x02\x2f\x10\xd2\xd2\x18\x54\x0c\xef\xdd\x7f\x3a\x73\xaf\x0b\x57\xaf\x1d\x42\x1f\x1b\x4f\x20\x93\x5a\xf0\x7f\xff\x42\xd5\xe5\x09\x33\xbf\x79\x9c\xcd\x54\xa6\x13\x5f\xa6\xae\xa1\x2d\xde\x52\xcd\x48\xbc\x49\xbc\xd3\xa1\xaf\xc0\x43\x80\xc2\x0f\x20\x65\x59\xa8\x14\x3d\x85\x3e\x0a\x32\x6d\xdc\xcb\x9c\xde\x51\x01\xf9\x0c\x4a\x14\xd8\xb1\xdc\x51\x24\x0e\xb1\x96\x0d\xa9\x7c\xd2\x1b\x74\x1f\x52\x45\x11\x80\xfd\x20\x4e\x17\xab\xf4\x7e\xef\x87\xd7\x7e\xc2\xe2\x01\x52\x61\x5b\xe5\x6e\x6e\x19\x56\x6b\x76\x1a\xbe\xea\x00\xe0\x47\xff\x80\x1f\x3b\x70\xf1\xa4\xc7\x6b\x58\x19\xcd\xe3\x1c\x33\x51\x4a\xf6\x89\xbb\xb4\x8a\x64\x04\xe0\xb5\xb3\x31\xd9\x5b\xc1\x98\x6b\x73\xc2\xfa\x52\x9f\x61\xf7\xfa\x7c\x91\x38\xc4\x1e\xbf\xbe\x00\xf9\x9b\xd6\xe7\x1b\x3a\xcf\x0a\x6f\xb5\x62\x54\xfc\x79\x23\x8a\x21\xe8\x11\x6e\xdc\x5f\x70\x9f\x29\x07\x90\x7f\xca\x9b\x4a\xb3\x1f\xf4\xcc\x3e\x69\xcd\x67\x76\xef\x3f\x43\xa8\x47\x59\x1a\x21\xa1\xae\xbf\x91\xe5\xaa\x1e\x96\xc0\xd7\x69\xe2\x08\x77\x1f\xa3\x89\x21\x8b\xef\x2f\xb8\xcf\xe9\x07\x34\x71\x8a\xe1\xcf\xa8\x89\x9d\x47\xc2\x79\x75\x71\x23\x65\x47\x91\xd0\xae\x64\x20\x25\xe0\x4f\xb2\x4c\x2a\xf7\x26\x24\xb4\xdd\x6a\xd7\x30\xf1\x04\x5e\x5e\x37\x8f\x69\xe7\xd8\x28\x94\x1c\x0a\xf8\xc4\x2d\xeb\xa4\xe5\x1c\xd8\xcb\xc5\x11\x93\x74\xb3\x7a\x17\x06\x84\x24\x61\xd1\xde\x8b\x25\x5c\x43\x21\x96\x2f\xad\x78\x87\xdb\xff\xea\x2b\x64\x03\x1c\xe3\xaa\xa7\xab\xeb\x81\x46\x2f\x43\x70\xc7\x64\x4c\x17\x30\x76\x7d\xf4\x00\x37\x6d\x5f\x3e\xf3\xa8\xaa\x7c\x4c\x5d\x8f\xae\x1a\x70\xbf\xd0\xe6\xf0\xf6\x8d\x6e\xeb\x6a\xea\xa1\x77\x46\x17\xae\xec\xda\xfd\x34\x8c\x4f\x58\xab\x53\x12\x8c\x73\x60\xdd\x3b\x69\x1c\xab\xb5\x4b\x44\x2f\x55\xdc\x72\xde\x75\x77\xd8\x10\xe5\x6a\x99\x2f\xee\xe7\x6b\x70\x84\x7b\x3f\xf8\xc5\x94\xd2\x71\xe9\xa0\x3b\xbe\x8c\xc1\x25\x9b\x79\x56\x1f\xc2\x6d\x6a\x8d\x8b\x5a\xe2\xb0\xf7\x03\xf8\x95\x8a\x3a\xe6\x1c\xdb\x38\x4c\x3c\xe9\xea\x73\x0a\xdb\x56\xd9\x45\x78\xbf\x75\xc8\x35\x06\x3c\x6c\xd1\x68\xed\x80\xab\xa3\xdf\x01\x00\x00\xff\xff\xad\x08\x27\x68\x24\x0e\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3620, mode: os.FileMode(420), modTime: time.Unix(1525199349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\xe0\x19\xd9\x5d\xfb\xe0\x28\x7d\xf6\x5e\x16\xe8\xb5\xd9\x45\x70\xed\x6e\x50\x17\xdd\x87\xa2\xd8\x30\xd2\xd8\x61\x23\x91\x2a\x49\xa5\xc9\x19\xfa\xee\x07\xfe\x15\x29\x4b\x96\xdc\x6d\x0e\x79\xf0\x4b\x10\x0d\x87\xbf\xf9\x47\x0e\x67\x48\x97\x38\xbd\xc3\x1b\x40\xdb\x2d\x4a\x56\x20\x93\x57\x8c\xae\xc9\xa6\xe2\x58\x12\x46\x93\xdf\x71\x01\xa8\xae\x27\x13\x52\x94\x8c\x4b\x34\x9b\x20\x84\xd0\x74\x5d\xc8\xa9\xf9\x4f\x3c\xd2\x74\x3a\x31\xff\x6f\x88\xbc\xad\x6e\x92\x94\x15\x67\xb8\x64\x1c\x24\x3b\x25\x34\x3d\x83\x1c\x0a\xa0\x12\xe7\x66\xca\x76\x8b\x38\xa6\x1b\x40\xc9\xaa\x84\x34\x79\xff\x58\xc2\x15\x67\xf7\x24\x03\x2e\xd0\x69\x5d\x1b\x2c\xa5\x0e\xaa\x6b\x3f\x05\x68\xa6\x07\xe7\x93\xc9\x76\x8b\x4e\x72\x2c\x41\xc8\x0f\xc0\x05\x61\x14\x2d\xcf\x2d\xd8\x1b\x4d\x7e\x29\x25\x27\x37\x95\x04\xe1\x18\x94\x05\x5e\xee\x09\x59\xa0\x13\xa0\x55\xa1\xe6\xdd\x54\x24\xcf\x2e\x68\x55\x08\x03\xd1\x86\xae\xeb\xc9\xd9\x99\x52\x40\xcf\xd0\xda\xa2\xba\x46\x1c\x4a\x0e\x02\xa8\x14\x48\xde\x02\x2a\x99\x10\xe4\x26\x07\x74\x8f\xf3\x0a\x04\x5a\x33\x8e\xb0\xd3\x42\x1b\x63\xa6\x7b\xcd\xac\x5f\xa7\xc9\x44\x2a\xc4\x1d\x7c\x21\x39\xa1\x9b\xc9\x24\x65\x54\x38\xaf\x6f\xb7\xa7\xce\x02\x8a\x0b\x58\xa0\x13\x2d\x4d\x59\x61\x26\x7f\x30\xc2\xad\x0b\xad\xda\xd4\x48\x6a\x6b\x6c\xa6\x2a\x06\xf3\x5f\x5d\x27\xce\xd5\x7e\xca\x8e\x56\xe7\xc6\x14\x37\x23\x0a\x8e\x8e\x4d\xf3\xbf\xf5\x9a\x09\xcb\x5b\x96\x41\x9e\x5c\x50\x49\xe4\xa3\xb5\xfc\x32\x03\xfd\xd9\xd6\xcb\xd3\xd9\x5a\x7f\xb3\x9b\xcf\x90\xca\x64\x72\x8f\xf9\x38\xbc\x73\xe4\xd7\x5b\xe2\x89\x5b\xad\xa9\x62\x5d\x22\xbf\xbc\x02\xa8\x77\x20\xa4\x1a\xad\xeb\xe9\x42\xb3\xbe\xc2\x12\x36\x8c\x3f\x2e\xbb\x58\x59\xc5\x53\x1f\x41\xc3\x7f\xc5\xc9\x3d\x96\x0a\xbd\xc5\x6e\x07\xea\x7a\x31\xa9\x27\x7a\x11\x92\x35\xa2\x4c\x46\x4c\x97\xe2\x1d\x63\xb2\x59\x6b\xdd\x56\x5e\xe5\x15\xc7\x39\xaa\xeb\x37\x44\xc8\xd0\x6f\x18\xe5\x8a\xc2\xd6\x23\xe6\xfa\xf5\x36\x46\xc6\xc7\x4f\xff\xec\xe5\xb4\x31\x7e\xc5\xa8\x04\x2a\x83\x70\xca\x8a\x53\x13\x4b\xd2\x19\x4b\x81\x08\xd5\x9f\x4a\xe9\x64\xb2\xae\x68\x8a\x66\x6c\xa4\x4a\xf3\xb6\xc0\xd9\xbc\x3b\xde\x3a\x2a\x46\x99\x7e\xe8\x66\xd9\x4c\x9c\x35\x65\x63\x02\x46\x25\x23\x54\x02\x47\x92\x21\x8c\x52\x35\xa6\xf4\x1e\xa7\xe9\xb7\x58\x56\xc6\xe6\x44\xa6\xae\x09\x56\x09\xc6\x5a\xa6\x95\x59\x9e\x23\x5c\x96\x40\xb3\xd9\x38\x11\xdb\x7a\x81\x58\x92\x24\xf3\xd0\x39\x3f\x2a\x28\x6b\xfe\x4b\x8d\x66\x41\x45\x14\x33\xc9\xf4\x27\x46\x14\xbe\x1a\xe9\x36\xa8\x4f\xe5\x0d\xa3\xcb\xcc\xc9\x4f\x92\xa4\x1d\x67\xe3\x91\x91\x0e\x63\x95\xfc\x9b\xfe\x52\x39\xfd\xaf\x85\x72\x88\x02\x32\x89\xd8\x69\x67\xf2\x8b\x93\xe3\xc5\xb0\x4a\xea\x09\xc9\x6c\xdf\x3e\x9a\x1b\xfc\x3a\x5a\xb3\xac\x92\x36\x28\x7a\x27\xa6\x8c\xde\x03\x97\x61\x4c\xf4\xaa\xa4\x3b\xab\xdf\x98\x2d\xbe\xcd\xe9\xea\x6f\xc7\x8e\x0a\x30\x5b\xfe\xdc\xc3\xb9\xad\x43\xb7\x11\x09\x45\xe0\xb7\xbd\x1e\x53\xbc\xfb\x7d\xf2\x1a\xd6\xb8\xca\xe5\x1f\x3c\x03\x1e\xa5\x9c\xcc\x0c\x20\xa6\x46\x08\xdd\xa0\x35\x81\x3c\x13\x6e\xb1\xa6\x66\x81\x1c\xee\x98\x50\xe0\x6c\x8e\x3e\x7e\x32\x07\x74\x2b\xd1\x38\x72\x63\x5c\xab\xd8\xf9\xc3\xaa\xd5\x54\x28\xed\x7a\xc3\x15\x40\xfe\x94\x8a\xcf\x99\xf8\xc0\x35\x2e\x32\x2e\x71\x00\xa1\x37\xee\x2d\xed\xef\x5a\x6f\xb1\x67\x73\x44\xa8\x5d\x01\x61\x6a\x05\x99\xbc\xbc\xba\xbc\xa4\x6b\x96\x04\x65\x93\x29\xb9\x5c\x39\x30\x54\x0f\xb4\xeb\x80\x42\xb1\x28\xc5\x71\x7b\x9a\x3b\xab\x87\x0f\x33\x5b\x48\x55\xa9\xd2\xb9\x15\x89\xfd\x11\xd8\x6e\x51\x81\xef\x40\x31\xa1\x04\x9d\x24\x57\xd5\x4d\x4e\x52\x85\x8f\xf4\xe8\xa9\xb7\x4b\x85\x40\xcb\x75\xd3\x95\x87\xae\x3f\x0b\x46\x97\xd3\xd3\x29\xba\xd1\xff\xfc\xa5\xad\xb1\xd1\x98\x5e\x9b\x59\xaa\x72\x4e\xde\x56\x12\x1e\x6c\x04\x7f\x87\xaf\x03\x1e\x72\xe7\x92\xca\xc1\xfd\x19\x45\xe9\xa5\x23\x3c\x00\x38\x9b\xef\x07\x69\x2d\xee\x1f\xf7\xf1\x36\x2b\x3e\x74\xc6\x72\xcf\xfa\x58\xec\xee\x11\x57\xd6\xea\xa2\x57\x85\x8d\xf1\xa6\xb4\xf7\x01\xbb\xa4\x44\x12\x9c\x93\xff\xaa\x7e\x61\xcf\xee\x31\xa5\x96\xb8\x65\x55\x9e\xfd\xc9\x49\x34\x11\x9d\xd8\x62\x5f\x97\xba\x2d\x90\x56\xb8\x83\x8a\x58\xdb\x13\xa9\x57\xd7\x8b\x78\x3b\xf6\x6f\xd0\xce\x12\xa9\xaf\xdc\x75\x3b\x74\x6f\x80\xe6\xe8\xbb\x54\x41\x68\xa7\x0c\x72\xb9\xbc\x95\x5c\x4d\xdd\x1f\x69\xfa\x93\x40\x15\x25\x5f\x2a\x57\xec\xa9\x39\x07\x6a\xaf\xa6\xcc\xe6\x28\x4e\xa8\x26\x78\x66\x6e\xa0\x8d\x8b\xaf\x3b\x10\x12\x2f\xa0\x61\x52\x55\x80\x3a\x2b\x21\x73\x9b\xc1\x35\x4f\x90\x0b\x68\x43\x4c\xa7\xcd\xb0\x89\x99\x71\xc1\x0a\x64\x20\x57\x80\x7c\x1a\x17\x44\x62\x66\x24\xb3\x6e\x98\x8f\xf4\xc3\x38\x07\xa0\x73\x44\xb2\x6e\x33\xbb\x4e\x8d\x5b\xcc\xb3\x94\x65\x90\xb5\xcf\x0f\x9d\xc5\x46\x9b\xd6\x71\x68\x8c\x3c\x36\xf6\x1d\xf0\xae\xd3\xe9\x39\xe8\x47\x69\xa7\xd5\x7b\xe6\x27\x7a\x18\x78\x63\xc0\x6b\x10\x29\x27\xa5\x6c\x6e\x25\x5e\xb3\x34\x2e\x7e\x58\x5a\xe9\x1c\xa0\x79\x54\xe1\xd5\xac\xd2\xb1\x51\x7b\xcd\xd2\x8e\xcd\x78\xaa\x94\x81\x2f\xbd\xfa\x4c\x3f\x52\x96\xb1\xf4\xd3\xb4\xbd\xbd\x34\x79\x65\x2e\x33\xa2\x6d\x18\xb3\x5d\x2b\x0f\x88\xf4\xdf\x38\xbd\x93\x24\xbd\x13\x7b\x0c\xbf\xde\x5d\xc8\x41\x99\xa1\xad\x1c\xb3\xef\xb4\x4a\x3b\x96\x5a\x75\xd6\x85\x4c\x56\x25\x27\x54\xae\x67\xd3\x7f\xfd\x20\x96\x3f\x88\x5f\xa6\xaa\x17\x68\xf2\xad\x8e\x62\x43\x32\x49\x6c\x3e\x09\xef\x99\x86\x0a\x0d\x53\x67\xf8\x33\xea\x37\xa0\xc0\xb1\x84\xdf\x40\xaa\x9e\x73\xb7\xec\x38\x3b\x43\xbf\x81\x54\x76\xed\x6c\xf0\x70\x15\x74\x32\xd8\x1d\xcc\x21\x05\x72\xdf\xce\x4f\x27\x7b\x1c\xd5\x23\x71\x36\x8f\xe5\xb8\x1b\xa2\xd8\x8f\x26\x3d\xed\xe4\xe3\xa8\x32\xec\x72\xc1\x6a\x8f\x0b\x56\x3d\x2e\xf0\x29\x7a\x43\xee\x81\x7e\x67\x2f\xf4\x08\x9d\x05\xdb\xb9\xd3\x1f\x3e\x8f\x77\x7b\x02\x9d\xa3\x00\x21\x5a\xc9\xf1\x4d\xda\x07\x9c\x93\x0c\x4b\x7d\xfe\x90\x0c\x8c\xa1\x69\xc5\x39\x50\x89\x08\x5d\x33\x5e\x98\x4d\x2f\x24\xe3\x90\xa9\x8c\x6b\xfa\x75\x53\xa8\x54\x1c\xc6\xa7\x6d\x2b\x4a\x95\x14\x9c\x33\xee\x2c\xd0\x1f\x22\xee\xf9\x2e\x34\x6d\xeb\xb6\xf2\x97\x8a\x70\xc8\x2e\xf6\x31\x76\xdd\x00\xef\xdd\x21\xcd\x21\xa8\x2f\xcd\xde\x73\x4c\x05\x51\x56\x47\x63\xc9\xc5\x43\xc9\x04\x34\x25\xb9\x25\xbf\xb3\x3a\xc5\xdc\x2a\x91\xe9\x00\x4d\xcd\xee\x9f\xba\x61\x35\xc6\x79\xac\xba\xf3\x87\x83\xb2\x99\x23\xce\xe4\x3d\xf1\x9d\xff\xac\xf1\xfe\x71\x8e\x28\xc9\x83\x96\xb7\xe5\x2a\xdf\xfd\xc6\xf4\x85\x9a\xec\xfa\xe0\xf8\x98\xe8\x34\x46\x92\x02\x0e\x32\xe5\x3d\x29\xe0\x39\x1a\x02\x0f\x12\x38\xc5\xf9\x41\xc6\x5c\xd8\x49\xcf\xd1\x20\x42\x25\x6c\x80\x1f\x64\xcf\x25\x95\xcf\xd1\x94\x75\xce\xb0\x3c\xc8\x90\x5f\xd5\x8c\x67\x62\xca\xae\x65\xc9\xcb\x3c\x67\x5f\x21\x7b\x75\xcb\x48\xda\x3c\x9e\xec\x33\xcc\x64\x80\x4b\xaa\x2f\xcb\x5a\x76\x99\x84\x32\xeb\x31\x6f\xd1\xd4\x93\x6a\xde\x67\x46\xe8\x8e\x02\xd7\xd3\x05\x9a\x5e\x2b\xb4\x7a\xa1\x4f\x87\x97\x95\x64\x1b\x7b\x30\x66\x7b\x9c\x04\x2d\xe7\xc0\x01\xf1\x6d\x94\xc0\x7c\x94\x0f\xae\xb0\x3a\xa1\xe9\xb8\xb0\x2e\x74\x7d\xd7\x96\x71\x6d\xcc\x0b\x52\xf4\x53\x58\xb6\x91\x28\x79\x8b\x1f\xde\x00\xdd\xc8\x5b\xf4\x62\x8c\x6d\x6f\xf1\x03\x29\xaa\xc2\x4c\x19\x6b\xa1\xa2\x36\x72\x14\x65\x8d\x73\x01\x4f\x66\x12\xa1\x07\x99\x44\xe8\x37\x9a\xe4\xe5\x3c\xbd\x49\xf8\x41\x3f\x60\xa2\x17\xc9\x8b\xbe\xf3\x7a\x7c\xf6\xb1\x41\x3c\x20\xf9\xf8\x18\x7e\xb0\xcf\x9b\xdf\xcf\x5e\xdb\xf0\x8c\x55\x7a\x74\xea\x5f\xa8\x42\x6f\xd6\x52\x7b\xfe\xbd\xe3\x34\xb4\x10\xbf\x67\xd4\xcc\x3a\x3d\x3c\x6a\x4e\x8b\x27\x88\xda\x48\x9d\xbf\x25\x68\x8d\xd6\x4f\x1c\xb4\xf1\x5f\xce\xdc\x1c\x68\xeb\x78\x9d\xa3\x5f\xd0\x0b\xaf\x92\xed\xf0\x62\x96\xf0\xcd\xc6\x62\x40\xc7\x5c\x3f\x1b\x76\x66\xb9\x6b\x03\x92\xbb\x7b\xb8\x12\x52\xb2\x26\xa9\x6e\x6f\x7e\x65\xdc\x37\x0b\x51\xcf\xeb\xa9\x11\xbb\xbf\x02\x31\x2d\x61\xf3\x83\x0c\x7d\x9d\x7b\x07\x8f\xae\x29\x1a\xba\x2c\xe8\xd3\x61\xa6\x81\xdc\x95\x5d\xb3\x34\x7a\xd4\xd1\x9d\x14\x59\xa3\xfb\x05\x62\x77\x6a\x31\xed\x13\xdb\x74\x45\x6f\x71\xf9\x51\x09\xfa\xf4\xb3\x9a\xb6\x0d\xfd\x74\x3f\xb1\x9e\x3b\x3b\x43\x7f\x02\x4a\x55\x13\xad\x1b\xa5\x35\xa1\x19\x22\x72\x81\x04\x43\x39\xc8\x9f\x04\x4a\x6f\x21\xbd\x43\xcc\x3e\xbd\xb3\xaf\xc0\x51\x8a\x05\x20\x42\x33\x78\x80\x0c\x89\x12\x52\x54\xe0\x72\x32\xea\xc2\xf8\x8d\x02\x78\x85\x05\x74\xa8\xe9\x1e\x93\x3b\x9d\x20\xa2\xb8\xad\xab\x3c\x0f\xe2\x22\x62\xce\x02\x97\x23\x23\xd4\x23\x6b\x36\x57\x18\x1f\x4d\x80\x3e\x8d\x8b\xcf\x08\xe3\x23\x9b\x27\xc3\xbf\x75\x89\xf8\x77\x1e\xba\x70\xa9\x9f\xb9\xbc\x13\xd4\xa2\xdd\x87\x36\xfc\x5b\x98\x58\xde\xf9\x21\x3e\xd0\x2e\x68\x7e\x68\x74\x50\x83\x1e\x3c\xb5\xf8\x19\x4a\x81\xd6\x35\x4e\xf4\x13\xaf\x76\x72\x9c\x2e\x07\xb7\x91\xcb\x22\xf6\x56\xb2\xb3\x74\x45\x28\xa4\x2e\x77\xeb\x4f\x55\x7e\x06\x38\xd1\x03\x4e\x5c\x90\x2f\x7b\x1a\x85\xd3\xba\x3e\xa8\x98\x6f\x4e\x14\x3f\xad\xf6\x69\x77\xd1\xb6\xa9\x55\xf3\x3b\xcd\x42\xf2\xb2\xb3\x3b\xe8\xb5\xca\x41\x77\xbe\x8e\x20\x14\x91\x97\x3d\xc1\x19\x06\xe7\xa0\x63\xf4\x07\xcd\x1f\x03\xec\x80\x6a\xb4\x6e\xf1\x0d\xe2\x46\xcf\x01\x7e\x34\xa4\x1a\xdc\x16\xdf\x58\x5c\x77\x0a\xfb\xd1\xbe\xfb\x88\xd3\xb6\x6c\x3d\xd3\x2f\x91\x16\x9c\xd2\x28\x7c\x74\xac\x83\x45\x40\x49\xde\x19\x7d\x3d\x1c\x4b\xa7\x55\xf1\x0d\x92\xfb\xaf\x33\xbb\x42\x1b\x38\x2f\xc0\x38\x58\x57\x77\x9f\x76\x88\xb6\xa7\x75\x3d\xed\x10\x3f\x1d\x29\xff\x40\x51\x43\x86\xa2\x6e\x49\xed\xc5\xd3\xb3\x9a\x4a\x0e\x69\xbc\x65\x1b\x9a\x5b\xa1\x01\xcf\x88\xf5\x19\xbd\xf9\x38\x48\x4f\x5c\x76\xbc\x9c\xb4\x9e\x4b\x06\x65\x04\x57\xa7\x66\xc0\x12\x8c\xbe\xcd\xe8\x20\xd0\xaf\x24\x97\xc0\xf5\x8f\xae\xfc\x58\x43\x33\x70\x11\xcf\x30\x22\xe3\x40\x36\xf4\x3f\x10\x24\x93\x86\x66\x11\x43\x9e\x31\x88\x05\x96\x11\x5a\x81\xa5\xcd\x77\x7e\x70\x38\xd1\xd9\x47\x1a\x4f\x37\xdf\x46\x23\x3f\x36\x88\x12\xbc\xe8\xfa\xb1\x86\x66\xd0\x22\x9e\x61\x44\x55\xcd\x05\x60\xea\xd3\xe2\xd8\x91\x41\x88\xf0\x16\xc3\x0e\x79\xd2\x72\xf7\x9e\x63\x04\x5c\x2b\xbd\x3a\xca\x72\xa7\xe1\x1e\xc4\x0a\x6e\x23\x1c\x98\x23\x2d\x77\xef\x2b\x46\xc0\xb5\x55\xb3\x94\xe5\x4e\x57\x39\x84\x15\x9f\xa6\xc1\x21\x3a\xfa\xec\xd4\x87\x56\xbc\x7b\x3c\xc9\xe8\x13\x72\x0c\xc2\x5d\x71\x52\x60\xfe\x18\xed\x9d\x86\x66\x00\x23\x9e\x41\xc4\x77\x80\xb3\xf8\x60\x77\x94\xa5\xbd\xc9\xf3\xe3\x23\xb0\xe2\x87\x19\x85\x65\x28\xcb\xf6\xad\xe0\x20\xd6\xaa\xb5\x17\x57\xc1\x5e\x5c\x8d\xde\x8b\x2b\xf3\x72\xd6\xa0\xe8\x6f\x8b\xe2\xc6\x86\x51\xaa\x1b\xfb\xf4\xe7\x60\x0c\xc1\xfd\x8e\xdc\x0f\x0f\xaf\x87\x9d\xa7\x2e\x84\x3c\xc9\xa8\x15\x72\x0c\xc3\x45\x6a\x05\x3a\x0d\x28\xa4\x91\x23\xda\xce\x8f\x48\x0e\x6f\x14\xff\x0f\x4d\x50\x8f\xe0\xe7\xdc\x0d\x99\xae\x3c\x39\xb6\x42\xe8\xd8\x0a\x1d\x5b\xa1\x63\x2b\x74\x6c\x85\x8e\xad\xd0\xb1\x15\x3a\xb6\x42\xc7\x56\xe8\xd8\x0a\x1d\x5b\xa1\x67\xdf\x0a\xfd\x2f\x00\x00\xff\xff\xf8\xd9\xba\x59\x4a\x3f\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 16202, mode: os.FileMode(420), modTime: time.Unix(1525197159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x4f\x6b\xe3\x3c\x10\x87\xef\xfa\x14\x83\x09\x2f\x0d\xa4\xf6\x7b\x0e\xe4\xb0\x74\xa1\xe4\xd0\xa5\xa4\xec\x29\xe4\xa0\xc8\x13\x5b\x54\x1e\x19\x79\x9c\x25\x08\x7d\xf7\xc5\x7f\xb2\x71\xba\x4e\x03\x4b\x2e\xa5\xcd\x4d\x1e\xcd\xf3\xd3\x3c\xd2\x21\xa5\x54\xaf\x32\x43\xf0\x1e\xe2\x17\xe4\xf8\xc1\xd2\x4e\x67\xb5\x93\xac\x2d\xc5\x3f\x64\x81\x10\x82\x10\xba\x28\xad\x63\x88\x32\xcd\x79\xbd\x8d\x95\x2d\x12\x59\x5a\x87\x6c\xef\x35\xa9\x04\x0d\x16\x48\x2c\x4d\x24\x84\xb2\x54\x31\x90\x4d\xad\x7a\x61\xa7\x29\x83\x05\x44\xeb\x76\xbd\x89\x20\x49\x80\xac\xd1\xc4\x73\xd8\x4b\xa7\x72\x54\xaf\xb3\x14\x65\xaa\x6c\x8a\x42\x88\xbd\x74\xe0\xd0\xb4\xe9\x55\xae\xcb\x6a\x85\x99\xae\xd8\x1d\xe0\x4f\x44\xbc\x1a\xab\x0b\x91\x24\x70\x56\x01\x87\x5c\x3b\xaa\x80\x73\x84\xc2\xa6\x68\xce\xc9\xb1\xd8\xd5\xa4\xce\x7b\xee\xa6\xd7\x72\xc0\x0b\x01\x00\x3d\x7c\xfc\xac\x22\x88\x8e\xad\x49\xf3\xdd\xf4\xd4\x32\xc6\x5b\x5c\x4b\xf4\xa1\x6b\xf7\x1e\x9c\xa4\x0c\x61\x82\xc4\x9a\x0f\xcd\xdd\xcc\x60\x72\xa4\xc2\x7c\xd1\xdd\xe0\xb9\x84\x10\xfa\xe6\x7b\xd0\x3b\xa8\x72\x5b\x9b\xb4\x23\xa3\x1b\xee\x84\x49\xd3\x3c\x64\xc3\x24\x7e\xae\xb7\x46\xab\x27\x9b\x62\x8f\x19\x1d\x61\xed\xfd\x59\x5f\x08\xcb\xb4\x5b\x6e\x60\x01\xff\x8d\x8f\xe7\x5b\xde\xe0\x68\x19\xc3\x9d\x41\x3a\x0d\x14\x7f\x33\xc6\xfe\xaa\x1e\x1c\x4a\xc6\x29\xfc\x7f\x1c\xa5\xf9\x0d\x4b\x73\x28\x64\xb9\xae\xda\xa7\xb6\xd9\x5a\x6b\xe0\xc4\x3e\xf2\x7b\x71\xa5\x74\x48\xdc\x98\x3a\xa5\x3c\x22\x43\xa4\x5a\x52\x34\x8c\xb8\x68\x6d\x49\x34\xae\xae\xa7\x0f\xb5\xbd\x05\x46\x8d\xaa\x7e\x5f\x08\x11\xcc\x81\x5d\x8d\xb3\xbf\x42\x91\xd2\xb1\xb3\xbc\xf9\x1c\x66\xe2\x9d\xea\x15\xaf\x3f\xcb\xf4\x92\xd7\xae\x74\x0b\xaf\x75\x4b\xfa\xc0\x5e\x3b\x21\xcf\x92\x55\xfe\xe5\xe3\x9f\xde\xd9\x77\x34\x78\xe1\x9d\x75\xa5\x5b\x78\x4d\x5b\xd2\xa7\xf2\xfa\x88\x3c\x2a\x75\x85\xec\x34\xee\x6f\xa2\x35\x43\xfe\x6c\x4e\x9f\x24\x1d\xde\xf5\xda\x6c\xb8\x91\xdb\x42\xd2\xe1\x03\xfb\xed\xbc\x2c\x69\x67\xbf\x7c\x8c\x54\x4f\x7f\xbc\x06\x1f\xbd\x3f\xae\x82\xf8\x1d\x00\x00\xff\xff\xb8\xac\x58\x1e\x7b\x0b\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 2939, mode: os.FileMode(420), modTime: time.Unix(1525200396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

