// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\xd0\xeb\xa6\x8b\xe0\xda\x6d\x50\x17\xbd\x87\xa2\xd8\x30\xd2\xc8\x61\x23\x91\x2a\x45\xb9\xc9\x19\xfa\xdf\x0f\xfc\x92\x48\x7d\x58\x72\x9a\x6c\xfb\xe0\x97\x20\x1a\x92\xbf\xf9\xe4\x70\x86\x74\x8e\xa3\x5b\xbc\x01\xb4\xdb\xa1\x70\x0d\x22\x7c\xc9\x68\x42\x36\x25\xc7\x82\x30\x1a\xfe\x89\x33\x40\x55\x35\x9b\x91\x2c\x67\x5c\xa0\xf9\x0c\x21\x84\x82\x24\x13\x81\xfe\xaf\xb8\xa7\x51\x30\xd3\xff\x6f\x88\xb8\x29\xaf\xc3\x88\x65\xa7\x38\x67\x1c\x04\x3b\x21\x34\x3a\x85\x14\x32\xa0\x02\xa7\x7a\xc9\x6e\x87\x38\xa6\x1b\x40\xe1\x3a\x87\x28\x7c\x7f\x9f\xc3\x25\x67\x5b\x12\x03\x2f\xd0\x49\x55\x69\x2c\x29\x0e\xaa\xaa\x7a\x09\xd0\x58\x0d\x2e\x66\xb3\x59\x8d\xf0\x8c\x2c\xd1\x33\xa0\x65\x86\x56\x67\x28\x3c\xa7\x65\x56\x48\x61\x4f\x4f\xe5\x0a\x35\xa0\xe0\x51\x55\x21\x0e\x39\x87\x02\xa8\x28\x90\xb8\x01\x94\xb3\xa2\x20\xd7\x29\xa0\x2d\x4e\x4b\x28\x50\xc2\x38\xc2\x42\x70\x72\x5d\x0a\x50\xdc\xf5\xf2\x17\x96\x66\x0c\x11\x84\x33\x21\x11\x3b\xf8\x85\xe0\x84\x6e\x66\xb3\x88\xd1\xc2\x9a\x69\xb7\x3b\xb1\x82\x52\x9c\xc1\x12\x3d\x53\xdc\xa4\xb0\x7a\xf1\x07\xcd\xdc\xe8\x6c\xc4\xa6\x9a\x53\x5b\x62\xbd\x54\x4e\xd0\xff\x55\x55\x68\x6d\x53\x2f\xe9\x48\x75\xa6\x55\xb1\x2b\x3c\x6b\x2a\x63\x36\xff\x1b\xab\x69\xa7\xbc\x61\x31\xa4\xe1\x39\x15\x44\xdc\x1b\xcd\x2f\x62\x50\x9f\x6d\xb9\x6a\x3a\x4b\xd4\x37\xbb\xfe\x0c\x91\x08\x67\x5b\xcc\xa7\xe1\x9d\xa1\x3a\x40\xc2\x9a\xb8\x53\x92\xca\xa9\x2b\x54\xc7\x83\x03\xf5\x0e\x0a\x21\x47\xab\x2a\x58\xaa\xa9\x2f\xb1\x80\x0d\xe3\xf7\xab\xbe\xa9\xac\xe4\x51\xed\x41\x3d\xff\x92\x93\x2d\x16\x12\xbd\x35\xdd\x0c\x54\xd5\x72\x56\xe9\x58\x23\x09\xa2\x4c\x78\x93\x2e\x8a\x77\x8c\x89\x26\xd6\xfa\xb5\xbc\x4c\x4b\x8e\x53\x54\x55\xaf\x49\x21\x5c\xbb\x61\x94\x4a\x0a\x4b\x26\xac\xad\xe3\x6d\x0a\x8f\x8f\x9f\xfe\x39\x38\xd3\xf8\xf8\x25\xa3\x02\xa8\x70\xdc\x29\x4a\x4e\xb5\x2f\x49\xaf\x2f\x0b\x44\xa8\xfa\x94\x42\x87\xb3\xa4\xa4\x11\x9a\xb3\x89\x22\x2d\xda\x0c\xe7\x8b\x7e\x7f\x2b\xaf\x68\x61\x86\xa1\x9b\xb0\x99\x59\x6d\xf2\x46\x05\x8c\x72\x46\xa8\x00\x8e\x04\x43\x18\x45\x72\x4c\xca\x3d\x4d\xd2\x87\x68\x96\xfb\xea\x78\xaa\x26\x04\xcb\x04\x63\x34\x53\xc2\xac\xce\x10\xce\x73\xa0\xf1\x7c\x1a\x8b\x5d\xb5\x44\x2c\x0c\xc3\x85\x6b\x9c\x9f\x25\x94\x51\xff\x85\x42\x33\xa0\x85\xe7\x33\xc1\xd4\x27\x46\x14\xbe\x6a\xee\xc6\xa9\x4f\x65\x0d\x2d\xcb\xdc\xf2\x0f\xc3\xb0\xed\x67\x6d\x91\x89\x06\x63\xa5\xf8\x46\x7b\xc9\x9c\xfe\xd7\x52\x1a\x44\x02\xe9\x44\x6c\xa5\xd3\xf9\xc5\xf2\xa9\xd9\xb0\x52\xa8\x05\xe1\x7c\xdf\x3e\x5a\x68\xfc\xca\x8b\x59\x56\x0a\xe3\x14\xb5\x13\x23\x46\xb7\xc0\x85\xeb\x13\x15\x95\xb4\x13\xfd\x5a\xed\xe2\x61\x46\x97\x7f\x7b\x76\x94\x83\xd9\xb2\xe7\x9e\x99\xbb\xca\x35\x1b\x11\x90\x39\x76\xdb\x6b\x31\x39\x77\xbf\x4d\x7e\x87\x04\x97\xa9\x78\xcb\x63\xe0\x5e\xca\x89\xf5\x00\x62\x72\x84\xd0\x0d\x4a\x08\xa4\x71\x61\x83\x35\xd2\x01\x72\xb8\x61\x5c\x86\xf3\x05\xfa\xf8\x49\x1f\xd0\xad\x44\x63\xc9\x8d\x72\xad\xea\xe4\xad\x11\xab\xae\x03\x9a\x12\xa5\x3e\x96\xfc\x83\xc5\x3f\x61\xb5\x4d\xb4\x0d\x3e\x00\x2f\x08\xa3\x9e\xfa\x5b\x43\xfb\x56\x75\x0d\xf6\x7c\x81\x08\x35\x2e\x77\x73\x29\x88\xf0\xc5\xe5\xc5\x05\x4d\x58\x68\xa5\xa8\x94\x58\xce\xf9\x3f\x56\x00\xb4\x0f\xfe\x4c\x4e\x91\x82\xe3\xf6\x32\x7b\x38\x8f\x9f\x5e\xa6\x72\x2a\x23\x29\xf3\x6e\xe7\x5a\xbe\x65\xf1\xdd\x0e\x65\xf8\x16\x24\x55\x15\x86\x33\x59\x5c\x59\xd1\xa5\x95\x15\xb4\x55\x4e\x1a\xe1\xea\x73\xc1\xe8\x2a\x38\x09\xd0\xb5\xfa\xe7\x2f\x25\xb0\x31\x78\x70\xa5\x57\xc9\xf2\x35\x7c\x53\x0a\xb8\x33\x4e\xfa\x13\xbe\x8e\x18\xc1\x9e\x35\x32\xaf\x0e\x67\x09\x29\x97\x72\xe2\x08\xe0\x7c\xb1\x1f\xa4\x15\xb0\x3f\xef\x9b\xdb\x44\xb1\x6b\x8c\xd5\x9e\x10\x58\x76\xe3\xde\x96\xaa\xaa\x90\x95\x9e\x61\x5c\x55\xd7\xbe\x53\x2e\x28\x11\x04\xa7\xe4\x7f\x6e\xd1\xde\x2a\x47\x15\x63\x0f\xa7\xc5\xb0\x67\x8f\xf4\x96\x25\x43\x25\xa6\xdd\x24\x7b\x0d\xb8\x40\x8f\x52\x79\xa0\x4e\xe9\x61\xf3\x67\x2b\xa1\xe9\x5a\xdb\x93\xf4\x97\x02\x95\x94\x7c\x29\x6d\x81\x25\xd7\x1c\x28\xbd\x5c\x32\x5f\x20\x3f\x89\xe9\xda\x54\xaf\x75\xa4\xb1\xee\xb0\x49\x38\xac\x19\x34\x93\xe4\xc9\x2b\xcf\x27\x88\x6d\xb0\xda\x86\x05\xd2\x02\xda\x10\x41\xd0\x0c\x6b\x9f\x69\x13\xac\x41\x38\x7c\x0b\x10\x4f\x63\x02\x8f\xcd\x9c\xc4\xc6\x0c\x8b\x89\x76\x98\x66\x00\x74\x86\x48\xdc\xaf\x66\x5f\xe2\xbe\xc1\x3c\x8e\x58\x0c\x71\x3b\x85\xab\x2c\x33\x59\xb5\x9e\xbc\x3d\x31\x73\xef\x3b\x54\x6d\x77\x31\x70\xb8\x4e\x92\x4e\x89\xf7\xa3\x9d\xa2\xae\xa7\xb5\xc4\xbf\x43\x11\x71\x92\x0b\x63\x18\x69\x15\x16\xf9\x15\x06\x8b\x4a\xb5\xe9\xd5\x1c\x59\xdd\x34\x61\x39\xd5\x4d\xbf\xb3\xa8\x67\xf7\x9d\x48\x61\xe0\xcb\xa0\x3c\xc1\x47\xca\x62\x16\x7d\x0a\xda\xfb\x49\x91\xd7\xfa\xc6\xc0\xdb\x77\xfe\xb4\x2b\x69\x81\x22\xfa\x37\x8e\x6e\x05\x89\x6e\x8b\x3d\x8a\x5f\x75\x23\xd7\x39\xda\x95\x96\x53\x36\x9a\x12\xa9\xa3\xa9\x11\x27\xc9\x44\xb8\xce\x39\xa1\x22\x99\x07\xff\xfa\xa9\x58\xfd\x54\xfc\x16\xc8\x82\xbb\x49\xb0\xca\x8b\x0d\x49\x67\xad\x85\xf1\xdc\xc0\xe9\xae\x0f\x77\xe9\xd6\x3f\x40\xc8\xe6\x4d\xbb\xf1\x0f\x10\x52\xd8\xce\x36\x75\x5d\xdb\x3b\xc1\xec\x43\x0e\x11\x90\x6d\x3b\xcb\x3c\xdb\xa3\xfd\x00\xc7\xf9\xc2\xe7\x63\xef\x56\x7c\xe3\xe8\x24\xd3\xc9\xaa\x5e\x89\x65\xa3\xd7\x55\x73\x3d\xa0\x66\x9d\x4c\x37\x64\x0b\xf4\x91\x35\x1d\x60\x3a\x77\xf6\x61\xaf\xce\x75\xc6\xed\xd7\x16\x9d\x21\x07\xc1\x0b\x41\xff\x9e\xe9\x03\x4e\x49\x8c\x85\x3a\x29\x48\x0c\x5a\xd1\xa8\xe4\x1c\xa8\x40\x84\x26\x8c\x67\x7a\xb7\x16\x82\x71\x88\x65\x6e\xd4\xdd\xac\xae\x24\x4a\x0e\xd3\x13\xac\x61\x25\x0f\x7f\xce\x19\xb7\x1a\xa8\x8f\xc2\xef\x88\xce\x15\x6d\x67\xf7\xe0\x97\x92\x70\x88\xcf\xf7\x4d\xec\xbb\xd0\xf4\x43\xbb\x39\x9f\xd4\x1d\xd2\x7b\x8e\x69\x41\xa4\x9a\xde\x58\x78\x7e\x97\xb3\x02\x9a\x6a\xd6\x90\xdf\x19\x21\xfc\xd9\x32\xe5\x28\x8f\x04\x7a\x9f\x06\x76\x58\x8e\x71\xee\xcb\x6a\x0d\x60\xa1\xcc\x1e\xf7\x73\xee\x80\x43\x17\xbf\x2a\xbc\x7f\x9c\x21\x4a\x52\xa7\x03\x6c\xd9\xa6\x6e\x06\x7d\xfa\x52\x2e\xb6\x6d\xa1\x9f\xd0\x7b\x95\x11\x24\x83\x83\x54\x79\x4f\x32\xf8\x11\x15\x81\x3b\x01\x9c\xe2\xf4\x20\x65\xce\xcd\xa2\xef\xac\xd0\xa0\x7a\xe1\x8b\x34\x65\x5f\x21\x7e\x79\xc3\x48\xd4\xc4\xf6\x3e\xd5\x74\xa8\x5d\x50\x75\x49\xd1\x52\x4b\x47\xee\x7c\x40\xbb\x65\x53\x53\xc8\x75\x9f\x19\xa1\x1d\x01\xae\x82\x25\x0a\xae\x24\x5a\xb5\x54\x79\xe7\x45\x29\xd8\x06\x28\x70\x2c\xd4\x8e\x19\xb2\x11\xb4\x6c\x03\x07\x38\xb9\x11\x02\xf3\x49\x36\xb8\xc4\x32\xd9\xd3\x69\x5e\x5d\xaa\x23\xbf\xcd\xe3\x4a\xab\xe7\xe4\x82\xa7\xd0\x6c\x23\x50\xf8\x06\xdf\xbd\x06\xba\x11\x37\xe8\xf9\x14\xdd\xde\xe0\x3b\x92\x95\x99\x5e\x32\x55\x43\x49\x6d\xf8\x48\x4a\x82\xd3\x02\x9e\x4c\x25\x42\x0f\x52\x89\xd0\x07\xaa\x54\xf3\x79\x7a\x95\xf0\x9d\x7a\x38\x42\xcf\xc3\xe7\x43\x07\x43\x92\x32\x2c\x26\xe5\x1f\xe3\xc4\x57\x72\xc1\x81\x3e\xfc\x60\x9e\x95\x1e\x4f\x5f\x53\x03\x4f\x15\xfa\x82\x4e\x16\x99\x50\x31\x6f\x89\xbd\x78\x6c\x3f\x8d\x05\xe2\x63\x7a\x4d\xc7\xe9\xe1\x5e\xb3\x52\x3c\x81\xd7\x26\xca\xfc\x10\xa7\x35\x52\xff\x7d\x4e\xfb\x51\x8b\xaf\x6f\x49\x1f\xdf\xb5\xd8\x7a\x1c\xc1\xbf\x63\x71\xf5\x48\xb1\xd5\x3b\xd8\x33\x95\x24\x28\x05\xda\x2a\xdd\x16\xe8\x37\xf4\xbc\x96\xc9\x34\x9f\xfe\x14\xf7\x21\xc6\x60\x40\xcf\xda\x7a\x35\x74\x56\xd9\x6b\x0a\x92\xda\x8b\xbe\x1c\x22\x92\x90\x48\x75\x65\xaf\x18\xaf\x7b\x1c\xaf\x1d\xaf\xa9\xde\xf4\xfa\xca\x45\x77\xb2\xcd\xaf\x2c\xd4\x35\xf1\x2d\xdc\xdb\x5e\x6e\xec\x72\x62\x48\x86\xb9\x02\xb2\x77\x82\x4d\x10\x0c\x88\xa3\x1a\x40\x92\xa0\xed\x12\xb1\x5b\x19\x36\xfb\xd8\x36\xcd\xdc\x1b\x9c\x7f\x94\x8c\x3e\xfd\x2a\x97\xed\x5c\x3b\x6d\x67\xc6\x72\xa7\xa7\xe8\xbf\x80\x22\x56\xa6\xb1\x6a\xf7\x12\x42\x63\x44\xc4\x12\x15\x0c\xa5\x20\x7e\x29\x50\x74\x03\xd1\x2d\x62\xe6\x3d\x9d\x7d\x05\x8e\x22\x5c\x00\x22\x34\x86\x3b\x88\x51\x91\x43\x84\x32\x9c\xcf\x26\xdd\x48\xbf\x96\x00\x2f\x71\x01\x3d\x62\xda\x17\xe2\x5e\x23\x14\x9e\xdf\x92\x32\x4d\x1d\xbf\x14\xfe\xcc\x0c\xe7\x13\x3d\x34\xc0\x6b\xbe\x90\x18\x1f\xb5\x83\x3e\x4d\xf3\xcf\x04\xe5\x3d\x9d\x67\xe3\x3f\x60\xf1\xe6\x77\x1e\xb3\x70\xae\x9e\xb2\x6a\x23\xc8\xa0\xdd\x87\x36\xfe\x03\x17\x9f\xdf\xd9\x21\x36\x50\x26\x68\x7e\x3d\xa4\x59\xac\x99\x4c\x51\xdd\xdb\x85\xa0\x2f\x85\x05\xab\xd1\x8d\x60\xf3\x80\xb9\xc7\xec\xed\x6c\x10\x72\xa9\xab\x6e\x7b\x22\xbb\x13\x07\xc7\x49\x66\xce\x52\xd5\xaf\xad\x06\xfa\xc8\x93\xaa\x3a\xa8\xd7\x6b\x0a\x8e\x7a\x59\x55\x27\xce\x65\x5b\xa7\x56\x4b\x68\x25\x73\xc9\xab\xde\xe6\x71\x50\x2b\x0b\xdd\xfb\x80\x82\x90\x47\x5e\x0d\x38\x67\x1c\x9c\x83\xf2\xd1\x5b\x9a\xde\x3b\xd8\x0e\x55\x4b\xdd\x9a\x37\x8a\xeb\xbd\x18\xd4\xa3\x2e\x55\xe3\xb6\xe6\x4d\xc5\xb5\x45\x5a\x3d\x3a\x74\x74\x9f\xb4\x79\xab\x95\x75\x88\xb4\xe0\xa4\x44\xce\x83\xa3\xa6\x98\x20\xa0\x24\xed\xf5\xbe\x1a\xf6\xb9\xd3\x32\x7b\x00\xe7\xe1\x7b\xd4\x3e\xd7\xee\x76\x28\xc2\x39\x11\x4a\x52\x34\xd7\x19\xde\x43\x5d\x3c\x50\x7c\x5b\x6d\x1e\xa2\xc0\x49\x55\x05\x8e\x3b\xad\x56\xc1\x44\xfe\x07\xb2\xea\xe1\xe4\x31\x42\xfd\x9c\xda\xf1\x34\x10\x60\x39\x87\xc8\xdf\xc5\x0d\xcd\x06\xad\x33\x67\x42\xc8\x7a\x0f\x47\x16\xb2\x26\xae\x7a\x9e\x5f\x5a\x6f\x2e\xa3\x3c\x9c\x5b\x5d\x3d\x60\x08\x5a\xde\x66\x74\x14\xe8\x15\x49\x05\x70\xf5\xf3\xa8\x7a\xac\xa1\x69\x38\x6f\xce\x38\x22\xe3\x40\x36\xf4\x3f\xe0\xe4\x97\x86\x66\x10\xdd\x39\x53\x10\x33\x2c\x3c\xb4\x0c\x0b\x93\x02\xeb\xc1\xf1\xdc\xd7\xbc\x02\x69\xba\xfe\xd6\x12\xd5\x63\xa3\x28\xce\x3b\x70\x3d\xd6\xd0\x34\x9a\x37\x67\x1c\x51\x96\x68\x0e\x98\xfc\x34\x38\x66\x64\x14\xc2\xbd\xf7\x32\x43\x35\x69\xd5\xbd\x19\x9b\x00\xd7\xca\xb8\x96\xb2\xea\x5c\xd1\x8c\x62\x39\xf7\x57\x16\xcc\x92\x56\xdd\x1b\xae\x09\x70\x6d\xd1\x0c\x65\xd5\xb9\x87\x18\xc3\xf2\x0f\x58\xe7\x5c\x9d\x7c\x9c\xaa\x73\xcc\xdf\x3d\x35\x49\xcb\xe3\xce\x18\x85\xbb\xe4\x24\xc3\xfc\xde\xdb\x3b\x0d\x4d\x03\x7a\x73\x46\x11\xdf\x01\x8e\xfd\xb3\xde\x52\x56\xe6\xee\xb7\x1e\x9f\x80\xe5\x5f\x5b\x48\x2c\x4d\x59\xb5\xef\x91\x47\xb1\xd6\xad\xbd\xb8\x76\xf6\xe2\x7a\xf2\x5e\x5c\xeb\x57\xbc\x06\x45\x7d\x1b\x14\x3b\x36\x8e\x52\x5e\x9b\x67\x48\x0b\xa3\x09\xf6\x17\xdf\xf5\xf0\x78\x3c\x74\x5e\xe1\x10\xaa\x49\x5a\x2c\x77\xc6\x38\x9c\x27\x96\x23\xd3\x88\x40\x0a\xb9\xf3\x6b\x93\xc3\x1b\xbe\xbf\xa1\x99\x19\x60\xfc\xb4\x5d\x8d\xa9\x9e\x8e\x2d\x0d\x3a\xb6\x34\xc7\x96\xe6\xd8\xd2\x1c\x5b\x9a\x31\xc4\x63\x4b\x73\x6c\x69\x8e\x2d\xcd\xb1\xa5\x39\xb6\x34\xc7\x96\xe6\x07\x69\x69\xfe\x1f\x00\x00\xff\xff\x2a\x82\x3a\x0f\x60\x3e\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15968, mode: os.FileMode(420), modTime: time.Unix(1521273344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

