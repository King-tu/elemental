// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\x38\xf2\x7f\xf7\x5f\x31\x5f\xa1\xbb\x6b\x7f\xe1\x28\x7d\xf6\x5e\x16\xe8\xb5\xe9\x22\xb8\x76\x1b\x34\x45\xef\xa1\x28\x36\x8c\x34\x76\xd8\x48\xa4\x4a\x51\x69\x72\x86\xfe\xf7\x03\x7f\x49\xa4\x2c\x59\x72\xb6\xd9\xeb\x43\x5e\x82\x68\x48\x7e\xe6\x27\x87\x33\xa4\x0b\x92\xdc\x90\x0d\xc2\x76\x0b\xf1\x05\xca\xf8\x25\x67\x6b\xba\xa9\x04\x91\x94\xb3\xf8\x0f\x92\x23\xd4\xf5\x6c\x46\xf3\x82\x0b\x09\xf3\x19\x00\x40\xb4\xce\x65\x64\xfe\x2b\xef\x59\x12\xcd\xcc\xff\x1b\x2a\xaf\xab\xab\x38\xe1\xf9\x31\x29\xb8\x40\xc9\x8f\x28\x4b\x8e\x31\xc3\x1c\x99\x24\x99\x59\xb2\xdd\x82\x20\x6c\x83\x10\x5f\x14\x98\xc4\x1f\xee\x0b\x3c\x17\xfc\x96\xa6\x28\x4a\x38\xaa\x6b\x83\xa5\xc4\x81\xba\x6e\x96\x20\x4b\xf5\xe0\x62\x36\xdb\x6e\xe1\x59\x46\x24\x96\xf2\x23\x8a\x92\x72\x06\xab\x13\x0b\xf6\x46\x93\x5f\x48\x29\xe8\x55\x25\xb1\x74\x13\x94\x06\x0d\xdf\x67\x74\x09\xcf\x90\x55\xb9\x5a\x77\x55\xd1\x2c\x3d\x65\x55\x5e\x1a\x88\x2e\x74\x5d\xcf\x8e\x8f\x95\x00\x7a\x85\x96\x16\xea\x1a\x04\x16\x02\x4b\x64\xb2\x04\x79\x8d\x50\xf0\xb2\xa4\x57\x19\xc2\x2d\xc9\x2a\x2c\x61\xcd\x05\x10\x27\x85\x56\xc6\x2c\x6f\x24\xb3\x76\x8d\xe2\x99\x54\x88\x3b\xf8\xa5\x14\x94\x6d\x66\xb3\x84\xb3\xd2\x59\x7d\xbb\x3d\x72\x1a\x30\x92\xe3\x12\x9e\x69\x6e\x4a\x0b\xb3\xf8\xa3\x61\x6e\x4d\x68\xc5\x66\x86\x53\x57\x62\xb3\x54\x4d\x30\xff\xd5\x75\xec\x4c\xdd\x2c\xd9\x91\xea\xc4\xa8\xe2\x56\x04\xce\xd1\xbe\x69\xff\xb7\x56\x33\x6e\x79\xcb\x53\xcc\xe2\x53\x26\xa9\xbc\xb7\x9a\x9f\xa5\xa8\x3f\xbb\x72\x35\x74\xbe\xd6\xdf\xfc\xea\x0b\x26\x32\x9e\xdd\x12\x31\x0d\xef\x04\x9a\x78\x8b\x1b\xe2\x56\x4b\xaa\xa6\xae\xa0\x09\x2f\x0f\xea\x3d\x96\x52\x8d\xd6\x75\xb4\xd4\x53\x5f\x12\x89\x1b\x2e\xee\x57\x7d\x53\x79\x25\x92\xc6\x83\x66\xfe\xb9\xa0\xb7\x44\x2a\xf4\xce\x74\x3b\x50\xd7\xcb\x59\x3d\xd3\x41\x48\xd7\xc0\xb8\x0c\x26\x9d\x95\xef\x39\x97\x6d\xac\xf5\x6b\x79\x9e\x55\x82\x64\x50\xd7\x6f\x68\x29\x7d\xbb\x11\xc8\x14\x85\xaf\x27\xac\x6d\xe2\x6d\x0a\x8f\x4f\x9f\xff\x7f\x70\xa6\xf5\xf1\x4b\xce\x24\x32\xe9\xb9\x53\x56\x82\x19\x5f\xd2\x5e\x5f\x96\x40\x99\xfe\x54\x42\xc7\xb3\x75\xc5\x12\x98\xf3\x89\x22\x2d\xba\x0c\xe7\x8b\x7e\x7f\x6b\xaf\x18\x61\x86\xa1\xdb\xb0\x99\x39\x6d\x8a\x56\x05\x02\x05\xa7\x4c\xa2\x00\xc9\x81\x40\xa2\xc6\x94\xdc\xd3\x24\x7d\x88\x66\x45\xa8\x4e\xa0\xea\x9a\x12\x95\x60\xac\x66\x5a\x98\xd5\x09\x90\xa2\x40\x96\xce\xa7\xb1\xd8\xd6\x4b\xe0\x71\x1c\x2f\x7c\xe3\xfc\xac\xa0\xac\xfa\x2f\x34\x9a\x05\x2d\x03\x9f\x49\xae\x3f\x09\x30\xfc\x66\xb8\x5b\xa7\x3e\x96\x35\x8c\x2c\x73\xc7\x3f\x8e\xe3\xae\x9f\x8d\x45\x26\x1a\x8c\x57\xf2\x2f\xda\x4b\xe5\xf4\x3f\x97\xca\x20\x0a\xc8\x24\x62\x27\x9d\xc9\x2f\x8e\x4f\xc3\x86\x57\x52\x2f\x88\xe7\xfb\xf6\xd1\xc2\xe0\xd7\x41\xcc\xf2\x4a\x5a\xa7\xe8\x9d\x98\x70\x76\x8b\x42\xfa\x3e\xd1\x51\xc9\x76\xa2\xdf\xa8\x5d\x3e\xcc\xe8\xea\x6f\xcf\x8e\xf2\x30\x3b\xf6\xdc\x33\x73\x5b\xfb\x66\xa3\x12\x73\xcf\x6e\x7b\x2d\xa6\xe6\xee\xb7\xc9\x2b\x5c\x93\x2a\x93\xef\x44\x8a\x22\x48\x39\xa9\x19\x00\xae\x46\x28\xdb\xc0\x9a\x62\x96\x96\x2e\x58\x13\x13\x20\x87\x1b\xc6\x67\x38\x5f\xc0\xa7\xcf\xe6\x80\xee\x24\x1a\x47\x6e\x95\xeb\x14\x3b\xef\xac\x58\x6d\x85\xd2\xad\x37\x5c\x01\xd4\x9c\x52\xe1\x39\x13\x1e\xb8\xc6\x44\xc6\x24\x0e\xc0\xb7\xc6\xad\xa5\xfd\x55\xed\x2d\xf6\x7c\x01\x94\xd9\x08\xf0\x53\x2b\xca\xf8\xc5\xf9\xd9\x19\x5b\xf3\xd8\x2b\x9b\x4c\xc9\xe5\xca\x81\xb1\x7a\xa0\x5b\x07\xe4\x6a\x8a\x12\x9c\x74\x97\xb9\xb3\x7a\xfc\x30\xb3\x85\x54\x95\x28\x99\xb7\x5b\xdf\x11\xfb\x1d\xb0\xdd\x42\x4e\x6e\x50\x4d\xd2\x55\xe8\x4c\x95\x5e\x4e\x13\x65\x74\xcd\xc9\xad\x50\x36\xb9\xfc\x52\x72\xb6\x8a\x8e\x22\xb8\xd2\xff\xfc\xa9\xe5\xb7\xf6\x8f\x2e\xcd\x2a\x55\x2b\xc7\x6f\x2b\x89\x77\xd6\x67\x7f\xe0\xb7\x11\x9b\xb8\x93\x48\x65\xdd\xe1\x1c\xa2\xe4\xd2\x3e\x1d\x01\x9c\x2f\xf6\x83\x74\xc2\xf9\xe7\x7d\x73\xdb\x18\xf7\x8d\xb1\xda\x13\x11\xcb\xdd\x5d\xe1\x0a\x59\x5d\xe6\x2a\x47\x71\xd1\x16\xf3\x8d\x8f\xce\x18\x95\x94\x64\xf4\x3f\xaa\x43\xd8\xb3\x5f\xbc\xda\x55\xcb\x11\xc0\x76\xf8\xf7\xec\xa0\xde\x1a\x66\xa8\x1e\x75\x5b\x68\xaf\x3d\x17\xf0\x5d\xca\x14\xd8\xa9\x53\x5c\xb2\xed\x64\x3f\x53\x98\x07\x92\xfe\x52\x42\xc5\xe8\xd7\xca\x55\x63\x6a\xcd\x81\xd2\xab\x25\xf3\x05\x84\x19\xcf\x14\xb2\x66\xad\x27\x8d\x73\x87\xcb\xd8\x71\xc3\xa0\x9d\xa4\x8e\x69\x75\x98\x61\xea\x62\xd7\x75\x37\x98\x95\xd8\x85\x88\xa2\x76\xd8\xf8\xcc\x98\xe0\x02\xa5\xc7\xb7\x44\xf9\x38\x26\x08\xd8\xcc\x69\x6a\xcd\xb0\x98\x68\x87\x69\x06\x80\x13\xa0\x69\xbf\x9a\x7d\x69\xfd\x9a\x88\x34\xe1\x29\xa6\xdd\x04\xaf\x93\xce\x64\xd5\x7a\xb2\xfa\xc4\xbc\xbe\xef\x04\x76\xad\xc8\xc0\x49\x3c\x49\x3a\x2d\xde\x0f\x7e\xe4\xfa\x8e\x37\x0a\xbc\xc2\x32\x11\xb4\x90\xed\xb5\xc1\x2b\x9e\x84\xd5\x09\x4f\x2a\x9d\x03\xf4\x1c\x55\x19\xb5\x51\x3a\xd5\x6b\xaf\x78\xd2\xb3\x19\x8f\x94\x30\xf8\x75\x50\x9e\xe8\x13\xe3\x29\x4f\x3e\x47\xdd\xed\xa5\xc9\x17\xe6\xb6\x21\xd8\x86\xe1\xb4\x4b\x65\x81\x32\xf9\x27\x49\x6e\x24\x4d\x6e\xca\x3d\x8a\x5f\xee\x06\xb2\x57\x07\x68\x2d\xa7\xec\x3b\x2d\xd2\x8e\xa6\x56\x9c\x75\x2e\xe3\x8b\x42\x50\x26\xd7\xf3\xe8\x1f\x3f\x95\xab\x9f\xca\xdf\x22\x55\xac\xb7\xf9\x56\x7b\xb1\x25\x99\x24\xb6\x98\xf9\x17\x41\x63\xa5\x80\xa9\x04\x94\x97\x7f\x47\xa9\xfa\x40\xe3\xd5\xdf\x51\x2a\xd9\x77\x36\xb1\xef\xe9\xde\x09\x76\x97\x0a\x4c\x90\xde\x76\x73\xd0\xb3\x3d\xc6\x18\xe0\x38\x5f\x84\x7c\xdc\x35\x4d\x68\x2b\x93\x82\x76\x72\x6e\x50\x9e\xb9\x60\xf6\xd5\xbc\x18\x50\xb3\x49\xb5\x1b\x7a\x8b\xec\x3b\x6b\x3a\xc0\x74\xee\x6d\xcb\x5e\x9d\x9b\x7c\xdc\xaf\x2d\x9c\x80\x87\x10\x44\x64\x78\x65\xf5\x91\x64\x34\x25\x52\x9f\x23\x34\x45\xa3\x68\x52\x09\x81\x4c\x02\x65\x6b\x2e\x72\xb3\x79\x4b\xc9\x05\xa6\x2a\x73\x9a\xc6\xd8\xd4\x19\x95\xc0\xe9\xe9\xd7\xb2\x52\xa5\x81\x10\x5c\x38\x0d\xf4\x47\x19\x36\x57\xa7\x9a\xb6\x75\x5b\xf2\x6b\x45\x05\xa6\xa7\xfb\x26\xf6\x5d\xb5\xee\x8d\xf4\xf6\x30\xd3\xb7\x53\x1f\x04\x61\x25\x55\x5a\x07\x63\xf1\xe9\x5d\xc1\x4b\x6c\x2b\x61\x4b\x7e\x6f\x65\x0a\x67\xab\x84\xa4\x1d\x14\x99\x5d\x1c\xb9\x61\x35\x26\x44\x28\xba\xb3\x87\x83\xb2\x19\x20\xcc\xc8\x03\xfe\x5d\xfc\xaa\xf1\xfe\xef\x04\x18\xcd\xbc\xde\xb2\x63\xaa\xa6\xcd\x0c\xe9\x4b\xb5\xd8\x35\x9c\x61\xba\xef\x55\x46\xd2\x1c\x0f\x52\xe5\x03\xcd\xf1\x47\x54\x04\xef\x24\x0a\x46\xb2\x83\x94\x39\xb5\x8b\xfe\xc7\x0a\x0d\xaa\x17\xbf\xc8\x32\xfe\x0d\xd3\x97\xd7\x9c\x26\xed\x75\xf8\x3e\xd5\x4c\xa8\x9d\x31\x7d\xfd\xd1\x51\xcb\x44\xee\x7c\x40\xbb\x65\x5b\x80\xa8\x75\x5f\x38\x65\x3b\x02\x5c\x46\x4b\x88\x2e\x15\x5a\xbd\xd4\x69\xe8\x45\x25\xf9\x06\x19\x0a\x22\xf5\x8e\x19\xb2\x11\x76\x6c\x83\x07\x38\xb9\x15\x82\x88\x49\x36\x38\x27\x2a\xf7\xb3\x69\x5e\x5d\xea\x82\xa0\xcb\xe3\xd2\xa8\xe7\xe5\x82\xc7\xd0\x6c\x23\x21\x7e\x4b\xee\xde\x20\xdb\xc8\x6b\x78\x3e\x45\xb7\xb7\xe4\x8e\xe6\x55\x6e\x96\x4c\xd5\x50\x51\x5b\x3e\x8a\xb2\x26\x59\x89\x8f\xa6\x12\x65\x07\xa9\x44\xd9\x03\x55\x6a\xf8\x3c\xbe\x4a\xe4\x4e\x3f\x49\xc1\xf3\xf8\xf9\xd0\xc1\xb0\xce\x38\x91\x93\xf2\x8f\x75\xe2\x6b\xb5\xe0\x40\x1f\x7e\xb4\x0f\x56\xdf\x4f\x5f\x5b\x21\x4f\x15\xfa\x8c\x4d\x16\x99\x32\x39\xef\x88\xbd\xf8\xde\x7e\x1a\x0b\xc4\xef\xe9\x35\x13\xa7\x87\x7b\xcd\x49\xf1\x08\x5e\x9b\x28\xf3\x43\x9c\xd6\x4a\xfd\xc8\x4e\x9b\xfe\xe5\xd4\xcd\x90\x75\x4e\xd7\x05\xfc\x06\xcf\x1b\x91\x6c\xbb\x10\x4e\xf1\x6f\xe1\x2d\x06\xf6\xac\x6d\x56\xe3\xce\x2a\xd7\x67\xd2\xcc\x5d\xdc\x14\x98\xd0\x35\x4d\x74\x1d\xfd\x9a\x8b\xa6\x2a\x0d\x1a\xa8\x86\x1a\x4c\x6f\x7a\x66\xd3\x7b\xb4\x4f\xec\xfa\xda\xef\x06\xef\x5d\xf5\x3d\xd6\x5d\x0e\xc9\x30\xd7\x40\xee\x8e\xa7\x0d\x8d\x01\x71\x74\xc9\x4e\xd7\x70\xbb\x04\x7e\xa3\x82\x69\x1f\xdb\xb6\xfc\x7e\x4b\x8a\x4f\x8a\xd1\xe7\x5f\xd5\xb2\xad\x6f\xa7\xdb\x99\xb5\xdc\xf1\x31\xfc\x1b\x21\xe1\x55\x96\xea\x8a\x7c\x4d\x59\x0a\x54\x2e\xa1\xe4\x90\xa1\xfc\xa5\x84\xe4\x1a\x93\x1b\xe0\xf6\x31\x95\x7f\x43\x01\x09\x29\x11\x28\x4b\xf1\x0e\x53\x28\x0b\x4c\x20\x27\xc5\x6c\xd2\x0d\xe3\x1b\x05\xf0\x92\x94\xd8\x23\xa6\x7b\x1e\xec\x35\x42\x19\xf8\x6d\x5d\x65\x99\xe7\x97\x32\x9c\x99\x93\x62\xa2\x87\x06\x78\xcd\x17\x0a\xe3\x93\x71\xd0\xe7\x69\xfe\x99\xa0\x7c\xa0\xf3\x6c\xfc\xd7\x0b\xc1\xfc\x9d\xa7\x0b\x52\xe8\x87\x8b\xc6\x08\x2a\x68\xf7\xa1\x8d\xff\xba\x21\xe4\x77\x72\x88\x0d\xb4\x09\xda\x9f\x8e\x4c\xec\x04\xa3\xbe\x3c\x17\xad\x46\x77\x84\x4b\x08\xf6\x46\xaa\xb7\x0a\x05\xf0\xa9\xab\xdd\x52\x52\x55\x92\x1e\x8e\x97\xd5\xbc\xa5\xba\xb6\x5e\x0d\xd4\xfc\x47\x75\x7d\x50\x5d\xde\x1e\x0e\xcd\xb2\xba\xc9\xa0\xcb\xae\x4e\x9d\xf2\xdd\x49\xe6\x93\x57\xbd\x85\xfe\xa0\x56\x0e\xba\xf7\x66\x1c\x20\x20\xaf\x06\x9c\x33\x0e\x2e\x50\xfb\xe8\x1d\xcb\xee\x3d\x6c\x8f\x6a\xa4\xee\xcc\x1b\xc5\x0d\xae\x82\x9b\x51\x9f\x6a\x70\x3b\xf3\xa6\xe2\xba\x03\xb5\x19\x1d\xea\x61\x8f\xba\xbc\xf5\xca\x26\x44\x3a\x70\x4a\x22\xef\x61\xc9\x50\x6c\x10\x30\x9a\xf5\x7a\x5f\x0f\x87\xdc\x59\x95\x3f\x80\xf3\xf0\x15\x58\x9f\x6b\xb7\x5b\x48\x48\x41\xa5\x96\x14\xe6\x26\xd5\x07\xa8\x8b\x07\x8a\xef\xae\x65\x0e\x51\xe0\xa8\xae\x23\xcf\x9d\x4e\xab\x68\x22\xff\x03\x59\xf5\x70\x0a\x18\x41\x3f\xa7\x6e\x3c\x0d\x04\x58\x21\x30\x09\x77\x71\x4b\x73\x41\xeb\xcd\x99\x10\xb2\xc1\x13\x80\x83\x6c\x88\xab\x9e\x8b\xf4\xce\xed\xf9\x28\x0f\xef\x06\xce\x0c\x58\x82\x91\xb7\x1d\x1d\x05\x7a\x4d\x33\x89\x42\xff\x48\xa6\x19\x6b\x69\x06\x2e\x98\x33\x8e\xc8\x05\xd2\x0d\xfb\x17\x7a\xf9\xa5\xa5\x59\x44\x7f\xce\x14\xc4\x9c\xc8\x00\x2d\x27\xd2\xa6\xc0\x66\x70\x3c\xf7\xb5\x17\xf8\x86\x6e\xbe\x8d\x44\xcd\xd8\x28\x8a\xf7\xc0\xd7\x8c\xb5\x34\x83\x16\xcc\x19\x47\x54\xb5\x9a\x07\xa6\x3e\x2d\x8e\x1d\x19\x85\xf0\xef\x28\xec\x50\x43\x5a\xed\xde\x62\x4c\x80\xeb\x64\x5c\x47\x59\xed\xb4\xd3\xa3\x58\xde\x5d\x83\x03\x73\xa4\xd5\xee\x6d\xc4\x04\xb8\xae\x68\x96\xb2\xda\xe9\x19\xc7\xb0\xc2\x03\xd6\x3b\x57\x27\x1f\xa7\xfa\x1c\x0b\x77\x4f\x43\x32\xf2\xf8\x33\x46\xe1\xce\x05\xcd\x89\xb8\x0f\xf6\x4e\x4b\x33\x80\xc1\x9c\x51\xc4\xf7\x48\xd2\xf0\xac\x77\x94\x95\xbd\xa7\x6b\xc6\x27\x60\x85\xf7\xfb\x0a\xcb\x50\x56\xdd\x3b\xbf\x51\xac\x8b\xce\x5e\xbc\xf0\xf6\xe2\xc5\xe4\xbd\x78\x61\x1e\x60\x5a\x14\xfd\x6d\x51\xdc\xd8\x38\x4a\x75\x65\x5f\x90\x1c\x8c\x21\xb8\xdf\xfd\x36\xc3\xe3\xf1\xb0\xf3\x62\x02\xd0\x90\x8c\x58\xfe\x8c\x71\xb8\x40\x2c\x4f\xa6\x11\x81\x34\xf2\xce\xcf\x08\x0e\xef\xfc\xfe\x86\xae\x66\x80\xf1\xdf\xd4\xde\xd8\x32\xea\xa9\xb7\x81\xa7\xde\xe6\xa9\xb7\x79\xea\x6d\x9e\x7a\x9b\x31\xc4\xa7\xde\xe6\xa9\xb7\x79\xea\x6d\x9e\x7a\x9b\xa7\xde\xe6\xa9\xb7\xf9\x41\x7a\x9b\xff\x06\x00\x00\xff\xff\x0d\xba\xa7\x8a\xbe\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15550, mode: os.FileMode(420), modTime: time.Unix(1522197499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

