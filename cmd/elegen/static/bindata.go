// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xa1\x7c\x38\xd0\x38\x97\x8f\x3d\x14\x7a\x28\x65\x0b\x81\x6d\x29\x2d\xec\xa5\xf4\xa0\x3a\x63\x77\x58\x59\x0a\xd2\xa4\xdd\x22\xfc\xdf\x17\xcb\x96\xe2\xa4\x4e\xd6\xdd\x86\xf6\x54\xc9\x33\x6f\x9e\xe6\xbd\x91\xb2\x12\xf9\x2f\x51\x22\x38\x07\xd9\x3d\x72\x76\xa9\x55\x41\xe5\xda\x08\x26\xad\xb2\x1b\x51\x21\xd4\x75\x92\x50\xb5\xd2\x86\x61\x52\x12\x3f\xaf\x9f\xb2\x5c\x57\x73\xb1\xd2\x06\x59\xcf\x48\xe5\x73\x94\x58\xa1\x62\x21\x27\x49\x52\xac\x55\x0e\xa4\x88\xd3\x29\xb8\x04\x00\x1a\x6c\x23\x54\x89\x6d\x85\xfb\x15\xe6\x54\x50\xee\x2b\xd8\x06\xbd\x89\x89\x08\xd9\x1d\x96\x64\x19\xcd\x62\x89\x8a\x89\xdf\x52\xe7\xb2\x6b\xbd\x44\x99\x7d\xf7\xeb\x86\x53\x5d\x87\xaf\x53\xe7\x00\xd5\xb2\x81\xa9\x93\x64\x3e\x07\x1f\xfa\x13\x8d\x25\xad\xc0\x20\xaf\x8d\xb2\xc0\xcf\x08\xf9\xda\x18\x54\x0c\x2f\xdd\x37\x5d\xf8\xed\xca\x43\xb7\xac\xfb\xb9\xe9\x14\x0a\xa9\x05\x7f\xfb\x1f\x5c\x87\x13\x9b\x74\x71\xbb\x58\xa8\x42\x67\xa1\x4c\x5d\x43\x5b\xbc\x65\x55\x90\x78\x92\x78\xa5\xe3\x11\x22\x0f\x01\x0a\x5f\x81\x94\x65\xa1\x72\x0c\x14\xfa\x59\x50\x68\xe3\x37\x4b\x7a\x41\x05\x14\x10\x94\xa8\xb0\x63\xb9\xa7\x48\x1a\x63\x2d\x1b\x52\xe5\xb4\xd7\xd3\x7e\x8a\x4b\x12\x00\xfb\x4a\x9c\x3f\x6f\xe0\xc7\x0b\x05\x90\x0b\xdb\xfa\x65\x57\x15\xd8\xc8\xe2\x9d\x73\xd6\x25\x40\xe8\xdf\x0d\xbe\xee\xc9\x4b\xa7\x1d\x81\x59\x50\xb3\x59\x2e\xb1\x10\x6b\xc9\x01\xa7\x43\x51\x24\x13\x80\xa0\xf7\x4e\x37\x2e\x05\x63\xa9\xcd\x27\x5a\x9e\x07\x84\xfd\x2d\x0f\x45\xd2\x18\x3b\xbe\xe5\x31\xe5\xe8\x2d\x0f\xac\xbe\xa4\xed\x97\x5a\x31\x2a\xfe\xb8\xe1\xc5\x50\xea\x08\xd7\x1f\x2e\x78\xc8\xfc\x03\x99\x9f\x9e\x01\xe7\x80\x0a\x50\x9a\x43\x5b\x17\xf6\x4e\x6b\x86\xd9\x11\xa6\xe4\xbf\xa1\xac\x5b\xb9\x36\x42\x42\x5d\xff\x20\xcb\x6e\x43\x63\x4b\xb8\xa3\xe9\x38\x62\x8a\xc6\xe8\x38\x34\x4a\x87\x0b\x1e\x9a\xa8\xbf\xe8\xf8\x4f\x83\x75\x24\x1d\xf7\x8e\xde\x97\x6a\x79\x21\x65\xc7\x88\xd0\x6e\xa4\x93\x12\xf0\x37\x59\x26\x55\x06\xb3\x13\xda\x4e\x8e\xad\x9c\x74\x0a\x0f\x8f\xbb\x57\x98\x9f\x8c\x24\x96\x1c\x0a\x70\x91\xf1\xb8\x96\x1f\xea\xe5\xe9\xfb\xd3\xfb\xf3\xbd\x08\x03\x42\x92\xb0\x68\xaf\xc5\x0a\xce\xa1\x12\xab\x87\xd6\x24\xc3\x94\x47\x12\x6a\x82\x4e\x70\xc3\xe4\xec\x7c\x80\xde\x2c\x06\x77\x80\x27\x74\x0a\x27\x9e\x4e\x2f\xe1\xa2\xa5\x17\x90\x27\xce\x85\x98\xba\x9e\x9c\x35\xc9\xfd\x42\x07\x8f\xdc\x5b\xf4\x9f\x39\x7e\xbb\x32\xba\xf2\x75\xb6\x7e\xdb\xc4\x63\x0b\x6b\x75\x4e\x82\x71\x09\xac\x7b\x93\xe8\x69\x6c\x3d\x66\x3d\xa8\xb4\x25\xb9\xef\x0d\xdb\x31\xc0\x46\x84\x07\xff\xef\x63\x74\x9f\xdf\x1f\x7c\x05\xa4\xf4\x5c\xba\xd4\x3d\xb7\x7d\x74\xe4\x2e\xce\xe6\x72\x7f\x4f\xad\x71\x6c\x4b\x1c\x0e\x5e\xea\x23\x9c\x30\x66\xd2\x77\xe6\x2f\xd4\x76\x1f\x73\xc6\x7b\x77\x9c\xc6\xfd\x9d\xb9\x6f\xfe\x06\x2e\x84\xba\x27\x48\x73\x09\xd4\xc9\x9f\x00\x00\x00\xff\xff\x1a\x7d\x3b\xec\xc9\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3017, mode: os.FileMode(420), modTime: time.Unix(1521232602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\x38\xf2\x7f\xf7\x5f\x31\x5f\xa1\xbb\x6b\x7f\xe1\x28\x7d\xf6\x5e\x16\xe8\xb5\xe9\x22\xb8\x76\x1b\x34\x45\xef\xa1\x28\x36\x8c\x34\x76\xd8\x48\xa4\x4a\x51\x69\x72\x86\xfe\xf7\x03\x7f\x49\xa4\x2c\x59\x72\xb6\xd9\xeb\x43\x5e\x82\x68\x38\xfc\xcc\x4f\x0e\x87\xa4\x0b\x92\xdc\x90\x0d\xc2\x76\x0b\xf1\x05\xca\xf8\x25\x67\x6b\xba\xa9\x04\x91\x94\xb3\xf8\x0f\x92\x23\xd4\xf5\x6c\x46\xf3\x82\x0b\x09\xf3\x19\x00\x40\xb4\xce\x65\x64\xfe\x2b\xef\x59\x12\xcd\xcc\xff\x1b\x2a\xaf\xab\xab\x38\xe1\xf9\x31\x29\xb8\x40\xc9\x8f\x28\x4b\x8e\x31\xc3\x1c\x99\x24\x99\x99\xb2\xdd\x82\x20\x6c\x83\x10\x5f\x14\x98\xc4\x1f\xee\x0b\x3c\x17\xfc\x96\xa6\x28\x4a\x38\xaa\x6b\x83\xa5\xd4\x81\xba\x6e\xa6\x20\x4b\xf5\xe0\x62\x36\xdb\x6e\xe1\x59\x46\x24\x96\xf2\x23\x8a\x92\x72\x06\xab\x13\x0b\xf6\x26\x20\x2b\xbd\x1b\x69\xcf\xe8\x12\x9e\x21\xab\x72\xcd\x7d\xca\xaa\xbc\x54\x0c\xc7\xc7\x0a\x5d\x0f\x68\x55\xa0\xae\x41\x60\x21\xb0\x44\x26\x4b\x90\xd7\x08\x05\x2f\x4b\x7a\x95\x21\xdc\x92\xac\xc2\x12\xd6\x5c\x00\x91\x52\xd0\xab\x4a\xa2\xd6\xd4\x4c\x7f\xe1\x68\xd6\x69\x51\x3c\x93\x0a\x71\x07\xbf\x94\x82\xb2\xcd\x6c\x96\x70\x56\x3a\x97\x6e\xb7\x47\x4e\x51\x46\x72\x5c\xc2\x33\x2d\x4d\x29\x6b\x26\x7f\x34\xc2\xad\x7f\xac\xda\xcc\x48\xea\x6a\x6c\xa6\x2a\x06\xf3\x5f\x5d\xc7\xce\x8f\xcd\x94\x1d\xad\x4e\x8c\x29\x6e\x46\xe0\x79\xed\xf8\xf6\x7f\xeb\x35\xe3\xf3\xb7\x3c\xc5\x2c\x3e\x65\x92\xca\x7b\x6b\xf9\x59\x8a\xfa\xb3\xab\x57\x43\xe7\x6b\xfd\xcd\xaf\xbe\x60\x22\xe3\xd9\x2d\x11\xd3\xf0\x4e\xa0\x49\xa6\xb8\x21\x6e\xb5\xa6\x8a\x75\x05\x4d\xee\x78\x50\xef\xb1\x94\x6a\xb4\xae\xa3\xa5\x66\x7d\x49\x24\x6e\xb8\xb8\x5f\xf5\xb1\xf2\x4a\x24\x4d\x04\x0d\xff\xb9\xa0\xb7\x44\x2a\xf4\x0e\xbb\x1d\xa8\xeb\xe5\xac\x9e\xe9\x5c\xa3\x6b\x60\x5c\x06\x4c\x67\xe5\x7b\xce\x65\x9b\x6b\xfd\x56\x9e\x67\x95\x20\x19\xd4\xf5\x1b\x5a\x4a\xdf\x6f\x04\x32\x45\xe1\xeb\x09\x73\x9b\x7c\x9b\x22\xe3\xd3\xe7\xff\x1f\xe4\xb4\x31\x7e\xc9\x99\x44\x26\xbd\x70\xca\x4a\x30\x13\x4b\xda\x1b\xcb\x12\x28\xd3\x9f\x4a\xe9\x78\xb6\xae\x58\x02\x73\x3e\x51\xa5\x45\x57\xe0\x7c\xd1\x1f\x6f\x1d\x15\xa3\xcc\x30\x74\x9b\x36\x33\x67\x4d\xd1\x9a\x40\xa0\xe0\x94\x49\x14\x20\x39\x10\x48\xd4\x98\xd2\x7b\x9a\xa6\x0f\xb1\xac\x08\xcd\x09\x4c\x5d\x53\xa2\x0a\x8c\xb5\x4c\x2b\xb3\x3a\x01\x52\x14\xc8\xd2\xf9\x34\x11\xdb\x7a\x09\x3c\x8e\xe3\x85\xef\x9c\x9f\x15\x94\x35\xff\x85\x46\xb3\xa0\x65\x10\x33\xc9\xf5\x27\x01\x86\xdf\x8c\x74\x1b\xd4\xc7\xf2\x86\xd1\x65\xee\xe4\xc7\x71\xdc\x8d\xb3\xf1\xc8\x44\x87\xf1\x4a\xfe\x45\x7f\xa9\x9a\xfe\xe7\x52\x39\x44\x01\x99\x42\xec\xb4\x33\xf5\xc5\xc9\x69\xc4\xf0\x4a\xea\x09\xf1\x7c\xdf\x3a\x5a\x18\xfc\x3a\xc8\x59\x5e\x49\x1b\x14\xbd\x12\x13\xce\x6e\x51\x48\x3f\x26\x3a\x2b\xd9\x4e\xf6\x1b\xb3\xcb\x87\x39\x5d\xfd\xed\x59\x51\x1e\x66\xc7\x9f\x7b\x38\xb7\xb5\xef\x36\x2a\x31\xf7\xfc\xb6\xd7\x63\x8a\x77\xbf\x4f\x5e\xe1\x9a\x54\x99\x7c\x27\x52\x14\x41\xc9\x49\xcd\x00\x70\x35\x42\xd9\x06\xd6\x14\xb3\xb4\x74\xc9\x9a\x98\x04\x39\xdc\x31\xbe\xc0\xf9\x02\x3e\x7d\x36\x1b\x74\xa7\xd0\x38\x72\x6b\x5c\xa7\x93\x79\x67\xd5\x6a\xfa\x80\xb2\xdb\xa7\xb8\xee\xa6\xd9\xa5\xc2\x7d\x26\xdc\x70\x8d\x8b\x8c\x4b\x1c\x80\xef\x8d\x5b\x4b\xfb\xab\xd6\x5b\xec\xf9\x02\x28\xb3\x19\xe0\x97\x56\x94\xf1\x8b\xf3\xb3\x33\xb6\xe6\xb1\xd7\x57\x99\xce\xca\xb5\x03\x63\xfd\x40\xb7\x0f\xc8\x15\x8b\x52\x9c\x74\xa7\xb9\xbd\x7a\x7c\x33\xb3\x8d\x54\x95\x28\x9d\xb7\x5b\x3f\x10\xfb\x03\xb0\xdd\x42\x4e\x6e\x50\x31\xe9\x16\x73\xa6\x5a\x2f\x67\x89\x72\xba\x96\xe4\x66\x28\x9f\x5c\x7e\x29\x39\x5b\x45\x47\x11\x5c\xe9\x7f\xfe\xd4\xfa\x5b\xff\x47\x97\x66\x96\x6a\x84\xe3\xb7\x95\xc4\x3b\x1b\xb3\x3f\xf0\xdb\x88\x4f\xdc\x4e\xa4\xaa\xee\x70\x0d\x51\x7a\xe9\x98\x8e\x00\xce\x17\xfb\x41\x3a\xe9\xfc\xf3\x3e\xde\x36\xc7\x7d\x67\xac\xf6\x64\xc4\x72\x77\x55\xb8\x46\x56\xb7\xb9\x2a\x50\x5c\xb4\x9d\x7a\x13\xa3\x33\x46\x25\x25\x19\xfd\x8f\x6a\xff\xf7\xac\x17\xaf\x77\xd5\x7a\x04\xb0\x1d\xf9\x3d\x2b\xa8\xb7\x87\x19\xea\x47\xdd\x12\xda\xeb\xcf\x05\x7c\x97\x36\x05\x76\xfa\x14\x57\x6c\x3b\xd5\xcf\x34\xe6\x81\xa6\xbf\x94\x50\x31\xfa\xb5\x72\xdd\x98\x9a\x73\xa0\xf6\x6a\xca\x7c\x01\x61\xc5\x33\x8d\xac\x99\xeb\x69\xe3\xc2\xe1\x2a\x76\xdc\x08\x68\x99\xd4\x36\xad\x36\x33\x4c\x5d\xee\xba\xd3\x0d\x66\x25\x76\x21\xa2\xa8\x1d\x36\x31\x33\x2e\xb8\x40\xe9\xc9\x2d\x51\x3e\x8e\x0b\x02\x31\x73\x9a\x5a\x37\x2c\x26\xfa\x61\x9a\x03\xe0\x04\x68\xda\x6f\x66\x5f\x59\xbf\x26\x22\x4d\x78\x8a\x69\xb7\xc0\xeb\xa2\x33\xd9\xb4\x9e\xaa\x3e\xb1\xae\xef\xdb\x81\xdd\x51\x64\x60\x27\x9e\xa4\x9d\x56\xef\x07\xdf\x72\xfd\xc0\x1b\x03\x5e\x61\x99\x08\x5a\x48\xeb\x27\xe5\x24\x9e\x84\xdd\x09\x4f\x2a\x5d\x03\x34\x8f\xea\x8c\xda\x2c\x9d\x1a\xb5\x57\x3c\xe9\x59\x8c\x47\x4a\x19\xfc\x3a\xa8\x4f\xf4\x89\xf1\x94\x27\x9f\xa3\xee\xf2\xd2\xe4\x0b\x73\xdb\x10\x2c\xc3\x90\xed\x52\x79\xa0\x4c\xfe\x49\x92\x1b\x49\x93\x9b\x72\x8f\xe1\x97\xbb\x89\xec\xf5\x01\xda\xca\x29\xeb\x4e\xab\xb4\x63\xa9\x55\x67\x9d\xcb\xf8\xa2\x10\x94\xc9\xf5\x3c\xfa\xc7\x4f\xe5\xea\xa7\xf2\xb7\x48\x35\xeb\x6d\xbd\xd5\x51\x6c\x49\xa6\x88\x2d\x66\xfe\x7d\xcf\x58\x2b\x60\x3a\x01\x15\xe5\xdf\x51\xaa\x73\xa0\x89\xea\xef\x28\x95\xee\x3b\x8b\xd8\x8f\x74\x2f\x83\x5d\xa5\x02\x13\xa4\xb7\xdd\x1a\xf4\x6c\x8f\x33\x06\x24\xce\x17\xa1\x1c\x77\x4d\x13\xfa\xca\x94\xa0\x9d\x9a\x1b\xb4\x67\x2e\x99\x7d\x33\x2f\x06\xcc\x6c\x4a\xed\x86\xde\x22\xfb\xce\x96\x0e\x08\x9d\x7b\xcb\xb2\xd7\xe6\xa6\x1e\xf7\x5b\x0b\x27\xe0\x21\x04\x19\x19\x5e\x59\x7d\x24\x19\x4d\x89\xd4\xfb\x08\x4d\xd1\x18\x9a\x54\x42\x20\x93\x40\xd9\x9a\x8b\xdc\x2c\xde\x52\x72\x81\xa9\xaa\x9c\xe6\x60\x6c\xfa\x8c\x4a\xe0\xf4\xf2\x6b\x45\xa9\xd6\x40\x08\x2e\x9c\x05\xfa\xa3\x0c\x0f\x57\xa7\x9a\xb6\x75\x4b\xf2\x6b\x45\x05\xa6\xa7\xfb\x18\xfb\xee\x51\xf7\x66\x7a\xbb\x99\xe9\xdb\xa9\x0f\x82\xb0\x92\x2a\xab\x83\xb1\xf8\xf4\xae\xe0\x25\xb6\x9d\xb0\x25\xbf\xb7\x3a\x85\xdc\xaa\x20\xe9\x00\x45\x66\x15\x47\x6e\x58\x8d\x09\x11\xaa\xee\xfc\xe1\xa0\x6c\x05\x08\x2b\xf2\x40\x7c\x17\xbf\x6a\xbc\xff\x3b\x01\x46\x33\xef\x6c\xd9\x71\x55\x73\xcc\x0c\xe9\x4b\x35\xd9\x1d\x38\xc3\x72\xdf\x6b\x8c\xa4\x39\x1e\x64\xca\x07\x9a\xe3\x8f\x68\x08\xde\x49\x14\x8c\x64\x07\x19\x73\x6a\x27\xfd\x8f\x0d\x1a\x34\x2f\x7e\x91\x65\xfc\x1b\xa6\x2f\xaf\x39\x4d\xda\xeb\xf0\x7d\xa6\x99\x54\x3b\x63\xfa\xfa\xa3\x63\x96\xc9\xdc\xf9\x80\x75\xcb\xb6\x01\x51\xf3\xbe\x70\xca\x76\x14\xb8\x8c\x96\x10\x5d\x2a\xb4\x7a\xa9\xcb\xd0\x8b\x4a\xf2\x0d\x32\x14\x44\xea\x15\x33\xe4\x23\xec\xf8\x06\x0f\x08\x72\xab\x04\x11\x93\x7c\x70\x4e\x54\xed\x67\xd3\xa2\xba\xd4\x0d\x41\x57\xc6\xa5\x31\xcf\xab\x05\x8f\x61\xd9\x46\x42\xfc\x96\xdc\xbd\x41\xb6\x91\xd7\xf0\x7c\x8a\x6d\x6f\xc9\x1d\xcd\xab\xdc\x4c\x99\x6a\xa1\xa2\xb6\x72\x14\x65\x4d\xb2\x12\x1f\xcd\x24\xca\x0e\x32\x89\xb2\x07\x9a\xd4\xc8\x79\x7c\x93\xc8\x9d\x7e\x92\x82\xe7\xf1\xf3\xa1\x8d\x61\x9d\x71\x22\x27\xd5\x1f\x1b\xc4\xd7\x6a\xc2\x81\x31\xfc\x68\x1f\xac\xbe\x9f\xbd\xb6\x43\x9e\xaa\xf4\x19\x9b\xac\x32\x65\x72\xde\x51\x7b\xf1\xbd\xe3\x34\x96\x88\xdf\x33\x6a\x26\x4f\x0f\x8f\x9a\xd3\xe2\x11\xa2\x36\x51\xe7\x87\x04\xad\xd5\xfa\x91\x83\x36\xfd\xcb\x99\x9b\x21\xeb\xec\xae\x0b\xf8\x0d\x9e\x37\x2a\xd9\xe3\x42\xc8\xe2\xdf\xc2\x5b\x0c\xec\x99\xdb\xcc\xc6\x9d\x59\xee\x9c\x49\x33\x77\x71\x53\x60\x42\xd7\x34\xd1\x7d\xf4\x6b\x2e\x9a\xae\x34\x38\x40\x35\xd4\x80\xbd\x39\x33\x9b\xb3\x47\xfb\xc4\xae\xaf\xfd\x6e\xf0\xde\x75\xdf\x63\xa7\xcb\x21\x1d\xe6\x1a\xc8\xdd\xf1\xb4\xa9\x31\xa0\x8e\x6e\xd9\xe9\x1a\x6e\x97\xc0\x6f\x54\x32\xed\x13\xdb\xb6\xdf\x6f\x49\xf1\x49\x09\xfa\xfc\xab\x9a\xb6\xf5\xfd\x74\x3b\xb3\x9e\x3b\x3e\x86\x7f\x23\x24\xbc\xca\x52\xdd\x91\xaf\x29\x4b\x81\xca\x25\x94\x1c\x32\x94\xbf\x94\x90\x5c\x63\x72\x03\xdc\x3e\xa6\xf2\x6f\x28\x20\x21\x25\x02\x65\x29\xde\x61\x0a\x65\x81\x09\xe4\xa4\x98\x4d\xba\x61\x7c\xa3\x00\x5e\x92\x12\x7b\xd4\x74\xcf\x83\xbd\x4e\x28\x83\xb8\xad\xab\x2c\xf3\xe2\x52\x86\x9c\x39\x29\x26\x46\x68\x40\xd6\x7c\xa1\x30\x3e\x99\x00\x7d\x9e\x16\x9f\x09\xc6\x07\x36\xcf\xc6\x7f\xbd\x10\xf0\xef\x3c\x5d\x90\x42\x3f\x5c\x34\x4e\x50\x49\xbb\x0f\x6d\xfc\xd7\x0d\xa1\xbc\x93\x43\x7c\xa0\x5d\xd0\xfe\x74\x64\xe2\x49\x30\xea\xab\x73\xd1\x6a\x74\x45\xb8\x82\x60\x6f\xa4\x7a\xbb\x50\x00\x9f\xba\xda\x6d\x25\x55\x27\xe9\xe1\x78\x55\xcd\x9b\xaa\x7b\xeb\xd5\x40\xcf\x7f\x54\xd7\x07\xf5\xe5\xed\xe6\xd0\x4c\xab\x9b\x0a\xba\xec\xda\xd4\x69\xdf\x9d\x66\x3e\x79\xd5\xdb\xe8\x0f\x5a\xe5\xa0\x7b\x6f\xc6\x01\x02\xf2\x6a\x20\x38\xe3\xe0\x02\x75\x8c\xde\xb1\xec\xde\xc3\xf6\xa8\x46\xeb\x0e\xdf\x28\x6e\x70\x15\xdc\x8c\xfa\x54\x83\xdb\xe1\x9b\x8a\xeb\x36\xd4\x66\x74\xe8\x0c\x7b\xd4\x95\xad\x67\x36\x29\xd2\x81\x53\x1a\x79\x0f\x4b\x86\x62\x93\x80\xd1\xac\x37\xfa\x7a\x38\x94\xce\xaa\xfc\x01\x92\x87\xaf\xc0\xfa\x42\xbb\xdd\x42\x42\x0a\x2a\xb5\xa6\x30\x37\xa5\x3e\x40\x5d\x3c\x50\x7d\x77\x2d\x73\x88\x01\x47\x75\x1d\x79\xe1\x74\x56\x45\x13\xe5\x1f\x28\xaa\x47\x52\x20\x08\xfa\x25\x75\xf3\x69\x20\xc1\x0a\x81\x49\xb8\x8a\x5b\x9a\x4b\x5a\x8f\x67\x42\xca\x06\x4f\x00\x0e\xb2\x21\xae\x7a\x2e\xd2\x3b\xb7\xe7\xa3\x32\xbc\x1b\x38\x33\x60\x09\x46\xdf\x76\x74\x14\xe8\x35\xcd\x24\x0a\xfd\x23\x99\x66\xac\xa5\x19\xb8\x80\x67\x1c\x91\x0b\xa4\x1b\xf6\x2f\xf4\xea\x4b\x4b\xb3\x88\x3e\xcf\x14\xc4\x9c\xc8\x00\x2d\x27\xd2\x96\xc0\x66\x70\xbc\xf6\xb5\x17\xf8\x86\x6e\xbe\x8d\x46\xcd\xd8\x28\x8a\xf7\xc0\xd7\x8c\xb5\x34\x83\x16\xf0\x8c\x23\xaa\x5e\xcd\x03\x53\x9f\x16\xc7\x8e\x8c\x42\xf8\x77\x14\x76\xa8\x21\xad\x76\x6f\x31\x26\xc0\x75\x2a\xae\xa3\xac\x76\x8e\xd3\xa3\x58\xde\x5d\x83\x03\x73\xa4\xd5\xee\x6d\xc4\x04\xb8\xae\x6a\x96\xb2\xda\x39\x33\x8e\x61\x85\x1b\xac\xb7\xaf\x4e\xde\x4e\xf5\x3e\x16\xae\x9e\x86\x64\xf4\xf1\x39\x46\xe1\xce\x05\xcd\x89\xb8\x0f\xd6\x4e\x4b\x33\x80\x01\xcf\x28\xe2\x7b\x24\x69\xb8\xd7\x3b\xca\xca\xde\xd3\x35\xe3\x13\xb0\xc2\xfb\x7d\x85\x65\x28\xab\xee\x9d\xdf\x28\xd6\x45\x67\x2d\x5e\x78\x6b\xf1\x62\xf2\x5a\xbc\x30\x0f\x30\x2d\x8a\xfe\xb6\x28\x6e\x6c\x1c\xa5\xba\xb2\x2f\x48\x0e\xc6\x10\xdc\xef\x7e\x9b\xe1\xf1\x7c\xd8\x79\x31\x01\x68\x48\x46\x2d\x9f\x63\x1c\x2e\x50\xcb\xd3\x69\x44\x21\x8d\xbc\xf3\x33\x82\xc3\x4f\x7e\x7f\xc3\xa9\x66\x40\xf0\xdf\x74\xbc\xb1\x6d\xd4\xd3\xd9\x06\x9e\xce\x36\x4f\x67\x9b\xa7\xb3\xcd\xd3\xd9\x66\x0c\xf1\xe9\x6c\xf3\x74\xb6\x79\x3a\xdb\x3c\x9d\x6d\x9e\xce\x36\x4f\x67\x9b\x1f\xe4\x6c\xf3\xdf\x00\x00\x00\xff\xff\xf3\x0c\xc3\x78\x9b\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15515, mode: os.FileMode(420), modTime: time.Unix(1522186206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

