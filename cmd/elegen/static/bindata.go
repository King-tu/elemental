// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcf\x6b\xe3\x3a\x10\xbe\xfb\xaf\x18\x42\x79\x38\xd0\x38\x97\xc7\x3b\x14\x7a\x28\xe5\x15\x02\xdb\x52\x5a\xd8\x4b\xe9\x41\x75\xc6\xee\xb0\xb2\x14\xa4\x49\xbb\x45\xf8\x7f\x5f\xfc\x43\xb2\x93\x38\x5e\xef\xa6\xbb\x39\xd9\xf2\xcc\x37\x9f\xe6\xfb\x46\xca\x46\xa4\xdf\x44\x8e\xe0\x1c\x24\x8f\xc8\xc9\xb5\x56\x19\xe5\x5b\x23\x98\xb4\x4a\xee\x44\x81\x50\x96\x51\x44\xc5\x46\x1b\x86\x59\x4e\xfc\xba\x7d\x49\x52\x5d\x2c\xc5\x46\x1b\x64\xbd\x20\x95\x2e\x51\x62\x81\x8a\x85\x9c\x45\x51\xb6\x55\x29\x90\x22\x8e\xe7\xe0\x22\x00\xa8\xb0\x8d\x50\x39\x36\x15\x1e\x37\x98\x52\x46\x69\x5d\xc1\x56\xe8\x55\x4c\x40\x48\x1e\x30\x27\xcb\x68\x56\x6b\x54\x4c\xfc\x11\x3b\x97\xfc\x5f\x3f\x55\x6c\xca\xd2\xaf\xcf\x9d\x03\x54\xeb\x0a\xa0\x8c\xa2\xe5\x12\x6e\xf5\x1a\xe5\x57\x34\x96\xb4\x02\x83\xbc\x35\xca\x02\xbf\x22\xa4\x5b\x63\x50\x31\xbc\xb5\xdf\x74\x56\x2f\x17\x55\x7c\xd2\xf0\xed\xe7\xc6\x73\xc8\xa4\x16\xfc\xdf\xbf\xe0\x5a\x9c\xd0\x9e\xab\xfb\xd5\x4a\x65\x3a\xf1\x65\xca\x12\x9a\xe2\x0d\xab\x8c\xc4\x8b\xc4\x1b\x1d\xc8\x07\x1e\x02\x14\xbe\x03\x29\xcb\x42\xa5\xe8\x29\xf4\xb3\x20\xd3\xa6\x5e\xcc\xe9\x0d\x15\x90\x47\x50\xa2\xc0\x96\xe5\x91\x22\x71\x88\xb5\x6c\x48\xe5\xf3\x5e\x37\xfb\x29\x2e\x8a\x00\xec\x3b\x71\xfa\xda\xc1\x4f\x97\x08\x20\x15\xb6\x71\x4a\xa7\x07\x74\x82\xd4\x6e\xb9\x68\x43\xc1\x77\xee\x0e\xdf\x0f\x32\xe2\x79\x5b\x74\xe1\x15\xac\x5e\xd7\x98\x89\xad\x64\x8f\xd0\xe6\x2b\x92\x11\x80\xd7\x78\xaf\x03\xd7\x82\x31\xd7\xe6\x84\x36\xa7\x1e\xe1\x78\x9b\x7d\x91\x38\xc4\x4e\x6f\x73\x48\xf9\xc4\x36\x7b\x3e\x7f\xb8\xd5\xd7\x5a\x31\x2a\xfe\x75\x63\x8b\xa1\xd4\x09\xee\x1e\x2f\x38\x66\xf2\x81\xcc\x93\xbd\xee\x1c\x50\x06\x4a\x33\x24\x2b\xfb\xa0\x35\xc3\xe2\xa4\x39\xf8\x67\x37\xfe\x5e\x6e\x8d\x90\x50\x96\x5f\xc8\xb2\xeb\x8a\xee\xc8\xf4\x69\xaa\x4d\x98\x93\x29\xaa\x0d\x0d\xcb\x78\xc1\xb1\x99\xf9\x89\x6a\xbf\x35\x3a\x27\xa8\x76\x74\xac\xfe\x92\x72\x57\x52\xb6\x5c\x08\x6d\x27\x94\x94\x80\xdf\xc9\x32\xa9\xdc\x1b\x99\xd0\xb6\xcd\xdf\xc9\x89\xe7\xf0\xf4\xbc\x7f\x24\xd5\xae\x8f\x42\xc9\xa1\x00\x17\x18\x4f\x6b\xf0\x70\xff\xce\x0f\xf7\x5d\xef\xec\x4d\x18\x10\x92\x84\x45\x7b\x2b\x36\x70\x09\x85\xd8\x3c\x35\x66\x18\x26\x3b\x91\x4a\x15\x74\x86\x1d\x93\x8b\xcb\x1d\x62\x8b\x10\xd6\x42\x9d\xd1\x39\x9c\xd5\x44\xea\xd0\xab\x86\x92\x47\x9b\x39\xe7\xbf\x96\xe5\xec\xa2\x4a\xeb\x83\x8f\x6e\xb3\xf7\xd2\xbf\xa4\xf8\xe3\xc6\xe8\xa2\xae\xb3\xf3\x6f\x24\x6c\x55\x58\xab\x53\x12\x8c\x6b\x60\xdd\x9b\xb2\x9a\xc6\xce\x55\xd4\x83\x8a\x1b\x92\xc7\x6e\xa0\x3d\xb9\xbb\xc6\x3f\xd5\x8f\xcf\xc1\x6b\xf5\xfa\xe0\x79\x2e\x65\xcd\xa5\x4d\x3d\x72\x6e\x07\xff\xed\xe3\x74\xc7\xf4\x21\xb5\xca\x9f\x0d\x71\x18\x3d\x9e\x27\xa8\x3f\x3e\xcb\x7b\x73\xe6\xab\xba\xa9\x6e\x38\x74\xc4\x79\x58\xdf\x9b\xec\xea\x37\x30\xf2\x65\x4f\x84\x6a\xcc\xcb\xe8\x47\x00\x00\x00\xff\xff\x3a\xcb\x38\xd5\x69\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 2921, mode: os.FileMode(420), modTime: time.Unix(1515695604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\xc1\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\x50\xa4\xe9\x22\xb8\x76\x5b\xd4\xbd\xde\x43\x51\x6c\x18\x69\xe4\xb0\x91\x48\x95\xa2\xdc\xe4\x0c\xfd\xef\x07\x7e\x49\xa4\x3e\x2c\x39\x9b\x6c\xfb\xe0\x97\x20\x1e\x92\xbf\xf9\xe4\x70\x86\x54\x8e\xa3\x5b\xbc\x01\xb4\xdb\xa1\x70\x0d\x22\x3c\x67\x34\x21\x9b\x92\x63\x41\x18\x0d\xff\xc0\x19\xa0\xaa\x9a\xcd\x48\x96\x33\x2e\xd0\x7c\x86\x10\x42\x41\x92\x89\x40\xff\x57\xdc\xd3\x28\x98\xe9\xff\x37\x44\xdc\x94\xd7\x61\xc4\xb2\x53\x9c\x33\x0e\x82\x9d\x10\x1a\x9d\x42\x0a\x19\x50\x81\x53\xbd\x64\xb7\x43\x1c\xd3\x0d\xa0\x70\x9d\x43\x14\x7e\xb8\xcf\xe1\x1d\x67\x5b\x12\x03\x2f\xd0\x49\x55\x69\x2c\x29\x0e\xaa\xaa\x7a\x09\xd0\x58\x0d\x2e\x66\xb3\x59\x8d\xf0\x8c\x2c\xd1\x33\xa0\x65\x86\x56\x67\x28\xbc\xa0\x65\x56\x48\x61\x4f\x4f\xe5\x0a\x35\xa0\xe0\x51\x55\x21\x0e\x39\x87\x02\xa8\x28\x90\xb8\x01\x94\xb3\xa2\x20\xd7\x29\xa0\x2d\x4e\x4b\x28\x50\xc2\x38\xc2\x42\x70\x72\x5d\x0a\x50\xdc\xf5\xf2\x17\x96\x66\x0c\x11\x84\x33\x21\x11\x3b\xf8\x85\xe0\x84\x6e\x66\xb3\x88\xd1\xc2\x9a\x69\xb7\x3b\xb1\x82\x52\x9c\xc1\x12\x3d\x53\xdc\xa4\xb0\x7a\xf1\x47\xcd\xdc\xe8\x6c\xc4\xa6\x9a\x53\x5b\x62\xbd\x54\x4e\xd0\xff\x55\x55\x68\x6d\x53\x2f\xe9\x48\x75\xa6\x55\xb1\x2b\x3c\x6b\x2a\x63\x36\xff\x1b\xab\x69\xa7\x5c\x50\x41\xc4\xbd\xd1\xf9\x32\x06\xf5\xb3\x2d\x51\x4d\x67\x89\xfa\xcd\xae\xbf\x40\x24\xc2\xd9\x16\xf3\x31\xa4\x33\x54\x07\x45\x58\x13\x77\x4a\x3a\x39\x75\x85\xea\x18\x50\x20\xef\xa1\x10\x92\x5e\x55\xc1\x52\x4d\x3a\xc7\x02\x36\x8c\xdf\xaf\xfc\x49\xac\xe4\x51\xed\xa9\xe5\xac\xd2\xb1\x42\x12\x44\x99\x30\xb3\x2e\x8b\xf7\x8c\x89\x26\x4a\xda\x52\xbe\x4b\x4b\x8e\x53\x54\x55\xaf\x49\x21\x5c\x8d\x31\x4a\x25\x85\x25\x7b\x57\xd5\xd1\xb1\x1f\xf7\xd3\xe7\x7f\xf6\xcc\x31\x5e\x38\x67\x54\x00\x15\x8e\xd9\x45\xc9\xa9\xb6\x39\xe9\xb5\x79\x81\x08\x55\x3f\xa5\x88\xe1\x2c\x29\x69\x84\xe6\x6c\x54\x8c\x45\x9b\xd5\x7c\xd1\xef\x17\x65\x73\x2d\x46\x1f\x68\xe3\xd8\x99\xd5\x20\x6f\xc4\xc6\x28\x67\x84\x0a\xe0\x48\x30\x84\x51\x24\xc7\xa4\xac\x63\xd2\x1d\xa6\x47\xee\x0b\xef\x29\x96\x10\x2c\xb7\xba\xd1\x43\x09\xb0\x3a\x43\x38\xcf\x81\xc6\xf3\x31\xf0\x5d\xb5\x44\x2c\x0c\xc3\x85\x6b\x84\x9f\x25\x88\x51\xf6\x85\xc2\x31\x70\x85\xe7\x15\xc1\xd4\x4f\x8c\x28\x7c\xd3\x7c\x8d\xdb\x1e\x53\x77\xcd\x7f\x6e\x79\x86\x61\xd8\xf6\xa1\xd6\x7f\xa2\x79\x58\x29\x1e\x6c\x1d\x99\x45\xff\x5c\x4a\xf5\x25\x84\x4e\x7d\x56\x2e\xbd\xbb\x2d\x87\x9a\x01\x2b\x85\x5a\x10\xce\xfb\x77\xc4\x42\x23\x57\x5e\x0c\xb2\x52\x18\xe3\xab\xdd\x14\x31\xba\x05\x2e\x5c\xdb\xab\x58\xa3\x9d\x68\xd6\xaa\x16\x87\x9a\x58\xfe\xed\xd9\x1b\x0e\x5a\xcb\x7a\x7b\x66\xee\x2a\xd7\x54\x44\x40\xe6\xd8\x6a\xaf\x95\xe4\xdc\xfd\xd6\x78\x09\x09\x2e\x53\xf1\x96\xc7\xc0\xbd\xb4\x11\xeb\x01\xc4\xe4\x08\xa1\x1b\x94\x10\x48\xe3\xc2\x86\x63\xa4\xc3\xe1\x10\x93\xb8\xac\xe6\x0b\xf4\xe9\xb3\x3e\x00\x5b\xc9\xc2\x92\x1b\xb5\x5a\xa7\xff\x5b\x23\x50\x7d\xce\x36\x25\x40\x7d\x04\x34\x09\xdd\x01\x31\xa7\x96\xb6\x86\xd6\xfe\x23\xf0\x82\x30\xea\x29\xbe\x35\xb4\x87\x2b\x6a\x50\xe7\x0b\x44\xa8\x71\xb3\x9b\x09\x41\x84\x2f\xde\x5d\x5e\xd2\x84\x85\x96\x7f\xa5\x04\x72\x4e\xd6\xe1\xa3\xb5\x7d\xa4\x66\x2c\x86\x54\x0a\x8b\x51\xe7\xf0\xdb\x77\xba\x98\x0a\xa4\x8c\xa4\x84\xbb\x9d\x6b\xe1\x96\x65\x77\x3b\x94\xe1\x5b\x90\x54\x55\x60\xcd\x64\x91\x62\x05\x95\xd6\x7c\x23\x45\xb0\xaa\x48\x95\xaf\xbe\x14\x8c\xae\x82\x93\x00\x5d\xab\x7f\xfe\x54\x42\x1a\xc3\x06\x57\x7a\x95\x2c\x03\xc3\x37\xa5\x80\x3b\xe3\x8c\x3f\xe0\xdb\xa0\xca\xf6\x5c\x90\x59\xb1\x6f\xd7\x4b\x59\x94\x83\x06\x41\xe6\x8b\xa1\x85\xad\x00\xfc\xb9\x7f\x56\x13\x8f\xae\xba\xab\x3d\x2e\x5d\x76\x23\xd8\x16\x75\xaa\xe4\x93\xb6\x67\x5c\xd5\xa1\xbe\xd9\x2f\x29\x11\x04\xa7\xe4\x7f\x6e\x79\xdb\x2a\xdc\x14\x63\x0f\xa7\xc5\xb0\x27\xda\x7b\xcb\x83\xa1\x92\xcc\x86\xfb\x80\xd1\x16\xe8\x2f\x56\x00\xa8\x53\x02\xd8\xbc\xd7\x4a\x44\xba\x12\xf5\xa4\xfb\xa5\x40\x25\x25\x5f\x4b\x5b\xdc\xc8\x35\x93\x25\x96\x93\xe7\x0b\xe4\x27\x1f\x5d\xf3\x99\x7a\xaf\x91\xc3\x1a\xdf\xa6\xcd\xb0\x86\x6e\x26\xc9\x93\x51\x9e\x25\x10\xdb\x40\xb4\x85\x3c\xa4\x05\xb4\x21\x82\xa0\x19\xd6\x1e\xd2\xca\xaf\x41\x38\x7c\x0b\x10\x8f\xad\xbc\xc7\x60\x4e\x62\x63\x80\xc5\x44\x0b\x4c\x53\x1d\x9d\x21\x12\xf7\x2b\xd8\x97\x6a\x6f\x30\x8f\x23\x16\x43\xdc\x4e\xba\x2a\x5f\x4c\x50\xaa\x27\xd3\x4e\xcc\xb5\xfb\x8e\x3e\x5b\xb5\x0f\x1c\x81\x23\x72\x29\xc1\x7e\xb4\xb3\xce\xf5\xee\x4b\x28\x22\x4e\x72\x61\x8c\x21\x2d\xc1\x22\xff\xec\x67\x51\xa9\x36\xb4\x9a\x23\xeb\x8e\x26\xfc\xc6\x9d\xf2\x92\x45\x3d\xfb\xeb\x44\x0a\x00\x5f\x7b\x64\x08\x3e\x51\x16\xb3\xe8\x73\xd0\xde\x2b\x8a\xbc\xd6\x5d\xb2\xb7\xa7\xfc\x69\x57\xb5\x20\xbe\x66\x57\xdd\x40\x74\x4e\x58\xa5\xc6\xfe\x1d\xa3\x38\x77\x54\x31\x5c\x93\x4c\x84\xeb\x9c\x13\x2a\x92\x79\xf0\xaf\x9f\x8a\xd5\x4f\xc5\x6f\x81\xac\x6c\x9b\xbc\xa8\x5c\xd3\x90\x74\xe2\x59\x18\x77\x0c\x1c\xb8\xfa\xbc\x95\xbe\xfa\x1d\x84\xec\x80\xb4\x87\x7e\x07\x21\xc5\xec\xec\x37\xd7\x6b\xbd\x13\xcc\x86\xe2\x10\x01\xd9\xb6\x13\xc5\xb3\x5e\xbd\x07\x78\xcd\x17\x3e\x07\x7b\x61\xe0\x9b\x45\xe7\x89\x4e\x4a\xf4\xaa\x1b\x1b\x8c\xae\x82\xeb\x01\x05\xeb\x4c\xb8\x21\x5b\xa0\x8f\xa6\xe3\x00\xbb\xb9\xb3\xa1\x7a\xb5\xad\xd3\x65\xbf\x9e\xe8\x0c\x39\x08\x5e\xc0\xf9\xd7\x26\x1f\x71\x4a\x62\x2c\x54\x82\x27\x31\x68\x15\xa3\x92\x73\xa0\x02\x11\x9a\x30\x9e\xe9\xcd\x57\x08\xc6\x21\x96\xe9\x4d\x37\x86\xfa\xb8\x2f\x39\x4c\xc9\x8e\x86\x89\x3c\xa1\x39\x67\xdc\xca\xae\x7e\x14\x7e\xd3\x71\xa1\x68\x3b\xbb\xb1\xbe\x96\x84\x43\x7c\xb1\x6f\x62\xdf\xcd\x9c\x1f\xc8\xcd\xb1\xa2\x2e\x53\x3e\x70\x4c\x0b\x22\x15\xf4\xc6\xc2\x8b\xbb\x9c\x15\xd0\x94\x93\x86\xfc\xde\x08\xe1\xcf\x96\x19\x44\xf9\x22\xd0\xbb\x32\xb0\xc3\x72\x8c\x73\x5f\x56\x6b\x00\x0b\x65\x76\xb4\x9f\x36\x07\x5c\xb9\xf8\x55\xe1\xfd\xe3\x0c\x51\x92\x3a\x4d\x56\xcb\x36\x75\xbf\xe5\xd3\x97\x72\xb1\xed\xbc\xfc\x9c\xdc\xab\x8c\x20\x19\x1c\xa4\xca\x07\x92\xc1\x8f\xa8\x08\xdc\x09\xe0\x14\xa7\x07\x29\x73\x61\x16\x7d\x67\x85\x06\xd5\x0b\x5f\xa4\x29\xfb\x06\xf1\xf9\x0d\x23\x51\x13\xdb\xfb\x54\xd3\xa1\x76\x49\xd5\x3d\x40\x4b\x2d\x1d\xb9\xf3\x01\xed\x96\x4d\x59\x20\xd7\x7d\x61\x84\x76\x04\xb8\x0a\x96\x28\xb8\x92\x68\xd5\x52\x65\x9c\x17\xa5\x60\x1b\xa0\xc0\xb1\x50\x3b\x66\xc8\x46\xd0\xb2\x0d\x1c\xe0\xe4\x46\x08\xcc\x27\xd9\xe0\x1d\x96\x09\x9e\x4e\xf3\xea\x52\x9f\xe3\x2d\x1e\x57\x5a\x3d\x27\x17\x3c\x85\x66\x1b\x81\xc2\x37\xf8\xee\x35\xd0\x8d\xb8\x41\xcf\xa7\xe8\xf6\x06\xdf\x91\xac\xcc\xf4\x92\xa9\x1a\x4a\x6a\xc3\x47\x52\x12\x9c\x16\xf0\x64\x2a\x11\x7a\x90\x4a\x84\x3e\x50\xa5\x9a\xcf\xd3\xab\x84\xef\xd4\x0b\x08\x7a\x1e\x3e\x1f\x3a\x18\x92\x94\x61\x31\x29\xff\x18\x27\xbe\x92\x0b\x0e\xf4\xe1\x47\xf3\x3e\xf2\x78\xfa\x9a\xc2\x76\xaa\xd0\x97\x74\xb2\xc8\x84\x8a\x79\x4b\xec\xc5\x63\xfb\x69\x2c\x10\x1f\xd3\x6b\x3a\x4e\x0f\xf7\x9a\x95\xe2\x09\xbc\x36\x51\xe6\x87\x38\xad\x91\xfa\xef\x73\xda\x8f\x5a\x7c\xfd\x95\xf4\xf1\x5d\x8b\xad\xc7\x11\xfc\x3b\x16\x57\x8f\x14\x5b\xbd\x83\x3d\x53\x49\x82\x52\xa0\xad\xd2\x6d\x81\x7e\x43\xcf\x6b\x99\x4c\xc3\xe9\x4f\x71\xdf\x3a\x0c\x06\xf4\xac\xad\x57\x43\x67\x95\xbd\x7b\x20\xa9\xbd\x99\xcb\x21\x22\x09\x89\x54\x3f\xf6\x8a\xf1\xba\xc7\xf1\x9a\xef\x9a\xea\x4d\xaf\xef\x4e\x74\xf7\xda\x7c\x2e\xa0\x6e\x71\x6f\xe1\xde\x76\x71\xc3\x97\x10\x43\xdc\xe7\x0a\xc2\x5e\xe2\x35\xee\x1f\x10\x44\xb5\x7e\x24\x41\xdb\x25\x62\xb7\x32\x60\xfa\x19\x36\x0d\xdc\x1b\x9c\x7f\x92\x2c\x3e\xff\x2a\x17\xec\x5c\xdb\x6c\x67\xc6\x5a\xa7\xa7\xe8\xbf\x80\x22\x56\xa6\xb1\x6a\xf1\x12\x42\x63\x44\xc4\x12\x15\x0c\xa5\x20\x7e\x29\x50\x74\x03\xd1\x2d\x62\xe6\xa9\x99\x7d\x03\x8e\x22\x5c\x00\x22\x34\x86\x3b\x88\x51\x91\x43\x84\x32\x9c\xcf\x46\xae\x8a\x5f\xcb\xa5\xe7\xb8\x80\x1e\x01\xed\xa3\x6a\xaf\xe2\x85\xe7\xa5\xa4\x4c\x53\xc7\x0b\x85\x3f\x33\xc3\xf9\xa8\x3f\x06\xb8\xcc\x17\x72\xf5\x27\xed\x8e\xcf\xd3\xbc\xb1\x57\x61\x4f\xcf\xd9\xbe\x6f\x2d\xbc\x99\x9d\xd7\x21\x9c\xab\xb7\xa1\x5a\x65\x19\x90\xfd\x38\xfb\xbe\xc2\xf0\x79\x9c\x1d\xa2\xab\x52\xb5\xf9\xac\xc5\xde\x6b\x92\x0d\xa1\x38\x5d\x33\x99\x7a\xba\xb7\x06\x41\x5f\x6a\x0a\x56\xa3\x61\x6e\xf7\xb7\xb9\x6e\xec\xed\x58\x10\x72\xa9\xab\x6e\xdb\x21\xbb\x0e\x07\xc7\x49\x52\xce\x52\xd5\x87\xad\x06\xfa\xc3\x93\xaa\x3a\xa8\x87\x6b\x0a\x89\x7a\x59\x55\x27\xc4\x65\x5b\xa7\x56\xab\x67\x25\x73\xc9\xab\xde\xa6\x70\x50\xab\x1a\x7a\x8b\x49\x8a\xaf\x49\x4a\xc4\xbd\x83\xec\x50\xcd\xd7\x33\xad\x89\xc1\x28\xf2\xf9\x0d\xa6\x14\xd2\x66\xc0\x10\x0c\x5e\x33\x3c\x01\xaa\xef\xb9\x05\x21\x8f\xbc\x1a\x88\xa0\x71\x70\x0e\x2a\x90\xde\xd2\xd4\xb1\x80\x4b\xd5\xa6\x6d\xcd\x1b\xc5\xf5\xde\x1a\xea\x51\x97\xaa\x71\x5b\xf3\xa6\xe2\xda\x0a\xb1\x1e\x1d\xaa\x1b\x4e\xda\xbc\xd5\xca\x3a\x8e\x5b\x70\x52\x22\xe7\x31\x52\x53\x4c\xa4\x52\x92\xf6\x86\xa8\x1a\xf6\xb9\xd3\x32\x7b\x00\xe7\xbe\x8b\xdb\x3e\xa7\xee\x76\x28\xc2\x39\x11\x4a\x46\x34\xd7\x87\x8c\x87\xb7\x78\xa0\xe0\xb6\xc8\x3d\x44\xf4\x93\xaa\x0a\x1c\x47\x5a\x7d\x82\x89\xfc\x0f\x64\xd5\xc3\xc9\x63\x84\xfa\x39\xb5\x23\x69\x20\xb4\x72\x0e\x91\x9f\x64\x1a\x9a\x0d\x57\x67\xce\x84\x60\xf5\x1e\x9e\x2c\x64\x4d\x34\xb9\xb8\xf5\x8a\x33\x0a\xeb\xdc\x1f\xeb\x01\x43\xd0\x22\x36\xa3\xa3\x40\xaf\x48\x2a\x80\xab\x2f\x9b\xea\xb1\x86\xa6\xe1\xbc\x39\xe3\x88\x8c\x03\xd9\xd0\x7f\x83\x93\x4c\x1a\x9a\x41\x74\xe7\x4c\x41\xcc\xb0\xf0\xd0\x32\x2c\x4c\xbe\xab\x07\xc7\x13\x5d\xf3\xba\xa4\xe9\xfa\xb7\x96\xa8\x1e\x1b\x45\x71\x1e\x8a\xeb\xb1\x86\xa6\xd1\xbc\x39\xe3\x88\xb2\x30\x74\xc0\xe4\x4f\x83\x63\x46\x46\x21\xdc\x1b\x36\x33\x54\x93\x56\xdd\x3b\xb8\x09\x70\xad\xf4\x6a\x29\xab\xce\x65\xd0\x28\x96\x73\x53\x66\xc1\x2c\x69\xd5\xbd\x4b\x9b\x00\xd7\x16\xcd\x50\x56\x9d\x1b\x8f\x31\x2c\xff\x34\x75\x0e\xd1\xc9\x67\xa7\x3a\xb4\xfc\xdd\x53\x93\xb4\x3c\xee\x8c\x51\xb8\x77\x9c\x64\x98\xdf\x7b\x7b\xa7\xa1\x69\x40\x6f\xce\x28\xe2\x7b\xc0\xb1\x7f\xb0\x5b\xca\xca\xdc\x32\xd7\xe3\x13\xb0\xfc\x0b\x12\x89\xa5\x29\xab\xf6\x8d\xf5\x28\xd6\xba\xb5\x17\xd7\xce\x5e\x5c\x4f\xde\x8b\x6b\xfd\x52\xd8\xa0\xa8\xdf\x06\xc5\x8e\x8d\xa3\x94\xd7\xe6\xa9\xd3\xc2\x68\x82\xfd\x6c\xba\x1e\x1e\x8f\x87\xce\x7b\x1f\x42\x35\x49\x8b\xe5\xce\x18\x87\xf3\xc4\x72\x64\x9a\x2c\xd0\x7f\xf4\x67\x33\x35\x5d\xff\x96\xa2\x98\xa1\x41\x29\x14\xbd\xf3\x49\xcb\x21\xad\xea\x13\x35\x66\x03\xcc\xfe\x9e\x0e\xcd\x94\x5a\xc7\xf6\x0c\x1d\xdb\xb3\x63\x7b\x76\x6c\xcf\x8e\xed\xd9\xb1\x3d\x3b\xb6\x67\xc7\xf6\x6c\x3f\xc4\xb1\x3d\x3b\xb6\x67\xc7\xf6\xec\xd8\x9e\x3d\x69\x7b\xf6\xff\x00\x00\x00\xff\xff\x05\x78\xe9\x26\xa3\x3e\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 16035, mode: os.FileMode(420), modTime: time.Unix(1516143237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xc1\x6b\xdb\x30\x14\xc6\xef\xfa\x2b\x3e\x4c\x19\x0d\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\x59\x32\xf2\x73\x46\x10\xfa\xdf\x47\xac\xb8\x8d\x99\x47\x18\x19\x5b\x8f\xef\x49\xef\xf7\x7d\x9f\x24\xd4\x48\xf5\x22\x2b\x42\x08\xc8\x9f\x88\xf3\x7b\x67\xb7\xba\xea\xbc\x64\xed\x6c\xfe\x55\xd6\x84\x18\x85\xd0\x75\xe3\x3c\x23\xab\x34\xef\xba\xe7\x5c\xb9\xba\x90\x8d\xf3\xc4\xee\x4e\x5b\x55\x90\xa1\x9a\x2c\x4b\x93\x09\xa1\x9c\x6d\x19\xd6\x95\x4e\x3d\xb1\xd7\xb6\xc2\x12\xd9\xba\xaf\x37\x19\x8a\x02\xd6\x19\x6d\x79\x81\xbd\xf4\x6a\x47\xea\x65\x5e\x92\x2c\x95\x2b\x49\x08\xb1\x97\x1e\x9e\x4c\xaf\xde\xee\x74\xd3\xae\xa8\xd2\x2d\xfb\x03\x5e\x25\xf2\xd5\xd4\xba\x10\x45\x81\xd1\x0a\x3c\x71\xe7\x6d\x0b\xde\x11\x6a\x57\x92\x19\x93\x73\xb1\xed\xac\x1a\xcf\xdc\xce\x2e\xe9\x20\x08\x81\x13\x7a\xda\xa9\x88\x22\x91\xb5\xd5\x7c\x3b\x1b\x06\xa6\x58\xcb\x4b\x6a\x21\x1e\x87\x43\x80\x97\xb6\x22\xdc\x90\x65\xcd\x87\xe3\xad\xcc\x71\x33\x30\xb1\x58\xa6\xbb\x1b\xc7\x8f\xf1\x77\xba\xeb\x10\xce\x48\x31\x3e\x96\xa9\xda\x60\x89\x0f\xd3\x8e\x82\x00\x8e\x46\xee\xa0\xb7\xa8\x18\xb7\x86\xec\x9b\x83\xfc\x93\x31\xee\x47\x7b\xef\x49\x32\xcd\xf0\x31\x69\x03\xe7\xed\x05\x6a\xd9\xac\xdb\xfe\x45\x6c\x9e\x9d\x33\x48\xcc\x44\x3d\xe5\x6b\xa4\x27\xcb\xc7\x40\x6f\xec\x07\x62\x64\xaa\x67\x64\x03\x18\xc8\x42\x78\xdd\x1e\x63\x86\x05\xd8\x77\x34\x3f\x43\x92\x2d\x87\xed\x71\x2e\x26\xba\x17\xd2\x7c\x6f\xca\xa9\x34\xa9\x7d\x5d\x9a\xae\x67\x5c\x99\x26\xd9\xf9\x26\x59\xed\xde\x81\x9b\x3f\x3b\xdb\xcf\x64\x68\xe2\x6c\x53\xfb\xba\x34\x65\xcf\xf8\xa7\x69\x1e\x88\x7f\x89\xb2\x22\xf6\x9a\xf6\x57\x86\xa9\x88\xff\xca\x2b\x19\xdc\x7c\x91\xf6\xf0\x3e\x1c\x3d\xda\xad\xfb\xdf\x4e\x46\xdd\x98\x3e\xda\x53\x1d\xc5\xcf\x00\x00\x00\xff\xff\xf5\x11\x3d\xfd\x19\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1817, mode: os.FileMode(420), modTime: time.Unix(1516140241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

