// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1528494836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x5d\x6b\xf3\x36\x14\xbe\xf7\xaf\x38\x0b\x61\xd8\xd0\xb8\x37\x63\x17\x1d\xb9\x28\xa5\x85\xc0\x52\x4a\x0a\xbb\x09\xbd\x50\x9d\x63\x47\x4c\x96\x8c\x24\xb7\x33\xc6\xff\x7d\xc8\x96\x3f\xe4\x7a\xa9\xd3\xb5\x7d\xe1\xcd\x55\x2c\x9d\x2f\x3d\xcf\xd1\x73\x94\x91\xe8\x6f\x92\x20\x94\x25\x84\x8f\xa8\xc3\x1b\xc1\x63\x9a\xe4\x92\x68\x2a\x78\x78\x4f\x52\x84\xaa\xf2\x3c\x9a\x66\x42\x6a\x58\x24\x22\x24\x99\x90\xa8\x45\x48\xc5\x25\x32\x4c\x91\x6b\xc2\x16\x9e\xf7\x42\x24\xf8\x1e\x00\x00\x3d\x20\xd7\x54\x17\xc6\x59\x6d\x49\x06\x6b\x48\x49\xb6\x57\x5a\x52\x9e\x3c\x75\x3e\xe1\xc6\xda\x41\x59\xbb\x99\x5f\x59\xae\x40\x12\x9e\x60\x53\xcc\x63\x86\x11\x8d\x69\x54\x17\xa3\x4c\x21\xbd\x21\xd0\x18\xd4\x51\xe4\xec\xb0\xc3\x84\x2a\x8d\xd2\xb1\x86\x10\x96\xe1\x43\xfe\xcc\x68\xb4\x15\x07\x74\x7d\x57\xb0\xec\x4b\x84\xab\x35\x84\xc6\x86\x85\xb7\xfd\xe2\x6a\xe0\xb0\x28\x4b\x6b\xb0\x43\xa5\xcd\x76\x55\x2d\xae\x4c\x0d\xc3\x30\x55\xd5\x1e\xe8\xc2\x49\x85\xfc\x30\xce\x3e\x58\xaa\x3c\x07\xb3\x88\x68\x4c\x84\xa4\x3f\x21\x70\x22\x97\x11\x7e\x09\x78\x84\x51\xa2\xbe\x10\xb1\xd5\x37\x42\x56\x96\xb6\xaa\x25\xbd\x80\x65\x7d\xb2\x81\xd3\x75\x73\x52\x70\x31\x6e\xed\x3e\x0f\xd8\x49\xac\x03\xcf\xbb\xbc\x84\xba\x90\xbf\x50\x2a\x73\x70\x89\x3a\x97\x5c\x81\x3e\x22\x44\xb9\x94\xc8\x35\xbc\xd8\x3d\x11\xd7\xcb\x69\x5d\xb8\x17\xe7\x3c\x72\x7c\xfd\x00\x62\x26\x88\xfe\xfd\x37\x28\x6d\x9c\x4e\x84\xae\x1f\x36\x1b\x1e\x8b\xb0\x4d\x53\x55\x86\x6a\x5d\x64\x36\xdc\x96\x70\x92\xa0\x04\xa5\x65\x1e\xe9\xb2\xf2\xea\xf0\x7e\xec\xec\x06\xd0\x9e\xfc\x4e\x8a\xd4\x80\xe1\x73\x83\x48\xd3\x1c\x01\x4c\x76\x47\x7d\x54\x5b\xcd\x58\xc7\xf6\xc6\xfd\xc9\x9b\x93\xed\xa6\xb9\xc6\x85\x6f\xef\x73\x71\x7e\x56\x47\x09\xf6\x6d\x9c\x79\xe9\xeb\x36\xf1\x9b\xa6\x98\x9d\xb8\xbf\x45\xfb\xfa\xef\xcc\x54\xbc\xf0\x09\xef\xcf\xe7\xd3\x89\x4c\x41\x9b\x8a\xc6\x40\x61\x0d\x71\xf8\x86\x1a\xc2\x8b\xe0\x0f\xf8\x85\x86\x1b\x75\x9b\x66\xba\xf0\x83\xc1\x5d\x6d\xa1\x71\x14\x73\x2a\x54\x87\xfb\xd9\xe1\xec\x9a\x1b\xce\xe2\xc8\x8b\xe0\x1d\x2c\x62\x4a\x9e\x19\xfa\x2d\x77\x93\x10\x8c\xd7\x1a\x9f\x16\x19\xf5\x4a\x75\x74\xec\xd8\xb7\xd5\x76\x6a\x70\x42\xa3\x3e\xac\x4f\x11\x51\xcd\xdc\x7f\x23\x48\xbd\x68\x5c\x8d\x41\xbb\xc7\xd7\xff\x70\xf1\x03\x6f\x42\x36\x46\x9f\x07\x8c\x49\xce\xf4\x9b\xb0\x9c\x32\xcb\xc6\x1c\xa0\x0d\x37\x8f\x75\xc3\x39\xbd\x77\x1a\xe1\x11\xc3\x96\xb2\x11\xe1\x4d\x37\x07\xf3\xf8\x56\x1f\x21\x5c\x7d\x1a\xe3\x5c\xe8\x96\x88\x8d\xda\x09\xa1\x7f\x4c\x47\xfc\x3a\xe5\xf0\xc0\x72\x49\x18\x54\xd5\x9f\x54\x19\x81\x7e\xbf\x33\xbe\xa4\x51\xd4\x59\x9d\xa2\x4e\xb6\x8a\x3a\xbb\x57\x76\xc8\x1a\xe2\x8e\x34\x53\xfe\x30\xab\xb3\xd3\x30\x24\xc7\x7a\x2c\xa7\x6c\x4c\x2e\xf3\xd2\x4e\xed\x04\x5c\x3b\x29\xcd\x24\x34\x23\xda\x6e\x0e\xa7\x73\x6d\x36\xa8\x60\x3b\x70\x6b\xa7\x73\xf3\xe5\x14\x3a\x34\xeb\xe7\x74\x9b\xbd\xf2\xea\x7c\xd7\x8c\x59\x60\x28\xaa\x2e\x2b\x61\x0c\xf0\x1f\xaa\x34\xe5\x49\xdb\xe5\x14\x95\x4d\xe6\xf8\xf8\x01\xec\xa7\x5f\x6b\x43\x40\xa6\x4c\xbe\xff\x3d\x77\xf2\x72\x9c\xf7\x78\xad\x2c\x7a\xf5\xdc\xbd\x13\xb2\x3b\xf7\x10\x42\x43\x9e\x1d\xcd\x10\x0b\x59\x7f\x27\xf4\x05\xfb\x97\x42\x87\xe8\x38\xce\x69\x79\xda\x3f\x35\xb7\xe1\x3d\x3d\x9a\x01\xeb\xf7\x0a\x4e\x5b\x78\xf9\x7f\x1f\xcb\x27\xd9\x9a\x23\x52\xee\xdb\xc1\x48\x53\xe5\xfd\x1b\x00\x00\xff\xff\xb6\x1f\x7f\xe7\x51\x0f\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 3921, mode: os.FileMode(420), modTime: time.Unix(1533248747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x4f\x1c\xb9\xf2\x7f\x9f\x4f\xe1\x7f\x8b\xdd\x9d\xf9\x6b\x68\xf2\x3c\x7b\x58\x29\x87\xb0\x2b\x74\x92\x5d\x14\xa2\xec\x03\x42\x8b\xe9\xae\x19\x1c\xba\xed\x89\xdb\x4d\xe0\x8c\xfa\xbb\x1f\xf9\xda\x76\x5f\x66\x3c\x6c\x58\xf1\x00\x0f\x11\x94\xcb\x3f\xd7\xcd\x76\x55\xb9\xb3\xc6\xd9\x1d\x5e\x01\xda\x6c\x50\x7a\x01\x22\x3d\x61\x74\x49\x56\x35\xc7\x82\x30\x9a\xfe\x8e\x4b\x40\x4d\x33\x99\x90\x72\xcd\xb8\x40\xd3\x09\x42\x08\x25\xcb\x52\x24\xfa\xb7\xea\x91\x66\xc9\x44\xff\xbe\x62\x29\x5e\x33\x0e\x82\xa5\x84\x1d\x41\x01\x25\x50\x81\x0b\xcd\xb9\xd9\x20\x8e\xe9\x0a\x50\x7a\xb1\x86\x2c\xfd\xf4\xb8\x86\x73\xce\xee\x49\x0e\xbc\x42\x87\x4d\xa3\x21\xa4\x14\xa8\x69\xdc\x14\xa0\xb9\x1a\x1c\x82\xf8\x8c\x0b\x92\x2b\x31\xf7\x00\x9a\x4d\x26\x47\x47\x5a\x59\x89\xf1\x81\xe5\x50\xa4\xa7\x54\x10\xf1\x68\x74\x3d\xa3\x39\x3c\x40\x85\x0a\x52\x89\x0a\x89\x5b\x40\x58\x08\x4e\x6e\x6a\x01\x28\x63\xe5\x9a\xd5\x34\x47\x44\x33\xa5\x93\x7b\xcc\xa3\xd0\x8e\xd1\xe5\xd5\xe5\x55\x25\x38\xa1\x2b\xb4\x31\x52\x1d\x1a\x7d\x0e\xc8\x1c\x1d\x38\xec\xc5\x71\x00\x67\x11\x8c\x66\xde\x2c\x37\xc3\x0c\x59\x7c\x0d\xef\xcc\xd0\x34\xc9\x5c\x51\x9a\xb9\x43\x80\x76\x96\x31\x4e\xd3\x4c\x9a\xc9\x64\xb2\xd9\xa0\x83\x02\x0b\xa8\xc4\x67\xe0\x15\x61\xb4\x15\xe7\xbd\x22\xbf\xb5\xc6\xa8\x2c\x83\x74\x8f\x73\x8d\x52\x05\x68\x5d\xca\x79\x37\x35\x29\xf2\x53\x5a\x97\x95\x86\xe8\x42\x37\x8d\x71\x86\x9a\xa1\x62\x02\x35\x0d\xe2\xb0\xe6\x50\x01\x35\xe6\x5f\xb3\xaa\x22\x37\x05\xa0\x7b\x5c\xd4\x50\xa1\x25\xe3\x9e\x4b\x12\x37\xdd\x49\x66\x4c\x9f\xa4\x13\x21\x11\x7b\xf8\xda\x4a\x93\x49\xc6\x68\x65\x43\xda\x33\x2b\xc5\x25\xcc\xd1\x81\x5a\x4d\x6a\xa1\x27\x7f\xd6\x8b\x1b\xa3\x19\xb1\xa9\x5e\xa9\x2b\xb1\x9e\x2a\x19\xf4\x6f\x4d\x93\x5a\x53\xbb\x29\x3d\xa9\x8e\xb5\x2a\x76\x46\xd2\x71\xce\x6c\xd2\xfe\xbe\x33\x84\x73\x50\x7f\x76\xe5\x72\x74\xb6\x54\x7f\xb3\x9b\x2f\x90\x89\x88\x20\xb6\xf3\x8e\x91\xdb\xd5\xa9\x23\xea\x70\x93\xac\x8b\x36\xe8\x3c\xa8\x8f\x50\x09\x39\xea\xe2\xf0\x04\x0b\x58\x31\xfe\xb8\x18\x62\x65\x35\xcf\x9c\x07\x35\xff\x39\x27\xf7\x58\x48\xf4\x0e\xbb\x19\x68\x9a\xb9\x8d\x5d\xb2\x44\x94\x89\x70\xff\x54\x1f\x19\x13\x6d\xac\x0d\x6b\x79\x5e\xd4\x1c\x17\xa8\x69\xde\x93\x4a\xf8\x76\xc3\xea\x20\x90\x16\xdb\x3d\xd7\xc5\x5b\xcc\x1a\x97\x57\xff\x3f\xca\x69\x7c\xec\xf9\x51\xd4\x9c\x6a\x27\x92\x41\x27\x56\x88\x50\xf5\xa7\x94\x36\x9d\x2c\x6b\x9a\xa1\x29\x8b\x94\x65\xe6\x56\x9a\xce\x86\x3d\xac\xfc\xa0\xa5\x18\xc7\x6c\x03\x65\xa2\xe5\x3f\x61\xeb\x56\x76\x8c\xd6\x8c\x50\x01\x1c\x09\x86\x30\xca\xe4\x98\x14\x38\x4e\xc4\xfd\x55\x92\x8b\x0f\xa8\xb3\x24\xf8\xa6\x80\xca\xea\xa4\xc4\x58\x1c\x23\xbc\x5e\x03\xcd\xa7\x71\xe0\x9b\x66\x8e\x58\x9a\xa6\x33\xdf\x2c\x3f\x4a\x28\xa3\xf8\x5b\x85\x66\x40\xab\xc0\x4d\x82\xe9\x3b\x05\x51\xf8\xa6\x57\x37\x7e\x7c\x2e\x3b\x68\x59\xa6\x76\xfd\x34\x4d\x87\x4d\xb2\xd3\x54\xac\x16\x7f\xd3\x52\xf2\xe4\xfe\x6b\x2e\x4d\x21\x81\xf4\x71\x6b\xe5\x6a\x2f\x2d\xb9\x8e\x5b\x86\xd5\x42\x4d\x48\xa7\xdb\x76\xcb\x4c\xe3\x37\x41\x9c\xb2\x5a\x18\x77\xa8\xfd\x96\x31\x7a\x0f\x5c\xf8\xde\x50\x91\x48\xc7\xf4\x7e\x9a\xb9\xe5\xbf\xe3\x61\xa7\x24\x09\xed\xb9\x85\x73\xd3\xf8\x66\x23\x02\x4a\xcf\x6e\x5b\x2d\x26\x79\xb7\xdb\xe4\x1d\x2c\x71\x5d\x88\x3f\x78\x0e\x3c\x38\x5f\x72\x3d\x80\x98\x1c\x91\xd9\xca\x92\x40\x91\x57\x36\x4c\x33\x46\x05\xd0\x27\x18\xc6\x5f\x70\x3a\x43\x5e\x32\xe4\x0b\xd8\xcf\x61\x3a\x59\xdf\x1f\x46\xac\x36\x0f\xe9\x66\x15\x36\x07\x74\x77\x51\x78\x9b\x84\xd7\xaa\x36\x91\x36\x89\x05\xf0\xad\x71\x6f\x68\x7f\x57\x7b\x83\x3d\x9d\x21\x42\xc5\xd0\x81\x0a\x22\x7d\x7b\x7e\x76\x46\x97\x2c\xf5\xd2\x23\x9d\x5a\xd9\x6b\x7f\xd7\xbd\xdf\xbd\xef\x4b\xc9\x22\x45\xc7\xdd\x69\xf6\x4e\xde\x7d\x69\x99\x84\xa9\xce\xa4\xd4\x1d\x5f\x6c\xf7\xc1\x66\x83\x4a\x7c\x07\x92\x49\xe5\xe2\x13\x2f\xf1\x54\xea\xab\xa5\xec\x0c\x69\x96\xeb\x2f\x15\xa3\x8b\xe4\x30\x41\x37\xea\x97\xbf\x94\x02\xc6\x05\xc9\xb5\x9e\x25\x2b\x8e\xf4\x43\x2d\xe0\xc1\xb8\xed\x77\xf8\xb6\xc3\x28\xf6\x02\x92\x47\xee\xf8\x31\x22\xe5\x52\x6e\xdd\x01\x38\x9d\x6d\x07\xe9\x78\xf7\xc7\x6d\xbc\x6d\x98\xfb\xc6\x58\x6c\x09\x89\x79\x7f\x63\xd8\x8c\x55\xe5\xb3\xd2\x53\x8c\xb7\x59\xbb\xf3\xd1\x19\x25\x82\xe0\x82\xfc\x57\xd6\x49\x5b\xb6\x8c\xce\xa2\xaa\x5b\x56\x17\xf9\x9f\x9c\x04\x13\xd1\x81\xc9\xe3\x55\x16\xdb\x01\x39\x48\xcf\xeb\x9b\x82\x64\x52\x13\xa9\x5a\x9b\xec\x2a\x7d\x02\xf1\x9a\x66\x1e\xee\xc1\xf1\x5d\x39\x98\x04\x8d\x65\xb2\x76\x5b\x6e\x75\xd0\x77\x4a\x77\x50\x2f\xdf\xb1\x07\x78\xe7\x44\xd5\x29\x7d\x20\xe9\x4f\x15\xaa\x29\xf9\x5a\xdb\x74\x4e\xce\xd9\x53\x7a\x39\x65\x3a\x43\xe1\x29\xaa\x9d\xa7\xe7\x7a\xd2\x58\xff\xda\x5b\x20\x75\x0b\xb4\x4c\xb2\xf2\x97\x17\x24\xe4\x76\x33\xb8\x62\xb1\xa8\xa0\x0b\x91\x24\xdd\x5a\x52\x9b\xe0\x02\x84\xb7\x6e\x05\xe2\x79\x4c\x10\x2c\x33\x25\xb9\x31\xc3\x2c\xd2\x0e\x71\x06\x40\xc7\x88\xe4\xc3\x6a\x0e\x5d\x15\xb7\x98\xe7\x19\xcb\x21\xef\x5e\x1a\xea\x14\x8b\x56\xed\xe9\x37\xc5\xb6\x5b\xdd\x16\x31\x23\xb7\x7b\x94\x74\x4a\xbc\x17\x7e\x8d\xfb\x8e\xd7\x0a\xbc\x83\x2a\xe3\x64\x2d\xda\x86\xc3\x3b\x96\x85\x19\x0f\xcb\x6a\x75\x06\x28\x1e\x99\x6d\xb5\x51\x1a\xeb\xb5\x77\x2c\x1b\xd8\x8c\x87\x52\x18\xf8\x3a\x2a\x4f\x72\x49\x59\xce\xb2\xab\xa4\xbb\xbd\x14\xf9\x42\xf7\x29\x82\x6d\x18\xb2\x5d\x4b\x0b\x54\xd9\xbf\x71\x76\x27\x48\x76\x57\x6d\x51\xfc\xba\x1f\xc8\x5e\x66\xa1\xb4\x8c\xd9\x77\x4a\xa4\x9e\xa6\x46\x9c\x65\x29\xd2\x8b\x35\x27\x54\x2c\xa7\xc9\xbf\x7e\xa8\x16\x3f\x54\xbf\x24\xb2\x00\x68\xcf\x5b\xe5\xc5\x96\xa4\x0f\xb1\xd9\xc4\x6f\x21\xed\xca\x2d\x74\x6a\xe1\xee\xa8\xdf\x80\x02\xc7\x02\x7e\x03\x21\x8b\xcb\xb4\x7b\x0f\x49\x8f\xff\x06\x42\xea\xd5\xdb\xe0\x7e\x14\x0c\x32\x98\x1d\xcc\x21\x03\x72\xdf\x3d\x9f\x0e\xb6\x18\x6a\x64\xc5\xe9\x2c\x5c\xc7\x36\x7f\x42\x3b\xea\xe3\xa9\x77\x1e\x07\xc9\xe0\x90\x09\x2e\xb6\x98\xe0\x62\xc4\x04\xee\x88\x5e\x91\x7b\xa0\xdf\xd9\x0a\x23\x8b\x4e\xbd\xed\x3c\x68\x0f\x77\x8e\x0f\x5b\x02\x1d\x23\x0f\x21\x88\xe4\xb0\x49\x66\x5a\xc4\xea\xfe\x21\x39\x68\x45\xb3\x9a\x73\xa0\x02\x11\xba\x64\xbc\xd4\x9b\xbe\x12\x8c\x43\x2e\x4f\x5c\x5d\x9e\xeb\x44\xa5\xe6\x10\x7f\x6c\x9b\xa5\x64\x4a\xc1\x39\xe3\x56\x03\xf5\x47\x15\x16\x7a\xa7\x8a\xb6\xb1\x5b\xf9\x6b\x4d\x38\xe4\xa7\xdb\x18\x87\xfa\xdf\x5b\x77\x48\x7b\x09\xaa\x7e\xd8\x27\x8e\x69\x45\xa4\xd6\xc1\x58\x7a\xfa\xb0\x66\x15\xb4\x29\xb9\x21\x7f\x34\x32\x85\xdc\xf2\x20\x53\x0e\x4a\xf4\xee\x4f\xec\xb0\x1c\xe3\x3c\x14\xdd\xda\xc3\x42\x99\x93\x23\x3c\xc9\x47\xfc\x3b\xfb\x59\xe1\xfd\xdf\x31\xa2\xa4\xf0\xea\xdc\x8e\xa9\x5c\xc9\x1b\xd2\xe7\x72\xb2\x2d\x7e\xc3\x6b\x62\x50\x19\x41\x4a\xd8\x4b\x95\x4f\xa4\x84\x97\xa8\x08\x3c\x08\xe0\x14\x17\x7b\x29\x73\x6a\x26\xbd\x44\x85\x08\x15\xb0\x02\xbe\x97\x3e\x67\x54\xbc\x44\x55\x96\x05\xc3\x62\x2f\x45\x7e\x95\x33\x5e\x88\x2a\x7d\xcd\xd2\xb7\x45\xc1\xbe\x41\x7e\x72\xcb\x48\xd6\xbe\x8b\x6c\x53\x4c\x9f\x00\x67\x54\x75\xc8\x3a\x7a\xe9\x03\x65\x3a\xa2\xde\xbc\xcd\x27\xe5\xbc\x2f\x8c\xd0\x9e\x00\xd7\xc9\x1c\x25\xd7\x12\xad\x99\xab\xdb\xe1\x6d\x2d\xd8\xca\x5c\x8c\xf9\x16\x23\x41\xc7\x38\xb0\x87\x7f\x5b\x21\x30\x8f\xb2\xc1\x39\x96\x37\x34\x8d\x73\xeb\x5c\xe5\x77\xdd\x35\xae\xb5\x7a\xde\x11\xfd\x1c\x9a\xad\x04\x4a\x3f\xe0\x87\xf7\x40\x57\xe2\x16\xbd\x89\xd1\xed\x03\x7e\x20\x65\x5d\xea\x29\xb1\x1a\x4a\x6a\xbb\x8e\xa4\x2c\x71\x51\xc1\xb3\xa9\x44\xe8\x5e\x2a\x11\xfa\x44\x95\xdc\x3a\xcf\xaf\x12\x7e\x50\x6f\x93\xe8\x4d\xfa\x66\xec\xbe\x8e\x3f\x7d\x8c\x13\xf7\x38\x7c\x9c\x0f\x3f\x9b\x97\xcb\xef\xa7\xaf\x29\x78\x62\x85\x8e\x3e\xfa\xe7\x32\xd1\x9b\x76\xc4\x9e\x7d\x6f\x3f\xed\x0a\xc4\xef\xe9\x35\x1d\xa7\xfb\x7b\xcd\x4a\xf1\x0c\x5e\x8b\x94\xf9\x29\x4e\x6b\xa5\xfe\x87\x9c\x76\x80\x85\xd0\x3d\xd5\x81\xcf\x30\xc8\x1c\x1d\xa8\x87\x99\xc1\x2f\x52\xbc\x2e\xc6\xd1\x11\x3a\xa9\x2b\xc1\x4a\x5d\x8e\xe8\xca\x43\xa2\x97\x56\xf9\xd4\xf1\xb6\x96\x0b\x18\x94\xa9\x94\x34\x5d\x7b\x69\x62\x6c\x66\x10\x65\x1b\xdf\x3e\x87\x23\x29\xc1\x4e\xeb\x91\x25\x2a\x80\x76\x52\x8e\x19\xfa\x05\xbd\x71\xe2\x98\xaa\x37\x64\xf1\x1f\xaf\x0c\x06\x0c\xcc\x75\xb3\xa1\x37\xcb\xb6\x52\x48\x61\x7b\x93\x6b\xc8\xc8\x92\x64\xca\xf0\xbf\x32\xee\x0a\xa8\xa0\x0f\xe0\xa8\x01\xbb\x6b\x0b\xe9\x32\xb9\xfd\xfe\x44\xb5\xb8\xef\xe0\xd1\x16\x8a\xbb\x1a\x28\x63\x32\x4c\x15\x90\x6d\x63\xb6\xdb\x65\x44\x9c\x8d\xb3\xcc\xfd\x1c\xb1\x3b\x13\x28\xa3\x0b\xb7\xb5\xe2\x07\xbc\xbe\x94\x4b\x5d\xfd\x2c\xa7\xf5\xcc\x78\xef\x5b\xf0\xe8\x08\xfd\x09\x28\x63\x75\x91\xab\x32\x72\x49\x68\x8e\x88\x98\xa3\x8a\xa1\x02\xc4\x4f\x15\xca\x6e\x21\xbb\x43\xcc\x7c\x7a\xc0\xbe\x01\x47\x19\xae\xc0\x7c\x1f\x95\xa3\x6a\x0d\x19\x2a\xf1\x3a\xb6\xa1\xfe\x5e\x42\x9c\xe0\x0a\x06\x04\xb6\x6f\xeb\x83\x06\xa9\x02\x1f\x2e\xeb\xa2\xf0\x7c\x54\x85\x9c\x25\x5e\x47\x7a\x6b\x64\xad\xe9\x4c\x62\x5c\x6a\x67\x5d\xc5\xfa\x2a\x42\xfd\x40\xeb\xc9\xee\x0f\x7d\x02\xfe\xde\xeb\x1f\x5e\xab\xb7\x3f\x67\x06\x19\xc2\xdb\xd0\x76\x7f\x08\x14\xae\x77\xbc\x8f\x15\xbc\x9e\xe8\x13\x9a\x18\xde\x73\x94\x9b\x21\x45\xe8\xb4\xba\x82\xcf\xff\xba\x67\x61\xb2\xd8\xb9\xad\xfc\x76\xf5\xe1\x68\x82\x2f\x7f\x7c\xfa\xa2\x9f\xa7\xcb\x34\x3d\xc0\xea\x3c\x75\x85\xc5\xcb\x62\xa4\xa8\x3a\x6c\x9a\xbd\x0a\x9f\xf6\xf6\x75\xd3\x1a\x77\x1c\xcf\xfb\xba\x75\x2a\xa4\x56\x3a\x7f\x60\x31\x58\x4d\x6d\xd5\xce\x2e\x30\xf8\xa2\x24\x7f\x82\x81\xc5\x88\xbb\xe2\x96\xe0\xa0\x3c\xf7\x07\x2d\x1e\x83\x15\x3c\xba\xd6\xa0\xc3\x19\x85\x1e\x3c\xa7\x78\xe3\x3e\x5d\xa3\x77\x38\xf7\x41\xb7\xb9\x8c\xff\xac\x31\xd2\xd7\x39\xec\xcb\xa0\x66\xbb\x00\xea\x40\x4a\xc9\xfc\xe7\xdb\xc6\x0b\x11\x4a\x8a\x91\xd8\x50\x0c\xa1\x04\xb4\x2e\x9f\xb4\xfa\x78\x73\x78\xc8\xe5\x9e\x21\x3d\x8c\x27\xc8\x6b\xfb\x93\xfb\x49\x7c\xd8\x34\xc9\x80\x08\x49\xb4\x0c\x7b\x2f\xb7\x4b\x61\x34\xb6\x5a\x3f\xa0\x46\x63\x6c\xcd\x21\xeb\x6e\xf0\x96\x6a\xa3\xd7\xe3\x8a\x8c\xdd\xe0\x55\xad\x05\x76\xe4\xc5\xc0\xeb\x54\xe7\x49\x2a\x6a\x25\xaf\x45\x6d\x87\x0c\x49\xcb\xde\x8e\x47\xc1\xfd\x4a\x0a\x01\x1c\xdf\x14\xc1\x96\x6b\xa9\x1a\x34\xe0\x8a\xc3\x65\x1c\xc8\x8a\xfe\x07\x82\x63\xa8\xa5\x1a\x5c\x9f\x2b\x0a\xd7\x3c\x6b\x79\x23\x9a\xa2\xf1\xdc\x68\x14\x96\xf7\x12\xee\x8d\xb6\x54\x8d\x19\x70\x45\xe1\xfa\x0d\x1c\x37\xe8\x88\x8b\x7e\x93\x27\x12\xb4\x77\x32\x5a\xda\xa2\xd7\x73\x88\x42\xf4\x9a\x32\x2d\xa4\x25\x2e\xfa\x8d\x9b\x48\xd0\xbe\x98\x86\xb6\xe8\x15\xd9\x31\x88\xdd\xcb\xd2\xbb\x23\xf7\xba\x1a\xd5\x5d\xd4\x0d\x74\x47\xd4\xb2\xf9\x3c\x51\xa0\xe7\x9c\x94\x98\x3f\x76\xc2\xbc\xa5\x6a\xd8\x80\x2b\x0a\xf7\x23\xe0\xbc\x7b\x87\x5b\xda\xc2\x34\x3c\x1d\x47\x24\x62\xf8\x86\xa5\x11\x35\x6d\xd1\x6d\xa1\x46\x21\x5e\xf4\xb6\xe2\x85\xb7\x15\x2f\xf6\xda\x8a\x17\xfa\xc1\xd1\xc7\x52\x14\x83\x65\x47\xe3\xb0\xea\x1b\xf3\x6e\xda\x82\x69\x92\xfd\xc2\xde\x31\xc4\x45\x4e\xef\xb5\x50\xfe\x38\xa2\x16\xd1\xe7\x89\x03\xed\x88\xe8\xc9\xb7\x53\xb8\xb1\xff\xb9\xd2\xf9\x2a\x67\xff\xca\xf2\x1f\xa8\x99\x46\x16\x7e\xd9\xc5\x93\x2e\xe5\xd3\xd7\xca\xe9\xb5\x72\x7a\xad\x9c\x5e\x2b\xa7\xd7\xca\xa9\x15\xee\xb5\x72\x7a\xad\x9c\xcc\xcf\x6b\xe5\xf4\x5a\x39\xbd\x56\x4e\x11\x88\xaf\x95\xd3\x0b\xae\x9c\xfe\x17\x00\x00\xff\xff\xd5\xd3\xeb\x96\x02\x42\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 16898, mode: os.FileMode(420), modTime: time.Unix(1533249195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdf\x6b\xe3\x38\x10\xc7\xdf\xfd\x57\x0c\x21\x1c\xed\x91\x73\xaf\xdd\xb7\x40\x1f\x8e\xf6\x58\xfa\xd0\xa5\x74\xef\xee\x25\xe4\x41\x67\x4f\x12\xdd\x2a\x92\x57\x91\xb3\x14\xe3\xff\xfd\x90\x1d\x3b\xb6\x23\xd9\x6e\xd8\xc0\x2e\xcc\x14\x0a\xb6\x66\xe6\x3b\x1a\xfd\xc8\x07\x27\x2c\xfa\xc2\xd6\x08\x59\x06\xe1\x67\x34\xe1\x83\x92\x2b\xbe\x4e\x35\x33\x5c\xc9\xf0\x13\xdb\x22\xe4\x79\x10\xf0\x6d\xa2\xb4\x81\xc9\x5a\x85\x2c\x51\x1a\x8d\x0a\xb9\xba\x41\x81\x5b\x94\x86\x89\x49\x10\x44\x4a\xee\x0c\x48\x15\xab\xe8\xb3\xd1\x5c\xae\xe1\x1e\x26\x8b\xe2\x79\x39\x81\x9b\x1b\x90\x4a\x70\x69\xe6\xb0\x67\x3a\xda\x60\xf4\x65\x16\x23\x8b\x23\x15\x63\x10\xec\x99\x06\x8d\xa2\xd0\xdc\x6d\x78\xb2\x7b\xc5\x35\xdf\x19\xfd\x06\xb5\x42\xf8\xea\x1a\x0f\x82\x55\x2a\x23\xe0\x92\x9b\xab\x6b\xc8\x82\x00\x00\x3c\x99\xee\x87\x72\x65\x79\x19\x9e\x65\xa0\x99\x5c\x23\x4c\x51\x1a\x6e\xde\x6c\x0f\x66\x30\xad\xb2\xc2\xfc\xbe\xec\x54\x2b\x89\x6d\x52\x19\xfc\x1b\xf0\x15\xec\x36\x2a\x15\x71\x99\x19\x75\xd3\x13\xa6\x36\xb8\x99\x1b\xa6\xe1\x4b\xfa\xaf\xe0\xd1\xb3\x8a\xf1\x90\xc6\x39\x85\x45\x96\xb5\xe2\xf2\xfc\x29\x2e\x1f\x97\x70\x0f\xbf\xb8\xa7\x97\x15\xf9\x1a\xa5\xad\x0d\x5c\x09\x94\xc7\x09\x85\x0f\x1a\x99\xc1\x6b\xf8\xbd\x9a\x84\xb5\xf2\xe5\x1c\xb6\x2c\x59\xec\x8a\xf5\x5c\xfe\xea\x56\x78\x92\x2b\x05\x47\x99\x4a\xea\xd0\xc3\x84\x69\x94\x66\x06\x53\x16\x55\xdd\xeb\x2a\x37\x65\xbd\x3d\x7c\x92\xd2\xdd\xc8\x52\xa0\xd5\xc4\x6e\xc2\x89\x6d\xdc\xc1\x2f\xcf\x27\x30\xf7\x35\xcb\x4e\xa5\x3d\x93\x46\x3d\x87\x19\x84\x8f\x98\x68\x8c\x98\xc1\xb8\xab\x63\xed\x38\x3a\x07\xa3\x53\x9c\x39\xd3\xa1\x74\x06\x77\x94\x5e\x98\x66\x5b\x34\xa8\x1f\x71\x65\xb7\xb8\xed\x9f\x3f\xaa\x5e\x58\x7f\x74\xf8\x8a\x5f\x53\xae\x31\xee\x2c\x76\x65\xd5\x70\x1d\xba\x9b\x37\x4e\xcd\x27\xfc\x76\x1c\x38\xb8\xda\xa1\xab\x93\x3c\xd6\x16\x4b\xfb\x57\x6e\x9d\xd3\x9e\x36\x6b\x3f\xec\x14\x3e\x83\xa9\xb8\x2d\x36\xc8\x88\x19\xb8\xca\xf7\x35\x44\xdc\x7a\xe6\xdb\xac\x75\xa8\x52\x57\xb5\x77\x45\xb5\xe2\xb6\x2f\xb7\xb3\xa0\xbb\x81\x82\xca\xa2\xc6\x94\xe4\x2a\xeb\x43\x59\xd6\xdd\x90\x02\x54\x67\x43\x7c\xb0\xe7\xe2\x74\xab\xba\x84\x50\xc6\x03\x69\xf3\xfe\x44\xe3\x92\x0c\x7b\xf5\xc8\x0c\x07\xf7\x7b\x38\x52\x5f\x9f\x73\x90\xc7\x1c\xc9\x3f\xa5\xd1\x1c\x77\x9e\x0d\xd1\x3c\x89\x8b\xe5\xf1\x2c\x3a\x32\xb9\x2f\xae\xc6\xbe\x48\x86\xce\xd6\xa1\x14\xef\xb6\x79\xa7\x7c\x65\xf6\xc7\x6a\x7e\xb8\x84\x2b\xa2\xe8\xd9\x6c\x7f\xbd\x25\x47\x77\xfb\xd0\xef\x5e\xdd\x99\x49\xf8\x88\x2b\x96\x0a\xf3\x0f\x13\xe9\xc9\x4f\x40\xd3\x9a\x7e\xb5\x50\x27\x78\x40\x70\x78\x73\xf1\x15\xe0\xd7\x7a\x06\x13\x94\xe9\x76\xd2\x57\xd4\x1f\x42\xa8\x6f\x18\x3f\x6c\x14\x8f\xb0\x58\xec\x77\x5e\x48\xff\xcd\x60\xba\x2f\x56\x38\x09\xdb\xc9\x86\xae\x81\xa2\x03\xfb\xe1\x1b\xa0\x67\xbf\x57\x36\x7c\x26\x47\xdc\xdb\xd3\x24\x7c\x4e\x85\xe1\x89\xe8\x5d\xc6\xca\xc7\xf7\x3b\x3b\x52\xd8\x51\x72\x4f\xc4\xfb\xbc\x3d\x43\x9d\x24\x1e\x2f\xc7\xeb\x46\xa0\x63\xd4\x0b\x78\x7f\x27\xf1\x29\xe0\x95\x2f\x2f\x0c\x78\xa5\x08\x01\x9e\x47\x89\x00\x8f\x00\x8f\x00\xef\x0c\x19\x02\xbc\xba\x8a\xef\x08\x78\xc4\x77\x40\x7c\x47\x7c\x37\xde\xfb\x82\x7c\xf7\xc2\x4c\xb4\x21\x3a\x23\x3a\x23\x3a\xf3\x56\x4b\x74\xe6\x32\xa2\x33\xa2\xb3\x86\x11\x9d\x11\x9d\x11\x9d\xf9\x93\x5c\xfc\xeb\xdb\x23\x0a\x3c\xf9\xfa\x56\xbe\xbc\x30\xdf\x95\x22\xc4\x77\x1e\x25\xe2\x3b\xe2\x3b\xe2\xbb\x33\x64\x88\xef\xea\x2a\x88\xef\xba\x46\x7c\xd7\x36\xe2\xbb\xf1\x11\x3f\x25\xdf\x7d\x44\xd3\xb9\x5d\x5e\xd1\x1e\xf4\xfd\xa5\xf1\xee\x23\x1a\x62\x3b\x8f\x12\xb1\x1d\xb1\x1d\xb1\xdd\x19\x32\xc4\x76\x75\x15\xc4\x76\x5d\x23\xb6\x6b\x1b\xb1\xdd\xf8\x88\x9f\x95\xed\x9e\x99\x7c\xf3\xf0\x9d\x1d\xba\x3c\xe3\x59\x15\xe2\x3c\x8f\x12\x71\x1e\x71\x1e\x71\xde\x19\x32\xc4\x79\x75\x15\xc4\x79\x5d\x23\xce\x6b\x1b\x71\xde\xf8\x88\x1f\x86\xf3\x2c\xa9\x10\x9d\x01\xd1\x19\xd1\x99\xb7\x5a\xa2\x33\x97\x11\x9d\x11\x9d\x35\x8c\xe8\x8c\xe8\x8c\xe8\xcc\x9f\xe4\x7b\x7c\x85\x2b\xff\x77\x5e\x66\x59\xf5\x94\x07\xff\x07\x00\x00\xff\xff\xbd\x9e\xc8\xb9\xa8\x46\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 18088, mode: os.FileMode(420), modTime: time.Unix(1533220355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

